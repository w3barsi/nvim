AbortSystemShutdown([lpMachineName]) => Integer
AbortSystemShutdownA([lpMachineName]) => Integer
AbortSystemShutdownW([lpMachineName]) => Integer
AccessCheck([pSecurityDescriptor, ClientToken, DesiredAccess, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus]) => Integer
AccessCheckAndAuditAlarm([SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose]) => Integer
AccessCheckAndAuditAlarmA([SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose]) => Integer
AccessCheckAndAuditAlarmW([SubsystemName, HandleId, ObjectTypeName, ObjectName, SecurityDescriptor, DesiredAccess, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose]) => Integer
AccessCheckByType([pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccess, AccessStatus]) => Integer
AccessCheckByTypeAndAuditAlarm([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose]) => Integer
AccessCheckByTypeAndAuditAlarmA([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose]) => Integer
AccessCheckByTypeAndAuditAlarmW([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatus, pfGenerateOnClose]) => Integer
AccessCheckByTypeResultList([pSecurityDescriptor, PrincipalSelfSid, ClientToken, DesiredAccess, ObjectTypeList, ObjectTypeListLength, GenericMapping, PrivilegeSet, PrivilegeSetLength, GrantedAccessList, AccessStatusList]) => Integer
AccessCheckByTypeResultListAndAuditAlarm([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose]) => Integer
AccessCheckByTypeResultListAndAuditAlarmA([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose]) => Integer
AccessCheckByTypeResultListAndAuditAlarmByHandle([SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose]) => Integer
AccessCheckByTypeResultListAndAuditAlarmByHandleA([SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose]) => Integer
AccessCheckByTypeResultListAndAuditAlarmByHandleW([SubsystemName, HandleId, ClientToken, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose]) => Integer
AccessCheckByTypeResultListAndAuditAlarmW([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, PrincipalSelfSid, DesiredAccess, AuditType, Flags, ObjectTypeList, ObjectTypeListLength, GenericMapping, ObjectCreation, GrantedAccess, AccessStatusList, pfGenerateOnClose]) => Integer
AddAccessAllowedAce([pAcl, dwAceRevision, AccessMask, pSid]) => Integer
AddAccessAllowedAceEx([pAcl, dwAceRevision, AceFlags, AccessMask, pSid]) => Integer
AddAccessAllowedObjectAce([pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid]) => Integer
AddAccessDeniedAce([pAcl, dwAceRevision, AccessMask, pSid]) => Integer
AddAccessDeniedAceEx([pAcl, dwAceRevision, AceFlags, AccessMask, pSid]) => Integer
AddAccessDeniedObjectAce([pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid]) => Integer
AddAce([pAcl, dwAceRevision, dwStartingAceIndex, pAceList, nAceListLength]) => Integer
AddAuditAccessAce([pAcl, dwAceRevision, dwAccessMask, pSid, bAuditSuccess, bAuditFailure]) => Integer
AddAuditAccessAceEx([pAcl, dwAceRevision, AceFlags, dwAccessMask, pSid, bAuditSuccess, bAuditFailure]) => Integer
AddAuditAccessObjectAce([pAcl, dwAceRevision, AceFlags, AccessMask, ObjectTypeGuid, InheritedObjectTypeGuid, pSid, bAuditSuccess, bAuditFailure]) => Integer
AddConditionalAce([pAcl, dwAceRevision, AceFlags, AceType, AccessMask, pSid, ConditionStr, ReturnLength]) => Integer
AddMandatoryAce([pAcl, dwAceRevision, AceFlags, MandatoryPolicy, pLabelSid]) => Integer
AddUsersToEncryptedFile([lpFileName, pUsers]) => Integer
AdjustTokenGroups([TokenHandle, ResetToDefault, NewState, BufferLength, PreviousState, ReturnLength]) => Integer
AdjustTokenPrivileges([TokenHandle, DisableAllPrivileges, NewState, BufferLength, PreviousState, ReturnLength]) => Integer
AllocateAndInitializeSid([pIdentifierAuthority, nSubAuthorityCount, dwSubAuthority0, dwSubAuthority1, dwSubAuthority2, dwSubAuthority3, dwSubAuthority4, dwSubAuthority5, dwSubAuthority6, dwSubAuthority7, pSid]) => Integer
AllocateLocallyUniqueId([Luid]) => Integer
AreAllAccessesGranted([GrantedAccess, DesiredAccess]) => Integer
AreAnyAccessesGranted([GrantedAccess, DesiredAccess]) => Integer
AuditComputeEffectivePolicyBySid([pSid, pSubCategoryGuids, PolicyCount, ppAuditPolicy]) => Integer
AuditComputeEffectivePolicyByToken([hTokenHandle, pSubCategoryGuids, PolicyCount, ppAuditPolicy]) => Integer
AuditEnumerateCategories([ppAuditCategoriesArray, pCountReturned]) => Integer
AuditEnumeratePerUserPolicy([ppAuditSidArray]) => Integer
AuditEnumerateSubCategories([pAuditCategoryGuid, bRetrieveAllSubCategories, ppAuditSubCategoriesArray, pCountReturned]) => Integer
AuditFree([Buffer]) => void
AuditLookupCategoryGuidFromCategoryId([AuditCategoryId, pAuditCategoryGuid]) => Integer
AuditLookupCategoryIdFromCategoryGuid([pAuditCategoryGuid, pAuditCategoryId]) => Integer
AuditLookupCategoryName([pAuditCategoryGuid, ppszCategoryName]) => Integer
AuditLookupCategoryNameA([pAuditCategoryGuid, ppszCategoryName]) => Integer
AuditLookupCategoryNameW([pAuditCategoryGuid, ppszCategoryName]) => Integer
AuditLookupSubCategoryName([pAuditSubCategoryGuid, ppszSubCategoryName]) => Integer
AuditLookupSubCategoryNameA([pAuditSubCategoryGuid, ppszSubCategoryName]) => Integer
AuditLookupSubCategoryNameW([pAuditSubCategoryGuid, ppszSubCategoryName]) => Integer
AuditQueryGlobalSacl([ObjectTypeName, Acl]) => Integer
AuditQueryGlobalSaclA([ObjectTypeName, Acl]) => Integer
AuditQueryGlobalSaclW([ObjectTypeName, Acl]) => Integer
AuditQueryPerUserPolicy([pSid, pSubCategoryGuids, PolicyCount, ppAuditPolicy]) => Integer
AuditQuerySecurity([SecurityInformation, ppSecurityDescriptor]) => Integer
AuditQuerySystemPolicy([pSubCategoryGuids, PolicyCount, ppAuditPolicy]) => Integer
AuditSetGlobalSacl([ObjectTypeName, Acl]) => Integer
AuditSetGlobalSaclA([ObjectTypeName, Acl]) => Integer
AuditSetGlobalSaclW([ObjectTypeName, Acl]) => Integer
AuditSetPerUserPolicy([pSid, pAuditPolicy, PolicyCount]) => Integer
AuditSetSecurity([SecurityInformation, pSecurityDescriptor]) => Integer
AuditSetSystemPolicy([pAuditPolicy, PolicyCount]) => Integer
BackupEventLog([hEventLog, lpBackupFileName]) => Integer
BackupEventLogA([hEventLog, lpBackupFileName]) => Integer
BackupEventLogW([hEventLog, lpBackupFileName]) => Integer
BuildExplicitAccessWithName([pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode, Inheritance]) => void
BuildExplicitAccessWithNameA([pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode, Inheritance]) => void
BuildExplicitAccessWithNameW([pExplicitAccess, pTrusteeName, AccessPermissions, AccessMode, Inheritance]) => void
BuildSecurityDescriptor([pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD, pNewSD]) => Integer
BuildSecurityDescriptorA([pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD, pNewSD]) => Integer
BuildSecurityDescriptorW([pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pOldSD, pSizeNewSD, pNewSD]) => Integer
BuildTrusteeWithName([pTrustee, pName]) => void
BuildTrusteeWithNameA([pTrustee, pName]) => void
BuildTrusteeWithNameW([pTrustee, pName]) => void
BuildTrusteeWithObjectsAndName([pTrustee, pObjName, ObjectType, ObjectTypeName, InheritedObjectTypeName, Name]) => void
BuildTrusteeWithObjectsAndNameA([pTrustee, pObjName, ObjectType, ObjectTypeName, InheritedObjectTypeName, Name]) => void
BuildTrusteeWithObjectsAndNameW([pTrustee, pObjName, ObjectType, ObjectTypeName, InheritedObjectTypeName, Name]) => void
BuildTrusteeWithObjectsAndSid([pTrustee, pObjSid, pObjectGuid, pInheritedObjectGuid, pSid]) => void
BuildTrusteeWithObjectsAndSidA([pTrustee, pObjSid, pObjectGuid, pInheritedObjectGuid, pSid]) => void
BuildTrusteeWithObjectsAndSidW([pTrustee, pObjSid, pObjectGuid, pInheritedObjectGuid, pSid]) => void
BuildTrusteeWithSid([pTrustee, pSid]) => void
BuildTrusteeWithSidA([pTrustee, pSid]) => void
BuildTrusteeWithSidW([pTrustee, pSid]) => void
ChangeServiceConfig([hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName]) => Integer
ChangeServiceConfig2([hService, dwInfoLevel, lpInfo]) => Integer
ChangeServiceConfig2A([hService, dwInfoLevel, lpInfo]) => Integer
ChangeServiceConfig2W([hService, dwInfoLevel, lpInfo]) => Integer
ChangeServiceConfigA([hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName]) => Integer
ChangeServiceConfigW([hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName]) => Integer
CheckTokenMembership([TokenHandle, SidToCheck, IsMember]) => Integer
ClearEventLog([hEventLog, lpBackupFileName]) => Integer
ClearEventLogA([hEventLog, lpBackupFileName]) => Integer
ClearEventLogW([hEventLog, lpBackupFileName]) => Integer
CloseEncryptedFileRaw([pvContext]) => void
CloseEventLog([hEventLog]) => Integer
CloseServiceHandle([hSCObject]) => Integer
CloseThreadWaitChainSession([WctHandle]) => void
ControlService([hService, dwControl, lpServiceStatus]) => Integer
ControlServiceEx([hService, dwControl, dwInfoLevel, pControlParams]) => Integer
ControlServiceExA([hService, dwControl, dwInfoLevel, pControlParams]) => Integer
ControlServiceExW([hService, dwControl, dwInfoLevel, pControlParams]) => Integer
ConvertSecurityDescriptorToStringSecurityDescriptor([SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor, StringSecurityDescriptorLen]) => Integer
ConvertSecurityDescriptorToStringSecurityDescriptorA([SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor, StringSecurityDescriptorLen]) => Integer
ConvertSecurityDescriptorToStringSecurityDescriptorW([SecurityDescriptor, RequestedStringSDRevision, SecurityInformation, StringSecurityDescriptor, StringSecurityDescriptorLen]) => Integer
ConvertSidToStringSid([Sid, StringSid]) => Integer
ConvertSidToStringSidA([Sid, StringSid]) => Integer
ConvertSidToStringSidW([Sid, StringSid]) => Integer
ConvertStringSecurityDescriptorToSecurityDescriptor([StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize]) => Integer
ConvertStringSecurityDescriptorToSecurityDescriptorA([StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize]) => Integer
ConvertStringSecurityDescriptorToSecurityDescriptorW([StringSecurityDescriptor, StringSDRevision, SecurityDescriptor, SecurityDescriptorSize]) => Integer
ConvertStringSidToSid([StringSid, Sid]) => Integer
ConvertStringSidToSidA([StringSid, Sid]) => Integer
ConvertStringSidToSidW([StringSid, Sid]) => Integer
ConvertToAutoInheritPrivateObjectSecurity([ParentDescriptor, CurrentSecurityDescriptor, NewSecurityDescriptor, ObjectType, IsDirectoryObject, GenericMapping]) => Integer
CopySid([nDestinationSidLength, pDestinationSid, pSourceSid]) => Integer
CreatePrivateObjectSecurity([ParentDescriptor, CreatorDescriptor, NewDescriptor, IsDirectoryObject, Token, GenericMapping]) => Integer
CreatePrivateObjectSecurityEx([ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectType, IsContainerObject, AutoInheritFlags, Token, GenericMapping]) => Integer
CreatePrivateObjectSecurityWithMultipleInheritance([ParentDescriptor, CreatorDescriptor, NewDescriptor, ObjectTypes, GuidCount, IsContainerObject, AutoInheritFlags, Token, GenericMapping]) => Integer
CreateProcessAsUser([hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation]) => Integer
CreateProcessAsUserA([hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation]) => Integer
CreateProcessAsUserW([hToken, lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation]) => Integer
CreateProcessWithLogonW([lpUsername, lpDomain, lpPassword, dwLogonFlags, lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInfo]) => Integer
CreateProcessWithTokenW([hToken, dwLogonFlags, lpApplicationName, lpCommandLine, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInfo]) => Integer
CreateRestrictedToken([ExistingTokenHandle, Flags, DisableSidCount, SidsToDisable, DeletePrivilegeCount, PrivilegesToDelete, RestrictedSidCount, SidsToRestrict, NewTokenHandle]) => Integer
CreateService([hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword]) => Integer
CreateServiceA([hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword]) => Integer
CreateServiceW([hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword]) => Integer
CreateTraceInstanceId([RegHandle, pInstInfo]) => Integer
CreateWellKnownSid([WellKnownSidType, DomainSid, pSid, cbSid]) => Integer
CredDelete([TargetName, Type, Flags]) => Integer
CredDeleteA([TargetName, Type, Flags]) => Integer
CredDeleteW([TargetName, Type, Flags]) => Integer
CredEnumerate([Filter, Flags, Count, Credentials]) => Integer
CredEnumerateA([Filter, Flags, Count, Credentials]) => Integer
CredEnumerateW([Filter, Flags, Count, Credentials]) => Integer
CredFindBestCredential([TargetName, Type, Flags, Credential]) => Integer
CredFindBestCredentialA([TargetName, Type, Flags, Credential]) => Integer
CredFindBestCredentialW([TargetName, Type, Flags, Credential]) => Integer
CredFree([Buffer]) => void
CredGetSessionTypes([MaximumPersistCount, MaximumPersist]) => Integer
CredGetTargetInfo([TargetName, Flags, TargetInfo]) => Integer
CredGetTargetInfoA([TargetName, Flags, TargetInfo]) => Integer
CredGetTargetInfoW([TargetName, Flags, TargetInfo]) => Integer
CredIsMarshaledCredential([MarshaledCredential]) => Integer
CredIsMarshaledCredentialA([MarshaledCredential]) => Integer
CredIsMarshaledCredentialW([MarshaledCredential]) => Integer
CredIsProtected([pszProtectedCredentials, pProtectionType]) => Integer
CredIsProtectedA([pszProtectedCredentials, pProtectionType]) => Integer
CredIsProtectedW([pszProtectedCredentials, pProtectionType]) => Integer
CredMarshalCredential([CredType, Credential, MarshaledCredential]) => Integer
CredMarshalCredentialA([CredType, Credential, MarshaledCredential]) => Integer
CredMarshalCredentialW([CredType, Credential, MarshaledCredential]) => Integer
CredMarshalTargetInfo([InTargetInfo, Buffer, BufferSize]) => Integer
CredProtect([fAsSelf, pszCredentials, cchCredentials, pszProtectedCredentials, pcchMaxChars, ProtectionType]) => Integer
CredProtectA([fAsSelf, pszCredentials, cchCredentials, pszProtectedCredentials, pcchMaxChars, ProtectionType]) => Integer
CredProtectW([fAsSelf, pszCredentials, cchCredentials, pszProtectedCredentials, pcchMaxChars, ProtectionType]) => Integer
CredRead([TargetName, Type, Flags, Credential]) => Integer
CredReadA([TargetName, Type, Flags, Credential]) => Integer
CredReadDomainCredentials([TargetInfo, Flags, Count, Credentials]) => Integer
CredReadDomainCredentialsA([TargetInfo, Flags, Count, Credentials]) => Integer
CredReadDomainCredentialsW([TargetInfo, Flags, Count, Credentials]) => Integer
CredReadW([TargetName, Type, Flags, Credential]) => Integer
CredRename([OldTargetName, NewTargetName, Type, Flags]) => Integer
CredRenameA([OldTargetName, NewTargetName, Type, Flags]) => Integer
CredRenameW([OldTargetName, NewTargetName, Type, Flags]) => Integer
CredUnmarshalCredential([MarshaledCredential, CredType, Credential]) => Integer
CredUnmarshalCredentialA([MarshaledCredential, CredType, Credential]) => Integer
CredUnmarshalCredentialW([MarshaledCredential, CredType, Credential]) => Integer
CredUnprotect([fAsSelf, pszProtectedCredentials, cchCredentials, pszCredentials, pcchMaxChars]) => Integer
CredUnprotectA([fAsSelf, pszProtectedCredentials, cchCredentials, pszCredentials, pcchMaxChars]) => Integer
CredUnprotectW([fAsSelf, pszProtectedCredentials, cchCredentials, pszCredentials, pcchMaxChars]) => Integer
CredWrite([Credential, Flags]) => Integer
CredWriteA([Credential, Flags]) => Integer
CredWriteDomainCredentials([TargetInfo, Credential, Flags]) => Integer
CredWriteDomainCredentialsA([TargetInfo, Credential, Flags]) => Integer
CredWriteDomainCredentialsW([TargetInfo, Credential, Flags]) => Integer
CredWriteW([Credential, Flags]) => Integer
CryptAcquireContext([phProv, pszContainer, pszProvider, dwProvType, dwFlags]) => Integer
CryptAcquireContextA([phProv, pszContainer, pszProvider, dwProvType, dwFlags]) => Integer
CryptAcquireContextW([phProv, pszContainer, pszProvider, dwProvType, dwFlags]) => Integer
CryptContextAddRef([hProv, pdwReserved, dwFlags]) => Integer
CryptCreateHash([hProv, Algid, hKey, dwFlags, phHash]) => Integer
CryptDecrypt([hKey, hHash, Final, dwFlags, pbData, pdwDataLen]) => Integer
CryptDeriveKey([hProv, Algid, hBaseData, dwFlags, phKey]) => Integer
CryptDestroyHash([hHash]) => Integer
CryptDestroyKey([hKey]) => Integer
CryptDuplicateHash([hHash, pdwReserved, dwFlags, phHash]) => Integer
CryptDuplicateKey([hKey, pdwReserved, dwFlags, phKey]) => Integer
CryptEncrypt([hKey, hHash, Final, dwFlags, pbData, pdwDataLen, dwBufLen]) => Integer
CryptEnumProviders([dwIndex, pdwReserved, dwFlags, pdwProvType, pszProvName, pcbProvName]) => Integer
CryptEnumProvidersA([dwIndex, pdwReserved, dwFlags, pdwProvType, pszProvName, pcbProvName]) => Integer
CryptEnumProvidersW([dwIndex, pdwReserved, dwFlags, pdwProvType, pszProvName, pcbProvName]) => Integer
CryptEnumProviderTypes([dwIndex, pdwReserved, dwFlags, pdwProvType, pszTypeName, pcbTypeName]) => Integer
CryptEnumProviderTypesA([dwIndex, pdwReserved, dwFlags, pdwProvType, pszTypeName, pcbTypeName]) => Integer
CryptEnumProviderTypesW([dwIndex, pdwReserved, dwFlags, pdwProvType, pszTypeName, pcbTypeName]) => Integer
CryptExportKey([hKey, hExpKey, dwBlobType, dwFlags, pbData, pdwDataLen]) => Integer
CryptGenKey([hProv, Algid, dwFlags, phKey]) => Integer
CryptGenRandom([hProv, dwLen, pbBuffer]) => Integer
CryptGetDefaultProvider([dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName]) => Integer
CryptGetDefaultProviderA([dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName]) => Integer
CryptGetDefaultProviderW([dwProvType, pdwReserved, dwFlags, pszProvName, pcbProvName]) => Integer
CryptGetHashParam([hHash, dwParam, pbData, pdwDataLen, dwFlags]) => Integer
CryptGetKeyParam([hKey, dwParam, pbData, pdwDataLen, dwFlags]) => Integer
CryptGetProvParam([hProv, dwParam, pbData, pdwDataLen, dwFlags]) => Integer
CryptGetUserKey([hProv, dwKeySpec, phUserKey]) => Integer
CryptHashData([hHash, pbData, dwDataLen, dwFlags]) => Integer
CryptHashSessionKey([hHash, hKey, dwFlags]) => Integer
CryptImportKey([hProv, pbData, dwDataLen, hPubKey, dwFlags, phKey]) => Integer
CryptReleaseContext([hProv, dwFlags]) => Integer
CryptSetHashParam([hHash, dwParam, pbData, dwFlags]) => Integer
CryptSetKeyParam([hKey, dwParam, pbData, dwFlags]) => Integer
CryptSetProvider([pszProvName, dwProvType]) => Integer
CryptSetProviderA([pszProvName, dwProvType]) => Integer
CryptSetProviderEx([pszProvName, dwProvType, pdwReserved, dwFlags]) => Integer
CryptSetProviderExA([pszProvName, dwProvType, pdwReserved, dwFlags]) => Integer
CryptSetProviderExW([pszProvName, dwProvType, pdwReserved, dwFlags]) => Integer
CryptSetProviderW([pszProvName, dwProvType]) => Integer
CryptSetProvParam([hProv, dwParam, pbData, dwFlags]) => Integer
CryptSignHash([hHash, dwKeySpec, sDescription, dwFlags, pbSignature, pdwSigLen]) => Integer
CryptSignHashA([hHash, dwKeySpec, sDescription, dwFlags, pbSignature, pdwSigLen]) => Integer
CryptSignHashW([hHash, dwKeySpec, sDescription, dwFlags, pbSignature, pdwSigLen]) => Integer
CryptVerifySignature([hHash, pbSignature, dwSigLen, hPubKey, sDescription, dwFlags]) => Integer
CryptVerifySignatureA([hHash, pbSignature, dwSigLen, hPubKey, sDescription, dwFlags]) => Integer
CryptVerifySignatureW([hHash, pbSignature, dwSigLen, hPubKey, sDescription, dwFlags]) => Integer
DecryptFile([lpFileName, dwReserved]) => Integer
DecryptFileA([lpFileName, dwReserved]) => Integer
DecryptFileW([lpFileName, dwReserved]) => Integer
DeleteAce([pAcl, dwAceIndex]) => Integer
DeleteService([hService]) => Integer
DeregisterEventSource([hEventLog]) => Integer
DestroyPrivateObjectSecurity([ObjectDescriptor]) => Integer
DuplicateEncryptionInfoFile([SrcFileName, DstFileName, dwCreationDistribution, dwAttributes, lpSecurityAttributes]) => Integer
DuplicateToken([ExistingTokenHandle, ImpersonationLevel, DuplicateTokenHandle]) => Integer
DuplicateTokenEx([hExistingToken, dwDesiredAccess, lpTokenAttributes, ImpersonationLevel, TokenType, phNewToken]) => Integer
EnableTrace([Enable, EnableFlag, EnableLevel, ControlGuid, SessionHandle]) => Integer
EnableTraceEx([ProviderId, SourceId, TraceHandle, IsEnabled, Level, MatchAnyKeyword, MatchAllKeyword, EnableProperty, EnableFilterDesc]) => Integer
EncryptFile([lpFileName]) => Integer
EncryptFileA([lpFileName]) => Integer
EncryptFileW([lpFileName]) => Integer
EncryptionDisable([DirPath, Disable]) => Integer
EnumDependentServices([hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned]) => Integer
EnumDependentServicesA([hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned]) => Integer
EnumDependentServicesW([hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned]) => Integer
EnumerateTraceGuids([GuidPropertiesArray, PropertyArrayCount, GuidCount]) => Integer
EnumerateTraceGuidsEx([TraceQueryInfoClass, InBuffer, InBufferSize, OutBuffer, OutBufferSize, ReturnLength]) => Integer
EnumServicesStatus([hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle]) => Integer
EnumServicesStatusA([hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle]) => Integer
EnumServicesStatusEx([hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName]) => Integer
EnumServicesStatusExA([hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName]) => Integer
EnumServicesStatusExW([hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName]) => Integer
EnumServicesStatusW([hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle]) => Integer
EqualDomainSid([pSid1, pSid2, pfEqual]) => Integer
EqualPrefixSid([pSid1, pSid2]) => Integer
EqualSid([pSid1, pSid2]) => Integer
EventAccessQuery([Guid, Buffer, BufferSize]) => Integer
EventActivityIdControl([ControlCode, ActivityId]) => Integer
EventEnabled([RegHandle, EventDescriptor]) => Integer
EventProviderEnabled([RegHandle, Level, Keyword]) => Integer
EventRegister([ProviderId, EnableCallback, CallbackContext, RegHandle]) => Integer
EventUnregister([RegHandle]) => Integer
EventWrite([RegHandle, EventDescriptor, UserDataCount, UserData]) => Integer
EventWriteEx([RegHandle, EventDescriptor, Filter, Flags, ActivityId, RelatedActivityId, UserDataCount, UserData]) => Integer
EventWriteString([RegHandle, Level, Keyword, String]) => Integer
EventWriteTransfer([RegHandle, EventDescriptor, ActivityId, RelatedActivityId, UserDataCount, UserData]) => Integer
FileEncryptionStatus([lpFileName, lpStatus]) => Integer
FileEncryptionStatusA([lpFileName, lpStatus]) => Integer
FileEncryptionStatusW([lpFileName, lpStatus]) => Integer
FindFirstFreeAce([pAcl, pAce]) => Integer
FlushTrace([SessionHandle, SessionName, Properties]) => Integer
FlushTraceA([SessionHandle, SessionName, Properties]) => Integer
FlushTraceW([SessionHandle, SessionName, Properties]) => Integer
FreeEncryptionCertificateHashList([pHashes]) => void
FreeInheritedFromArray([pInheritArray, AceCnt, pfnArray]) => Integer
FreeSid([pSid]) => Integer
GetAce([pAcl, dwAceIndex, pAce]) => Integer
GetAclInformation([pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass]) => Integer
GetAuditedPermissionsFromAcl([pacl, pTrustee, pSuccessfulAuditedRights, pFailedAuditRights]) => Integer
GetAuditedPermissionsFromAclA([pacl, pTrustee, pSuccessfulAuditedRights, pFailedAuditRights]) => Integer
GetAuditedPermissionsFromAclW([pacl, pTrustee, pSuccessfulAuditedRights, pFailedAuditRights]) => Integer
GetCurrentHwProfile([lpHwProfileInfo]) => Integer
GetCurrentHwProfileA([lpHwProfileInfo]) => Integer
GetCurrentHwProfileW([lpHwProfileInfo]) => Integer
GetEffectiveRightsFromAcl([pacl, pTrustee, pAccessRights]) => Integer
GetEffectiveRightsFromAclA([pacl, pTrustee, pAccessRights]) => Integer
GetEffectiveRightsFromAclW([pacl, pTrustee, pAccessRights]) => Integer
GetEventLogInformation([hEventLog, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded]) => Integer
GetExplicitEntriesFromAcl([pacl, pcCountOfExplicitEntries, pListOfExplicitEntries]) => Integer
GetExplicitEntriesFromAclA([pacl, pcCountOfExplicitEntries, pListOfExplicitEntries]) => Integer
GetExplicitEntriesFromAclW([pacl, pcCountOfExplicitEntries, pListOfExplicitEntries]) => Integer
GetFileSecurity([lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded]) => Integer
GetFileSecurityA([lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded]) => Integer
GetFileSecurityW([lpFileName, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded]) => Integer
GetInheritanceSource([pObjectName, ObjectType, SecurityInfo, Container, pObjectClassGuids, GuidCount, pAcl, pfnArray, pGenericMapping, pInheritArray]) => Integer
GetInheritanceSourceA([pObjectName, ObjectType, SecurityInfo, Container, pObjectClassGuids, GuidCount, pAcl, pfnArray, pGenericMapping, pInheritArray]) => Integer
GetInheritanceSourceW([pObjectName, ObjectType, SecurityInfo, Container, pObjectClassGuids, GuidCount, pAcl, pfnArray, pGenericMapping, pInheritArray]) => Integer
GetKernelObjectSecurity([Handle, RequestedInformation, pSecurityDescriptor, nLength, lpnLengthNeeded]) => Integer
GetLengthSid([pSid]) => Integer
GetLocalManagedApplications([bUserApps, pdwApps, prgLocalApps]) => Integer
GetManagedApplicationCategories([dwReserved, pAppCategory]) => Integer
GetManagedApplications([pCategory, dwQueryFlags, dwInfoLevel, pdwApps, prgManagedApps]) => Integer
GetNamedSecurityInfo([pObjectName, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor]) => Integer
GetNamedSecurityInfoA([pObjectName, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor]) => Integer
GetNamedSecurityInfoW([pObjectName, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor]) => Integer
GetNumberOfEventLogRecords([hEventLog, NumberOfRecords]) => Integer
GetOldestEventLogRecord([hEventLog, OldestRecord]) => Integer
GetPrivateObjectSecurity([ObjectDescriptor, SecurityInformation, ResultantDescriptor, DescriptorLength, ReturnLength]) => Integer
GetSecurityDescriptorControl([pSecurityDescriptor, pControl, lpdwRevision]) => Integer
GetSecurityDescriptorDacl([pSecurityDescriptor, lpbDaclPresent, pDacl, lpbDaclDefaulted]) => Integer
GetSecurityDescriptorGroup([pSecurityDescriptor, pGroup, lpbGroupDefaulted]) => Integer
GetSecurityDescriptorLength([pSecurityDescriptor]) => Integer
GetSecurityDescriptorOwner([pSecurityDescriptor, pOwner, lpbOwnerDefaulted]) => Integer
GetSecurityDescriptorRMControl([SecurityDescriptor, RMControl]) => Integer
GetSecurityDescriptorSacl([pSecurityDescriptor, lpbSaclPresent, pSacl, lpbSaclDefaulted]) => Integer
GetSecurityInfo([handle, ObjectType, SecurityInfo, ppsidOwner, ppsidGroup, ppDacl, ppSacl, ppSecurityDescriptor]) => Integer
GetServiceDisplayName([hSCManager, lpServiceName, lpDisplayName, lpcchBuffer]) => Integer
GetServiceDisplayNameA([hSCManager, lpServiceName, lpDisplayName, lpcchBuffer]) => Integer
GetServiceDisplayNameW([hSCManager, lpServiceName, lpDisplayName, lpcchBuffer]) => Integer
GetServiceKeyName([hSCManager, lpDisplayName, lpServiceName, lpcchBuffer]) => Integer
GetServiceKeyNameA([hSCManager, lpDisplayName, lpServiceName, lpcchBuffer]) => Integer
GetServiceKeyNameW([hSCManager, lpDisplayName, lpServiceName, lpcchBuffer]) => Integer
GetSidIdentifierAuthority([pSid]) => Integer
GetSidLengthRequired([nSubAuthorityCount]) => Integer
GetSidSubAuthority([pSid, nSubAuthority]) => Integer
GetSidSubAuthorityCount([pSid]) => Integer
GetThreadWaitChain([WctHandle, Context, Flags, ThreadId, NodeCount, NodeInfoArray, IsCycle]) => Integer
GetTokenInformation([TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength, ReturnLength]) => Integer
GetTraceEnableFlags([SessionHandle]) => Integer
GetTraceEnableLevel([SessionHandle]) => Integer
GetTraceLoggerHandle([Buffer]) => Integer
GetTrusteeForm([pTrustee]) => Integer
GetTrusteeFormA([pTrustee]) => Integer
GetTrusteeFormW([pTrustee]) => Integer
GetTrusteeName([pTrustee]) => String
GetTrusteeNameA([pTrustee]) => String
GetTrusteeNameW([pTrustee]) => String
GetTrusteeType([pTrustee]) => Integer
GetTrusteeTypeA([pTrustee]) => Integer
GetTrusteeTypeW([pTrustee]) => Integer
GetUserName([lpBuffer, lpnSize]) => Integer
GetUserNameA([lpBuffer, lpnSize]) => Integer
GetUserNameW([lpBuffer, lpnSize]) => Integer
GetWindowsAccountDomainSid([pSid, ppDomainSid, cbSid]) => Integer
ImpersonateAnonymousToken([ThreadHandle]) => Integer
ImpersonateLoggedOnUser([hToken]) => Integer
ImpersonateNamedPipeClient([hNamedPipe]) => Integer
ImpersonateSelf([ImpersonationLevel]) => Integer
InitializeAcl([pAcl, nAclLength, dwAclRevision]) => Integer
InitializeSecurityDescriptor([pSecurityDescriptor, dwRevision]) => Integer
InitializeSid([Sid, pIdentifierAuthority, nSubAuthorityCount]) => Integer
InitiateShutdown([lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason]) => Integer
InitiateShutdownA([lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason]) => Integer
InitiateShutdownW([lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason]) => Integer
InitiateSystemShutdown([lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown]) => Integer
InitiateSystemShutdownA([lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown]) => Integer
InitiateSystemShutdownEx([lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason]) => Integer
InitiateSystemShutdownExA([lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason]) => Integer
InitiateSystemShutdownExW([lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason]) => Integer
InitiateSystemShutdownW([lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown]) => Integer
InstallApplication([pInstallInfo]) => Integer
IsTextUnicode([lpv, iSize, lpiResult]) => Integer
IsTokenRestricted([TokenHandle]) => Integer
IsValidAcl([pAcl]) => Integer
IsValidSecurityDescriptor([pSecurityDescriptor]) => Integer
IsValidSid([pSid]) => Integer
IsWellKnownSid([pSid, WellKnownSidType]) => Integer
LockServiceDatabase([hSCManager]) => Integer
LogonUser([lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken]) => Integer
LogonUserA([lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken]) => Integer
LogonUserEx([lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits]) => Integer
LogonUserExA([lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits]) => Integer
LogonUserExExW([lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, pTokenGroups, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits]) => Integer
LogonUserExW([lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken, ppLogonSid, ppProfileBuffer, pdwProfileLength, pQuotaLimits]) => Integer
LogonUserW([lpszUsername, lpszDomain, lpszPassword, dwLogonType, dwLogonProvider, phToken]) => Integer
LookupAccountName([lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse]) => Integer
LookupAccountNameA([lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse]) => Integer
LookupAccountNameW([lpSystemName, lpAccountName, Sid, cbSid, ReferencedDomainName, cchReferencedDomainName, peUse]) => Integer
LookupAccountSid([lpSystemName, lpSid, lpName, cchName, lpReferencedDomainName, cchReferencedDomainName, peUse]) => Integer
LookupAccountSidA([lpSystemName, lpSid, lpName, cchName, lpReferencedDomainName, cchReferencedDomainName, peUse]) => Integer
LookupAccountSidW([lpSystemName, lpSid, lpName, cchName, lpReferencedDomainName, cchReferencedDomainName, peUse]) => Integer
LookupPrivilegeDisplayName([lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId]) => Integer
LookupPrivilegeDisplayNameA([lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId]) => Integer
LookupPrivilegeDisplayNameW([lpSystemName, lpName, lpDisplayName, cchDisplayName, lpLanguageId]) => Integer
LookupPrivilegeName([lpSystemName, lpLuid, lpName, cchName]) => Integer
LookupPrivilegeNameA([lpSystemName, lpLuid, lpName, cchName]) => Integer
LookupPrivilegeNameW([lpSystemName, lpLuid, lpName, cchName]) => Integer
LookupPrivilegeValue([lpSystemName, lpName, lpLuid]) => Integer
LookupPrivilegeValueA([lpSystemName, lpName, lpLuid]) => Integer
LookupPrivilegeValueW([lpSystemName, lpName, lpLuid]) => Integer
LookupSecurityDescriptorParts([pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pSD]) => Integer
LookupSecurityDescriptorPartsA([pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pSD]) => Integer
LookupSecurityDescriptorPartsW([pOwner, pGroup, cCountOfAccessEntries, pListOfAccessEntries, cCountOfAuditEntries, pListOfAuditEntries, pSD]) => Integer
LsaAddAccountRights([PolicyHandle, AccountSid, UserRights, CountOfRights]) => Integer
LsaClose([ObjectHandle]) => Integer
LsaCreateTrustedDomainEx([PolicyHandle, TrustedDomainInformation, AuthenticationInformation, DesiredAccess, TrustedDomainHandle]) => Integer
LsaDeleteTrustedDomain([PolicyHandle, TrustedDomainSid]) => Integer
LsaEnumerateAccountRights([PolicyHandle, AccountSid, UserRights, CountOfRights]) => Integer
LsaEnumerateAccountsWithUserRight([PolicyHandle, UserRights, EnumerationBuffer, CountReturned]) => Integer
LsaEnumerateTrustedDomains([PolicyHandle, EnumerationContext, Buffer, PreferedMaximumLength, CountReturned]) => Integer
LsaEnumerateTrustedDomainsEx([PolicyHandle, EnumerationContext, Buffer, PreferredMaximumLength, CountReturned]) => Integer
LsaFreeMemory([Buffer]) => Integer
LsaLookupNames([PolicyHandle, Count, Names, ReferencedDomains, Sids]) => Integer
LsaLookupNames2([PolicyHandle, Flags, Count, Names, ReferencedDomains, Sids]) => Integer
LsaLookupPrivilegeValue([PolicyHandle, Name, Value]) => Integer
LsaLookupSids([PolicyHandle, Count, Sids, ReferencedDomains, Names]) => Integer
LsaNtStatusToWinError([Status]) => Integer
LsaOpenPolicy([SystemName, ObjectAttributes, DesiredAccess, PolicyHandle]) => Integer
LsaOpenTrustedDomainByName([PolicyHandle, TrustedDomainName, DesiredAccess, TrustedDomainHandle]) => Integer
LsaQueryDomainInformationPolicy([PolicyHandle, InformationClass, Buffer]) => Integer
LsaQueryForestTrustInformation([PolicyHandle, TrustedDomainName, ForestTrustInfo]) => Integer
LsaQueryInformationPolicy([PolicyHandle, InformationClass, Buffer]) => Integer
LsaQueryTrustedDomainInfo([PolicyHandle, TrustedDomainSid, InformationClass, Buffer]) => Integer
LsaQueryTrustedDomainInfoByName([PolicyHandle, TrustedDomainName, InformationClass, Buffer]) => Integer
LsaRemoveAccountRights([PolicyHandle, AccountSid, AllRights, UserRights, CountOfRights]) => Integer
LsaRetrievePrivateData([PolicyHandle, KeyName, PrivateData]) => Integer
LsaSetDomainInformationPolicy([PolicyHandle, InformationClass, Buffer]) => Integer
LsaSetForestTrustInformation([PolicyHandle, TrustedDomainName, ForestTrustInfo, CheckOnly, CollisionInfo]) => Integer
LsaSetInformationPolicy([PolicyHandle, InformationClass, Buffer]) => Integer
LsaSetTrustedDomainInfoByName([PolicyHandle, TrustedDomainName, InformationClass, Buffer]) => Integer
LsaSetTrustedDomainInformation([PolicyHandle, TrustedDomainSid, InformationClass, Buffer]) => Integer
LsaStorePrivateData([PolicyHandle, KeyName, PrivateData]) => Integer
MakeAbsoluteSD([pSelfRelativeSD, pAbsoluteSD, lpdwAbsoluteSDSize, pDacl, lpdwDaclSize, pSacl, lpdwSaclSize, pOwner, lpdwOwnerSize, pPrimaryGroup, lpdwPrimaryGroupSize]) => Integer
MakeSelfRelativeSD([pAbsoluteSD, pSelfRelativeSD, lpdwBufferLength]) => Integer
MapGenericMask([AccessMask, GenericMapping]) => void
MSChapSrvChangePassword([ServerName, UserName, LmOldPresent, LmOldOwfPassword, LmNewOwfPassword, NtOldOwfPassword, NtNewOwfPassword]) => Integer
MSChapSrvChangePassword2([ServerName, UserName, NewPasswordEncryptedWithOldNt, OldNtOwfPasswordEncryptedWithNewNt, LmPresent, NewPasswordEncryptedWithOldLm, OldLmOwfPasswordEncryptedWithNewLmOrNt]) => Integer
NotifyBootConfigStatus([BootAcceptable]) => Integer
NotifyChangeEventLog([hEventLog, hEvent]) => Integer
NotifyServiceStatusChange([hService, dwNotifyMask, pNotifyBuffer]) => Integer
NotifyServiceStatusChangeA([hService, dwNotifyMask, pNotifyBuffer]) => Integer
NotifyServiceStatusChangeW([hService, dwNotifyMask, pNotifyBuffer]) => Integer
ObjectCloseAuditAlarm([SubsystemName, HandleId, GenerateOnClose]) => Integer
ObjectCloseAuditAlarmA([SubsystemName, HandleId, GenerateOnClose]) => Integer
ObjectCloseAuditAlarmW([SubsystemName, HandleId, GenerateOnClose]) => Integer
ObjectDeleteAuditAlarm([SubsystemName, HandleId, GenerateOnClose]) => Integer
ObjectDeleteAuditAlarmA([SubsystemName, HandleId, GenerateOnClose]) => Integer
ObjectDeleteAuditAlarmW([SubsystemName, HandleId, GenerateOnClose]) => Integer
ObjectOpenAuditAlarm([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, AccessGranted, GenerateOnClose]) => Integer
ObjectOpenAuditAlarmA([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, AccessGranted, GenerateOnClose]) => Integer
ObjectOpenAuditAlarmW([SubsystemName, HandleId, ObjectTypeName, ObjectName, pSecurityDescriptor, ClientToken, DesiredAccess, GrantedAccess, Privileges, ObjectCreation, AccessGranted, GenerateOnClose]) => Integer
ObjectPrivilegeAuditAlarm([SubsystemName, HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted]) => Integer
ObjectPrivilegeAuditAlarmA([SubsystemName, HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted]) => Integer
ObjectPrivilegeAuditAlarmW([SubsystemName, HandleId, ClientToken, DesiredAccess, Privileges, AccessGranted]) => Integer
OpenBackupEventLog([lpUNCServerName, lpFileName]) => Integer
OpenBackupEventLogA([lpUNCServerName, lpFileName]) => Integer
OpenBackupEventLogW([lpUNCServerName, lpFileName]) => Integer
OpenEncryptedFileRaw([lpFileName, ulFlags, pvContext]) => Integer
OpenEncryptedFileRawA([lpFileName, ulFlags, pvContext]) => Integer
OpenEncryptedFileRawW([lpFileName, ulFlags, pvContext]) => Integer
OpenEventLog([lpUNCServerName, lpSourceName]) => Integer
OpenEventLogA([lpUNCServerName, lpSourceName]) => Integer
OpenEventLogW([lpUNCServerName, lpSourceName]) => Integer
OpenProcessToken([ProcessHandle, DesiredAccess, TokenHandle]) => Integer
OpenSCManager([lpMachineName, lpDatabaseName, dwDesiredAccess]) => Integer
OpenSCManagerA([lpMachineName, lpDatabaseName, dwDesiredAccess]) => Integer
OpenSCManagerW([lpMachineName, lpDatabaseName, dwDesiredAccess]) => Integer
OpenService([hSCManager, lpServiceName, dwDesiredAccess]) => Integer
OpenServiceA([hSCManager, lpServiceName, dwDesiredAccess]) => Integer
OpenServiceW([hSCManager, lpServiceName, dwDesiredAccess]) => Integer
OpenThreadToken([ThreadHandle, DesiredAccess, OpenAsSelf, TokenHandle]) => Integer
OpenThreadWaitChainSession([Flags, callback]) => Integer
PerfCreateInstance([hProvider, CounterSetGuid, szInstanceName, dwInstance]) => Integer
PerfDecrementULongCounterValue([hProvider, pInstance, CounterId, lValue]) => Integer
PerfDecrementULongLongCounterValue([hProvider, pInstance, CounterId, llValue]) => Integer
PerfDeleteInstance([hProvider, InstanceBlock]) => Integer
PerfIncrementULongCounterValue([hProvider, pInstance, CounterId, lValue]) => Integer
PerfIncrementULongLongCounterValue([hProvider, pInstance, CounterId, llValue]) => Integer
PerfQueryInstance([hProvider, CounterSetGuid, szInstance, dwInstance]) => Integer
PerfSetCounterRefValue([hProvider, pInstance, CounterId, lpAddr]) => Integer
PerfSetCounterSetInfo([hProvider, pTemplate, dwTemplateSize]) => Integer
PerfSetULongCounterValue([hProvider, pInstance, CounterId, lValue]) => Integer
PerfSetULongLongCounterValue([hProvider, pInstance, CounterId, llValue]) => Integer
PerfStartProvider([ProviderGuid, ControlCallback, phProvider]) => Integer
PerfStartProviderEx([ProviderGuid, ProviderContext, phProvider]) => Integer
PerfStopProvider([hProvider]) => Integer
PrivilegeCheck([ClientToken, RequiredPrivileges, pfResult]) => Integer
PrivilegedServiceAuditAlarm([SubsystemName, ServiceName, ClientToken, Privileges, AccessGranted]) => Integer
PrivilegedServiceAuditAlarmA([SubsystemName, ServiceName, ClientToken, Privileges, AccessGranted]) => Integer
PrivilegedServiceAuditAlarmW([SubsystemName, ServiceName, ClientToken, Privileges, AccessGranted]) => Integer
QueryRecoveryAgentsOnEncryptedFile([lpFileName, pRecoveryAgents]) => Integer
QuerySecurityAccessMask([SecurityInformation, DesiredAccess]) => void
QueryServiceConfig([hService, lpServiceConfig, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceConfig2([hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceConfig2A([hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceConfig2W([hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceConfigA([hService, lpServiceConfig, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceConfigW([hService, lpServiceConfig, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceLockStatus([hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceLockStatusA([hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceLockStatusW([hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceObjectSecurity([hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded]) => Integer
QueryServiceStatus([hService, lpServiceStatus]) => Integer
QueryServiceStatusEx([hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded]) => Integer
QueryTrace([SessionHandle, SessionName, Properties]) => Integer
QueryTraceA([SessionHandle, SessionName, Properties]) => Integer
QueryTraceW([SessionHandle, SessionName, Properties]) => Integer
QueryUsersOnEncryptedFile([lpFileName, pUsers]) => Integer
ReadEncryptedFileRaw([pfExportCallback, pvCallbackContext, pvContext]) => Integer
ReadEventLog([hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded]) => Integer
ReadEventLogA([hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded]) => Integer
ReadEventLogW([hEventLog, dwReadFlags, dwRecordOffset, lpBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded]) => Integer
RegCloseKey([hKey]) => Integer
RegConnectRegistry([lpMachineName, hKey, phkResult]) => Integer
RegConnectRegistryA([lpMachineName, hKey, phkResult]) => Integer
RegConnectRegistryW([lpMachineName, hKey, phkResult]) => Integer
RegCopyTree([hKeySrc, lpSubKey, hKeyDest]) => Integer
RegCopyTreeA([hKeySrc, lpSubKey, hKeyDest]) => Integer
RegCopyTreeW([hKeySrc, lpSubKey, hKeyDest]) => Integer
RegCreateKey([hKey, lpSubKey, phkResult]) => Integer
RegCreateKeyA([hKey, lpSubKey, phkResult]) => Integer
RegCreateKeyEx([hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition]) => Integer
RegCreateKeyExA([hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition]) => Integer
RegCreateKeyExW([hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition]) => Integer
RegCreateKeyTransacted([hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter]) => Integer
RegCreateKeyTransactedA([hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter]) => Integer
RegCreateKeyTransactedW([hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter]) => Integer
RegCreateKeyW([hKey, lpSubKey, phkResult]) => Integer
RegDeleteKey([hKey, lpSubKey]) => Integer
RegDeleteKeyA([hKey, lpSubKey]) => Integer
RegDeleteKeyEx([hKey, lpSubKey, samDesired, Reserved]) => Integer
RegDeleteKeyExA([hKey, lpSubKey, samDesired, Reserved]) => Integer
RegDeleteKeyExW([hKey, lpSubKey, samDesired, Reserved]) => Integer
RegDeleteKeyTransacted([hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter]) => Integer
RegDeleteKeyTransactedA([hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter]) => Integer
RegDeleteKeyTransactedW([hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter]) => Integer
RegDeleteKeyValue([hKey, lpSubKey, lpValueName]) => Integer
RegDeleteKeyValueA([hKey, lpSubKey, lpValueName]) => Integer
RegDeleteKeyValueW([hKey, lpSubKey, lpValueName]) => Integer
RegDeleteKeyW([hKey, lpSubKey]) => Integer
RegDeleteTree([hKey, lpSubKey]) => Integer
RegDeleteTreeA([hKey, lpSubKey]) => Integer
RegDeleteTreeW([hKey, lpSubKey]) => Integer
RegDeleteValue([hKey, lpValueName]) => Integer
RegDeleteValueA([hKey, lpValueName]) => Integer
RegDeleteValueW([hKey, lpValueName]) => Integer
RegDisablePredefinedCache() => Integer
RegDisablePredefinedCacheEx() => Integer
RegDisableReflectionKey([hBase]) => Integer
RegEnableReflectionKey([hBase]) => Integer
RegEnumKey([hKey, dwIndex, lpName, cchName]) => Integer
RegEnumKeyA([hKey, dwIndex, lpName, cchName]) => Integer
RegEnumKeyEx([hKey, dwIndex, lpName, lpcName, lpReserved, lpClass, lpcClass, lpftLastWriteTime]) => Integer
RegEnumKeyExA([hKey, dwIndex, lpName, lpcName, lpReserved, lpClass, lpcClass, lpftLastWriteTime]) => Integer
RegEnumKeyExW([hKey, dwIndex, lpName, lpcName, lpReserved, lpClass, lpcClass, lpftLastWriteTime]) => Integer
RegEnumKeyW([hKey, dwIndex, lpName, cchName]) => Integer
RegEnumValue([hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData]) => Integer
RegEnumValueA([hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData]) => Integer
RegEnumValueW([hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData]) => Integer
RegFlushKey([hKey]) => Integer
RegGetKeySecurity([hKey, SecurityInformation, pSecurityDescriptor, lpcbSecurityDescriptor]) => Integer
RegGetValue([hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData]) => Integer
RegGetValueA([hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData]) => Integer
RegGetValueW([hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData]) => Integer
RegisterEventSource([lpUNCServerName, lpSourceName]) => Integer
RegisterEventSourceA([lpUNCServerName, lpSourceName]) => Integer
RegisterEventSourceW([lpUNCServerName, lpSourceName]) => Integer
RegisterServiceCtrlHandler([lpServiceName, lpHandlerProc]) => Integer
RegisterServiceCtrlHandlerA([lpServiceName, lpHandlerProc]) => Integer
RegisterServiceCtrlHandlerEx([lpServiceName, lpHandlerProc, lpContext]) => Integer
RegisterServiceCtrlHandlerExA([lpServiceName, lpHandlerProc, lpContext]) => Integer
RegisterServiceCtrlHandlerExW([lpServiceName, lpHandlerProc, lpContext]) => Integer
RegisterServiceCtrlHandlerW([lpServiceName, lpHandlerProc]) => Integer
RegisterWaitChainCOMCallback([CallStateCallback, ActivationStateCallback]) => void
RegLoadAppKey([lpFile, phkResult, samDesired, dwOptions, Reserved]) => Integer
RegLoadAppKeyA([lpFile, phkResult, samDesired, dwOptions, Reserved]) => Integer
RegLoadAppKeyW([lpFile, phkResult, samDesired, dwOptions, Reserved]) => Integer
RegLoadKey([hKey, lpSubKey, lpFile]) => Integer
RegLoadKeyA([hKey, lpSubKey, lpFile]) => Integer
RegLoadKeyW([hKey, lpSubKey, lpFile]) => Integer
RegLoadMUIString([hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory]) => Integer
RegLoadMUIStringA([hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory]) => Integer
RegLoadMUIStringW([hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory]) => Integer
RegNotifyChangeKeyValue([hKey, bWatchSubtree, dwNotifyFilter, hEvent, fAsynchronous]) => Integer
RegOpenCurrentUser([samDesired, phkResult]) => Integer
RegOpenKey([hKey, lpSubKey, phkResult]) => Integer
RegOpenKeyA([hKey, lpSubKey, phkResult]) => Integer
RegOpenKeyEx([hKey, lpSubKey, ulOptions, samDesired, phkResult]) => Integer
RegOpenKeyExA([hKey, lpSubKey, ulOptions, samDesired, phkResult]) => Integer
RegOpenKeyExW([hKey, lpSubKey, ulOptions, samDesired, phkResult]) => Integer
RegOpenKeyTransacted([hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParameter]) => Integer
RegOpenKeyTransactedA([hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParameter]) => Integer
RegOpenKeyTransactedW([hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParameter]) => Integer
RegOpenKeyW([hKey, lpSubKey, phkResult]) => Integer
RegOpenUserClassesRoot([hToken, dwOptions, samDesired, phkResult]) => Integer
RegOverridePredefKey([hKey, hNewHKey]) => Integer
RegQueryInfoKey([hKey, lpClass, lpcClass, lpReserved, lpcSubKeys, lpcMaxSubKeyLen, lpcMaxClassLen, lpcValues, lpcMaxValueNameLen, lpcMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime]) => Integer
RegQueryInfoKeyA([hKey, lpClass, lpcClass, lpReserved, lpcSubKeys, lpcMaxSubKeyLen, lpcMaxClassLen, lpcValues, lpcMaxValueNameLen, lpcMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime]) => Integer
RegQueryInfoKeyW([hKey, lpClass, lpcClass, lpReserved, lpcSubKeys, lpcMaxSubKeyLen, lpcMaxClassLen, lpcValues, lpcMaxValueNameLen, lpcMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime]) => Integer
RegQueryMultipleValues([hKey, val_list, num_vals, lpValueBuf, ldwTotsize]) => Integer
RegQueryMultipleValuesA([hKey, val_list, num_vals, lpValueBuf, ldwTotsize]) => Integer
RegQueryMultipleValuesW([hKey, val_list, num_vals, lpValueBuf, ldwTotsize]) => Integer
RegQueryReflectionKey([hBase, bIsReflectionDisabled]) => Integer
RegQueryValue([hKey, lpSubKey, lpValue, lpcbValue]) => Integer
RegQueryValueA([hKey, lpSubKey, lpValue, lpcbValue]) => Integer
RegQueryValueEx([hKey, lpValueName, lpReserved, lpType, lpData, lpcbData]) => Integer
RegQueryValueExA([hKey, lpValueName, lpReserved, lpType, lpData, lpcbData]) => Integer
RegQueryValueExW([hKey, lpValueName, lpReserved, lpType, lpData, lpcbData]) => Integer
RegQueryValueW([hKey, lpSubKey, lpValue, lpcbValue]) => Integer
RegReplaceKey([hKey, lpSubKey, lpNewFile, lpOldFile]) => Integer
RegReplaceKeyA([hKey, lpSubKey, lpNewFile, lpOldFile]) => Integer
RegReplaceKeyW([hKey, lpSubKey, lpNewFile, lpOldFile]) => Integer
RegRestoreKey([hKey, lpFile, dwFlags]) => Integer
RegRestoreKeyA([hKey, lpFile, dwFlags]) => Integer
RegRestoreKeyW([hKey, lpFile, dwFlags]) => Integer
RegSaveKey([hKey, lpFile, lpSecurityAttributes]) => Integer
RegSaveKeyA([hKey, lpFile, lpSecurityAttributes]) => Integer
RegSaveKeyEx([hKey, lpFile, lpSecurityAttributes, Flags]) => Integer
RegSaveKeyExA([hKey, lpFile, lpSecurityAttributes, Flags]) => Integer
RegSaveKeyExW([hKey, lpFile, lpSecurityAttributes, Flags]) => Integer
RegSaveKeyW([hKey, lpFile, lpSecurityAttributes]) => Integer
RegSetKeySecurity([hKey, SecurityInformation, pSecurityDescriptor]) => Integer
RegSetKeyValue([hKey, lpSubKey, lpValueName, dwType, lpData, cbData]) => Integer
RegSetKeyValueA([hKey, lpSubKey, lpValueName, dwType, lpData, cbData]) => Integer
RegSetKeyValueW([hKey, lpSubKey, lpValueName, dwType, lpData, cbData]) => Integer
RegSetValue([hKey, lpSubKey, dwType, lpData, cbData]) => Integer
RegSetValueA([hKey, lpSubKey, dwType, lpData, cbData]) => Integer
RegSetValueEx([hKey, lpValueName, Reserved, dwType, lpData, cbData]) => Integer
RegSetValueExA([hKey, lpValueName, Reserved, dwType, lpData, cbData]) => Integer
RegSetValueExW([hKey, lpValueName, Reserved, dwType, lpData, cbData]) => Integer
RegSetValueW([hKey, lpSubKey, dwType, lpData, cbData]) => Integer
RegUnLoadKey([hKey, lpSubKey]) => Integer
RegUnLoadKeyA([hKey, lpSubKey]) => Integer
RegUnLoadKeyW([hKey, lpSubKey]) => Integer
RemoveUsersFromEncryptedFile([lpFileName, pHashes]) => Integer
ReportEvent([hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData]) => Integer
ReportEventA([hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData]) => Integer
ReportEventW([hEventLog, wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData]) => Integer
RevertToSelf() => Integer
SaferCloseLevel([hLevelHandle]) => Integer
SaferComputeTokenFromLevel([LevelHandle, InAccessToken, OutAccessToken, dwFlags, lpReserved]) => Integer
SaferCreateLevel([dwScopeId, dwLevelId, OpenFlags, pLevelHandle, lpReserved]) => Integer
SaferGetLevelInformation([LevelHandle, dwInfoType, lpQueryBuffer, dwInBufferSize, lpdwOutBufferSize]) => Integer
SaferGetPolicyInformation([dwScopeId, SaferPolicyInfoClass, InfoBufferSize, InfoBuffer, InfoBufferRetSize, lpReserved]) => Integer
SaferIdentifyLevel([dwNumProperties, pCodeProperties, pLevelHandle, lpReserved]) => Integer
SaferiIsExecutableFileType([szFullPath, bFromShellExecute]) => Integer
SaferRecordEventLogEntry([hLevel, szTargetPath, lpReserved]) => Integer
SaferSetLevelInformation([LevelHandle, dwInfoType, lpQueryBuffer, dwInBufferSize]) => Integer
SaferSetPolicyInformation([dwScopeId, SaferPolicyInfoClass, InfoBufferSize, InfoBuffer, lpReserved]) => Integer
SetAclInformation([pAcl, pAclInformation, nAclInformationLength, dwAclInformationClass]) => Integer
SetEntriesInAcl([cCountOfExplicitEntries, pListOfExplicitEntries, OldAcl, NewAcl]) => Integer
SetEntriesInAclA([cCountOfExplicitEntries, pListOfExplicitEntries, OldAcl, NewAcl]) => Integer
SetEntriesInAclW([cCountOfExplicitEntries, pListOfExplicitEntries, OldAcl, NewAcl]) => Integer
SetFileSecurity([lpFileName, SecurityInformation, pSecurityDescriptor]) => Integer
SetFileSecurityA([lpFileName, SecurityInformation, pSecurityDescriptor]) => Integer
SetFileSecurityW([lpFileName, SecurityInformation, pSecurityDescriptor]) => Integer
SetKernelObjectSecurity([Handle, SecurityInformation, SecurityDescriptor]) => Integer
SetNamedSecurityInfo([pObjectName, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl]) => Integer
SetNamedSecurityInfoA([pObjectName, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl]) => Integer
SetNamedSecurityInfoW([pObjectName, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl]) => Integer
SetPrivateObjectSecurity([SecurityInformation, ModificationDescriptor, ObjectsSecurityDescriptor, GenericMapping, Token]) => Integer
SetPrivateObjectSecurityEx([SecurityInformation, ModificationDescriptor, ObjectsSecurityDescriptor, AutoInheritFlags, GenericMapping, Token]) => Integer
SetSecurityAccessMask([SecurityInformation, DesiredAccess]) => void
SetSecurityDescriptorControl([pSecurityDescriptor, ControlBitsOfInterest, ControlBitsToSet]) => Integer
SetSecurityDescriptorDacl([pSecurityDescriptor, bDaclPresent, pDacl, bDaclDefaulted]) => Integer
SetSecurityDescriptorGroup([pSecurityDescriptor, pGroup, bGroupDefaulted]) => Integer
SetSecurityDescriptorOwner([pSecurityDescriptor, pOwner, bOwnerDefaulted]) => Integer
SetSecurityDescriptorRMControl([SecurityDescriptor, RMControl]) => Integer
SetSecurityDescriptorSacl([pSecurityDescriptor, bSaclPresent, pSacl, bSaclDefaulted]) => Integer
SetSecurityInfo([handle, ObjectType, SecurityInfo, psidOwner, psidGroup, pDacl, pSacl]) => Integer
SetServiceBits([hServiceStatus, dwServiceBits, bSetBitsOn, bUpdateImmediately]) => Integer
SetServiceObjectSecurity([hService, dwSecurityInformation, lpSecurityDescriptor]) => Integer
SetServiceStatus([hServiceStatus, lpServiceStatus]) => Integer
SetThreadToken([Thread, Token]) => Integer
SetTokenInformation([TokenHandle, TokenInformationClass, TokenInformation, TokenInformationLength]) => Integer
SetUserFileEncryptionKey([pEncryptionCertificate]) => Integer
StartService([hService, dwNumServiceArgs, lpServiceArgVectors]) => Integer
StartServiceA([hService, dwNumServiceArgs, lpServiceArgVectors]) => Integer
StartServiceCtrlDispatcher([lpServiceTable]) => Integer
StartServiceCtrlDispatcherA([lpServiceTable]) => Integer
StartServiceCtrlDispatcherW([lpServiceTable]) => Integer
StartServiceW([hService, dwNumServiceArgs, lpServiceArgVectors]) => Integer
TraceEvent([SessionHandle, EventTrace]) => Integer
TraceEventInstance([SessionHandle, EventTrace, pInstInfo, pParentInstInfo]) => Integer
TraceMessage([SessionHandle, MessageFlags, MessageGuid, MessageNumber,  *]) => Integer
TraceMessageVa([SessionHandle, MessageFlags, MessageGuid, MessageNumber, MessageArgList]) => Integer
TreeResetNamedSecurityInfo([pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, KeepExplicit, fnProgress, ProgressInvokeSetting, Args]) => Integer
TreeResetNamedSecurityInfoA([pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, KeepExplicit, fnProgress, ProgressInvokeSetting, Args]) => Integer
TreeResetNamedSecurityInfoW([pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, KeepExplicit, fnProgress, ProgressInvokeSetting, Args]) => Integer
TreeSetNamedSecurityInfo([pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, dwAction, fnProgress, ProgressInvokeSetting, Args]) => Integer
TreeSetNamedSecurityInfoA([pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, dwAction, fnProgress, ProgressInvokeSetting, Args]) => Integer
TreeSetNamedSecurityInfoW([pObjectName, ObjectType, SecurityInfo, pOwner, pGroup, pDacl, pSacl, dwAction, fnProgress, ProgressInvokeSetting, Args]) => Integer
UninstallApplication([ProductCode, dwStatus]) => Integer
UnlockServiceDatabase([ScLock]) => Integer
UnregisterTraceGuids([RegistrationHandle]) => Integer
UpdateTrace([SessionHandle, SessionName, Properties]) => Integer
UpdateTraceA([SessionHandle, SessionName, Properties]) => Integer
UpdateTraceW([SessionHandle, SessionName, Properties]) => Integer
WriteEncryptedFileRaw([pfImportCallback, pvCallbackContext, pvContext]) => Integer
_TrackMouseEvent([lpEventTrack]) => Integer
AddMRUStringW([hMRU, szString]) => Integer
CreateMappedBitmap([hInstance, idBitmap, wFlags, lpColorMap, iNumMaps]) => Integer
CreateMRUListW([lpmi]) => Integer
CreatePropertySheetPage([lppsp]) => Integer
CreatePropertySheetPageA([lppsp]) => Integer
CreatePropertySheetPageW([lppsp]) => Integer
CreateStatusWindow([style, lpszText, hwndParent, wID]) => Integer
CreateStatusWindowA([style, lpszText, hwndParent, wID]) => Integer
CreateStatusWindowW([style, lpszText, hwndParent, wID]) => Integer
CreateToolbarEx([hwnd, ws, wID, nBitmaps, hBMInst, wBMID, lpButtons, iNumButtons, dxButton, dyButton, dxBitmap, dyBitmap, uStructSize]) => Integer
CreateUpDownControl([dwStyle, x, y, cx, cy, hParent, nID, hInst, hBuddy, nUpper, nLower, nPos]) => Integer
DefSubclassProc([hWnd, uMsg, wParam, lParam]) => Integer
DestroyPropertySheetPage([hPSPage]) => Integer
DPA_Clone([hdpaSource, hdpaNew]) => Integer
DPA_Create([cpGrow]) => Integer
DPA_CreateEx([cpGrow, hheap]) => Integer
DPA_DeleteAllPtrs([pdpa]) => Integer
DPA_DeletePtr([pdpa, index]) => Integer
DPA_Destroy([pdpa]) => Integer
DPA_DestroyCallback([pdpa, pfnCB, pData]) => void
DPA_EnumCallback([pdpa, pfnCB, pData]) => void
DPA_GetPtr([pdpa, index]) => Integer
DPA_GetPtrIndex([hdpa, pvoid]) => Integer
DPA_GetSize([pdpa]) => Integer
DPA_Grow([hdpa, cp]) => Integer
DPA_InsertPtr([pdpa, index, p]) => Integer
DPA_LoadStream([ppdpa, pfn, pstm, pvInstData]) => Integer
DPA_Merge([hdpaDest, hdpaSrc, dwFlags, pfnCompare, pfnMerge, lParam]) => Integer
DPA_SaveStream([pdpa, pfn, pstm, pvInstData]) => Integer
DPA_Search([pdpa, pFind, iStart, pfnCmp, lParam, options]) => Integer
DPA_SetPtr([pdpa, index, p]) => Integer
DPA_Sort([pdpa, pfnCmp, lParam]) => Integer
DrawInsert([handParent, hLB, nItem]) => void
DrawShadowText([hdc, pszText, cch, pRect, dwFlags, crText, crShadow, ixOffset, iyOffset]) => Integer
DrawStatusText([hdc, lprc, pszText, uFlags]) => void
DrawStatusTextA([hdc, lprc, pszText, uFlags]) => void
DrawStatusTextW([hdc, lprc, pszText, uFlags]) => void
DSA_Clone([hdsa]) => Integer
DSA_Create([cbItem, cbItemGrow]) => Integer
DSA_DeleteAllItems([hdsa]) => Integer
DSA_DeleteItem([hdsa, nPosition]) => Integer
DSA_Destroy([pdsa]) => Integer
DSA_DestroyCallback([pdsa, pfnCB, pData]) => void
DSA_EnumCallback([hdsa, pfnCB, pData]) => void
DSA_GetItem([pdsa, index, pitem]) => Integer
DSA_GetItemPtr([pdsa, index]) => Integer
DSA_GetSize([hdsa]) => Integer
DSA_InsertItem([pdsa, index, pItem]) => Integer
DSA_SetItem([hdsa, index, pItem]) => Integer
DSA_Sort([pdsa, pfnCompare, lParam]) => Integer
EnumMRUListW([hMRU, nItem, lpData, uLen]) => Integer
FlatSB_EnableScrollBar([hwnd, wSBflags, wArrows]) => Integer
FlatSB_GetScrollInfo([hwnd, fnBar, lpsi]) => Integer
FlatSB_GetScrollPos([hwnd, code]) => Integer
FlatSB_GetScrollProp([hwnd, index, pValue]) => Integer
FlatSB_GetScrollRange([hwnd, code, lpMinPos, lpMaxPos]) => Integer
FlatSB_SetScrollInfo([hwnd, fnBar, lpsi, fRedraw]) => Integer
FlatSB_SetScrollPos([hwnd, code, nPos, fRedraw]) => Integer
FlatSB_SetScrollProp([hwnd, index, newValue, fRedraw]) => Integer
FlatSB_SetScrollRange([hwnd, code, nMinPos, nMaxPos, fRedraw]) => Integer
FlatSB_ShowScrollBar([hwnd, code, fShow]) => Integer
FreeMRUList([hMRU]) => Integer
GetEffectiveClientRect([hWnd, lprc, lpInfo]) => void
GetMUILanguage() => Integer
GetWindowSubclass([hWnd, pfnSubclass, uIdSubclass, pdwRefData]) => Integer
HIMAGELIST_QueryInterface([himl, riid, ppv]) => Integer
ImageList_Add([himl, hbmImage, hbmMask]) => Integer
ImageList_AddMasked([himl, hbmImage, crMask]) => Integer
ImageList_BeginDrag([himlTrack, iTrack, dxHotspot, dyHotspot]) => Integer
ImageList_CoCreateInstance([rclsid, punkOuter, riid, ppv]) => Integer
ImageList_Copy([himlDst, iDst, himlSrc, iSrc, uFlags]) => Integer
ImageList_Create([cx, cy, flags, cInitial, cGrow]) => Integer
ImageList_Destroy([himl]) => Integer
ImageList_DragEnter([hwndLock, x, y]) => Integer
ImageList_DragLeave([hwndLock]) => Integer
ImageList_DragMove([x, y]) => Integer
ImageList_DragShowNolock([fShow]) => Integer
ImageList_Draw([himl, i, hdcDst, x, y, fStyle]) => Integer
ImageList_DrawEx([himl, i, hdcDst, x, y, dx, dy, rgbBk, rgbFg, fStyle]) => Integer
ImageList_DrawIndirect([pimldp]) => Integer
ImageList_Duplicate([himl]) => Integer
ImageList_EndDrag() => Integer
ImageList_GetBkColor([himl]) => Integer
ImageList_GetDragImage([ppt, pptHotspot]) => Integer
ImageList_GetIcon([himl, i, flags]) => Integer
ImageList_GetIconSize([himl, cx, cy]) => Integer
ImageList_GetImageCount([himl]) => Integer
ImageList_GetImageInfo([himl, i, pImageInfo]) => Integer
ImageList_LoadImage([hi, lpbmp, cx, cGrow, crMask, uType, uFlags]) => Integer
ImageList_LoadImageA([hi, lpbmp, cx, cGrow, crMask, uType, uFlags]) => Integer
ImageList_LoadImageW([hi, lpbmp, cx, cGrow, crMask, uType, uFlags]) => Integer
ImageList_Merge([himl1, i1, himl2, i2, dx, dy]) => Integer
ImageList_Read([pstm]) => Integer
ImageList_ReadEx([dwFlags, pstm, riid, ppv]) => Integer
ImageList_Remove([himl, i]) => Integer
ImageList_Replace([himl, i, hbmImage, hbmMask]) => Integer
ImageList_ReplaceIcon([himl, i, hicon]) => Integer
ImageList_SetBkColor([himl, clrBk]) => Integer
ImageList_SetDragCursorImage([himlDrag, iDrag, dxHotspot, dyHotspot]) => Integer
ImageList_SetIconSize([himl, cx, cy]) => Integer
ImageList_SetImageCount([himl, uNewCount]) => Integer
ImageList_SetOverlayImage([himl, iImage, iOverlay]) => Integer
ImageList_Write([himl, pstm]) => Integer
ImageList_WriteEx([himl, dwFlags, pstm]) => Integer
InitCommonControls() => Integer
InitCommonControlsEx([lpInitCtrls]) => Integer
InitializeFlatSB([hwnd]) => Integer
InitMUILanguage([uiLang]) => void
LBItemFromPt([hLB, pt, bAutoScroll]) => Integer
LoadIconMetric([hinst, pszName, lims, phico]) => Integer
LoadIconWithScaleDown([hinst, pszName, cx, cy, phico]) => Integer
MakeDragList([hLB]) => Integer
MenuHelp([uMsg, wParam, lParam, hMainMenu, hInst, hwndStatus, lpwIDs]) => void
PropertySheet([lppsph]) => Integer
PropertySheetA([lppsph]) => Integer
PropertySheetW([lppsph]) => Integer
RemoveWindowSubclass([hWnd, pfnSubclass, uIdSubclass]) => Integer
SetWindowSubclass([hWnd, pfnSubclass, uIdSubclass, dwRefData]) => Integer
ShowHideMenuCtl([hWnd, uFlags, lpInfo]) => Integer
Str_SetPtr([ppszCurrent, pszNew]) => Integer
Str_SetPtrW([ppszCurrent, pszNew]) => Integer
TaskDialog([hWndParent, hInstance, pszWindowTitle, pszMainInstruction, pszContent, dwCommonButtons, pszIcon, pnButton]) => Integer
TaskDialogIndirect([pTaskConfig, pnButton, pnRadioButton, pfVerificationFlagChecked]) => Integer
UninitializeFlatSB([hwnd]) => Integer
ChooseColor([lpcc]) => Integer
ChooseColorA([lpcc]) => Integer
ChooseColorW([lpcc]) => Integer
ChooseFont([lpcf]) => Integer
ChooseFontA([lpcf]) => Integer
ChooseFontW([lpcf]) => Integer
CommDlgExtendedError() => Integer
FindText([lpfr]) => Integer
FindTextA([lpfr]) => Integer
FindTextW([lpfr]) => Integer
GetFileTitle([lpszFile, lpszTitle, cchSize]) => Integer
GetFileTitleA([lpszFile, lpszTitle, cchSize]) => Integer
GetFileTitleW([lpszFile, lpszTitle, cchSize]) => Integer
GetOpenFileName([lpofn]) => Integer
GetOpenFileNameA([lpofn]) => Integer
GetOpenFileNameW([lpofn]) => Integer
GetSaveFileName([lpofn]) => Integer
GetSaveFileNameA([lpofn]) => Integer
GetSaveFileNameW([lpofn]) => Integer
PageSetupDlg([lppsd]) => Integer
PageSetupDlgA([lppsd]) => Integer
PageSetupDlgW([lppsd]) => Integer
PrintDlg([lppd]) => Integer
PrintDlgA([lppd]) => Integer
PrintDlgEx([lppd]) => Integer
PrintDlgExA([lppd]) => Integer
PrintDlgExW([lppd]) => Integer
PrintDlgW([lppd]) => Integer
ReplaceText([lpfr]) => Integer
ReplaceTextA([lpfr]) => Integer
ReplaceTextW([lpfr]) => Integer
CertAddCertificateContextToStore([hCertStore, pCertContext, dwAddDisposition, ppStoreContext]) => Integer
CertAddCertificateLinkToStore([hCertStore, pCertContext, dwAddDisposition, ppStoreContext]) => Integer
CertAddCRLContextToStore([hCertStore, pCrlContext, dwAddDisposition, ppStoreContext]) => Integer
CertAddCRLLinkToStore([hCertStore, pCrlContext, dwAddDisposition, ppStoreContext]) => Integer
CertAddCTLContextToStore([hCertStore, pCtlContext, dwAddDisposition, ppStoreContext]) => Integer
CertAddCTLLinkToStore([hCertStore, pCtlContext, dwAddDisposition, ppStoreContext]) => Integer
CertAddEncodedCertificateToStore([hCertStore, dwCertEncodingType, pbCertEncoded, cbCertEncoded, dwAddDisposition, ppCertContext]) => Integer
CertAddEncodedCertificateToSystemStore([szCertStoreName, pbCertEncoded, cbCertEncoded]) => Integer
CertAddEncodedCertificateToSystemStoreA([szCertStoreName, pbCertEncoded, cbCertEncoded]) => Integer
CertAddEncodedCertificateToSystemStoreW([szCertStoreName, pbCertEncoded, cbCertEncoded]) => Integer
CertAddEncodedCRLToStore([hCertStore, dwCertEncodingType, pbCrlEncoded, cbCrlEncoded, dwAddDisposition, ppCrlContext]) => Integer
CertAddEncodedCTLToStore([hCertStore, dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded, dwAddDisposition, ppCtlContext]) => Integer
CertAddEnhancedKeyUsageIdentifier([pCertContext, pszUsageIdentifier]) => Integer
CertAddRefServerOcspResponse([hServerOcspResponse]) => void
CertAddRefServerOcspResponseContext([pServerOcspResponseContext]) => void
CertAddSerializedElementToStore([hCertStore, pbElement, cbElement, dwAddDisposition, dwFlags, dwContextTypeFlags, pdwContextType, ppvContext]) => Integer
CertAddStoreToCollection([hCollectionStore, hSiblingStore, dwUpdateFlag, dwPriority]) => Integer
CertAlgIdToOID([dwAlgId]) => String
CertCloseServerOcspResponse([hServerOcspResponse, dwFlags]) => void
CertCloseStore([hCertStore, dwFlags]) => Integer
CertCompareCertificate([dwCertEncodingType, pCertId1, pCertId2]) => Integer
CertCompareCertificateName([dwCertEncodingType, pCertName1, pCertName2]) => Integer
CertCompareIntegerBlob([pInt1, pInt2]) => Integer
CertComparePublicKeyInfo([dwCertEncodingType, pPublicKey1, pPublicKey2]) => Integer
CertControlStore([hCertStore, dwFlags, dwCtrlType, pvCtrlPara]) => Integer
CertCreateCertificateChainEngine([pConfig, phChainEngine]) => Integer
CertCreateCertificateContext([dwCertEncodingType, pbCertEncoded, cbCertEncoded]) => Integer
CertCreateContext([dwContextType, dwEncodingType, pbEncoded, cbEncoded, dwFlags, pCreatePara]) => Integer
CertCreateCRLContext([dwCertEncodingType, pbCrlEncoded, cbCrlEncoded]) => Integer
CertCreateCTLContext([dwMsgAndCertEncodingType, pbCtlEncoded, cbCtlEncoded]) => Integer
CertCreateCTLEntryFromCertificateContextProperties([pCertContext, cOptAttr, rgOptAttr, dwFlags, pvReserved, pCtlEntry, pcbCtlEntry]) => Integer
CertCreateSelfSignCertificate([hCryptProvOrNCryptKey, pSubjectIssuerBlob, dwFlags, pKeyProvInfo, pSignatureAlgorithm, pStartTime, pEndTime, pExtensions]) => Integer
CertDeleteCertificateFromStore([pCertContext]) => Integer
CertDeleteCRLFromStore([pCrlContext]) => Integer
CertDeleteCTLFromStore([pCtlContext]) => Integer
CertDuplicateCertificateChain([pChainContext]) => Integer
CertDuplicateCertificateContext([pCertContext]) => Integer
CertDuplicateCRLContext([pCrlContext]) => Integer
CertDuplicateCTLContext([pCtlContext]) => Integer
CertDuplicateStore([hCertStore]) => Integer
CertEnumCertificateContextProperties([pCertContext, dwPropId]) => Integer
CertEnumCertificatesInStore([hCertStore, pPrevCertContext]) => Integer
CertEnumCRLContextProperties([pCrlContext, dwPropId]) => Integer
CertEnumCRLsInStore([hCertStore, pPrevCrlContext]) => Integer
CertEnumCTLContextProperties([pCtlContext, dwPropId]) => Integer
CertEnumCTLsInStore([hCertStore, pPrevCtlContext]) => Integer
CertEnumPhysicalStore([pvSystemStore, dwFlags, pvArg, pfnEnum]) => Integer
CertEnumSubjectInSortedCTL([pCtlContext, ppvNextSubject, pSubjectIdentifier, pEncodedAttributes]) => Integer
CertEnumSystemStore([dwFlags, pvSystemStoreLocationPara, pvArg, pfnEnum]) => Integer
CertEnumSystemStoreLocation([dwFlags, pvArg, pfnEnum]) => Integer
CertFindAttribute([pszObjId, cAttr, rgAttr]) => Integer
CertFindCertificateInCRL([pCert, pCrlContext, dwFlags, pvReserved, ppCrlEntry]) => Integer
CertFindCertificateInStore([hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCertContext]) => Integer
CertFindChainInStore([hCertStore, dwCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevChainContext]) => Integer
CertFindCRLInStore([hCertStore, dwEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCrlContext]) => Integer
CertFindCTLInStore([hCertStore, dwMsgAndCertEncodingType, dwFindFlags, dwFindType, pvFindPara, pPrevCtlContext]) => Integer
CertFindExtension([pszObjId, cExtensions, rgExtensions]) => Integer
CertFindRDNAttr([pszObjId, pName]) => Integer
CertFindSubjectInCTL([dwEncodingType, dwSubjectType, pvSubject, pCtlContext, dwFlags]) => Integer
CertFindSubjectInSortedCTL([pSubjectIdentifier, pCtlContext, dwFlags, pvReserved, pEncodedAttributes]) => Integer
CertFreeCertificateChain([pChainContext]) => void
CertFreeCertificateChainEngine([hChainEngine]) => void
CertFreeCertificateChainList([prgpSelection]) => void
CertFreeCertificateContext([pCertContext]) => Integer
CertFreeCRLContext([pCrlContext]) => Integer
CertFreeCTLContext([pCtlContext]) => Integer
CertFreeServerOcspResponseContext([pServerOcspResponseContext]) => Integer
CertGetCertificateChain([hChainEngine, pCertContext, pTime, hAdditionalStore, pChainPara, dwFlags, pvReserved, ppChainContext]) => Integer
CertGetCertificateContextProperty([pCertContext, dwPropId, pvData, pcbData]) => Integer
CertGetCRLContextProperty([pCrlContext, dwPropId, pvData, pcbData]) => Integer
CertGetCRLFromStore([hCertStore, pIssuerContext, pPrevCrlContext, pdwFlags]) => Integer
CertGetCTLContextProperty([pCtlContext, dwPropId, pvData, pcbData]) => Integer
CertGetEnhancedKeyUsage([pCertContext, dwFlags, pUsage, pcbUsage]) => Integer
CertGetIntendedKeyUsage([dwCertEncodingType, pCertInfo, pbKeyUsage, cbKeyUsage]) => Integer
CertGetIssuerCertificateFromStore([hCertStore, pSubjectContext, pPrevIssuerContext, pdwFlags]) => Integer
CertGetNameString([pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString]) => Integer
CertGetNameStringA([pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString]) => Integer
CertGetNameStringW([pCertContext, dwType, dwFlags, pvTypePara, pszNameString, cchNameString]) => Integer
CertGetPublicKeyLength([dwCertEncodingType, pPublicKey]) => Integer
CertGetServerOcspResponseContext([hServerOcspResponse, dwFlags, pvReserved]) => Integer
CertGetStoreProperty([hCertStore, dwPropId, pvData, pcbData]) => Integer
CertGetSubjectCertificateFromStore([hCertStore, dwCertEncodingType, pCertId]) => Integer
CertGetValidUsages([cCerts, rghCerts, cNumOIDs, rghOIDs, pcbOIDs]) => Integer
CertIsRDNAttrsInCertificateName([dwCertEncodingType, dwFlags, pCertName, pRDN]) => Integer
CertIsValidCRLForCertificate([pCert, pCRL, dwFlags, pvReserved]) => Integer
CertNameToStr([dwCertEncodingType, pName, dwStrType, psz, csz]) => Integer
CertNameToStrA([dwCertEncodingType, pName, dwStrType, psz, csz]) => Integer
CertNameToStrW([dwCertEncodingType, pName, dwStrType, psz, csz]) => Integer
CertOIDToAlgId([pszObjId]) => Integer
CertOpenServerOcspResponse([pChainContext, dwFlags, pvReserved]) => Integer
CertOpenStore([lpszStoreProvider, dwMsgAndCertEncodingType, hCryptProv, dwFlags, pvPara]) => Integer
CertOpenSystemStore([hprov, szSubsystemProtocol]) => Integer
CertOpenSystemStoreA([hprov, szSubsystemProtocol]) => Integer
CertOpenSystemStoreW([hprov, szSubsystemProtocol]) => Integer
CertRDNValueToStr([dwValueType, pValue, psz, csz]) => Integer
CertRDNValueToStrA([dwValueType, pValue, psz, csz]) => Integer
CertRDNValueToStrW([dwValueType, pValue, psz, csz]) => Integer
CertRegisterPhysicalStore([pvSystemStore, dwFlags, pwszStoreName, pStoreInfo, pvReserved]) => Integer
CertRegisterSystemStore([pvSystemStore, dwFlags, pStoreInfo, pvReserved]) => Integer
CertRemoveEnhancedKeyUsageIdentifier([pCertContext, pszUsageIdentifier]) => Integer
CertRemoveStoreFromCollection([hCollectionStore, hSiblingStore]) => void
CertRetrieveLogoOrBiometricInfo([pCertContext, lpszLogoOrBiometricType, dwRetrievalFlags, dwTimeout, dwFlags, pvReserved, ppbData, pcbData, ppwszMimeType]) => Integer
CertSaveStore([hCertStore, dwMsgAndCertEncodingType, dwSaveAs, dwSaveTo, pvSaveToPara, dwFlags]) => Integer
CertSelectCertificateChains([pSelectionContext, dwFlags, pChainParameters, cCriteria, rgpCriteria, hStore, pcSelection, pprgpSelection]) => Integer
CertSerializeCertificateStoreElement([pCertContext, dwFlags, pbElement, pcbElement]) => Integer
CertSerializeCRLStoreElement([pCrlContext, dwFlags, pbElement, pcbElement]) => Integer
CertSerializeCTLStoreElement([pCtlContext, dwFlags, pbElement, pcbElement]) => Integer
CertSetCertificateContextPropertiesFromCTLEntry([pCertContext, pCtlEntry, dwFlags]) => Integer
CertSetCertificateContextProperty([pCertContext, dwPropId, dwFlags, pvData]) => Integer
CertSetCRLContextProperty([pCrlContext, dwPropId, dwFlags, pvData]) => Integer
CertSetCTLContextProperty([pCtlContext, dwPropId, dwFlags, pvData]) => Integer
CertSetEnhancedKeyUsage([pCertContext, pUsage]) => Integer
CertSetStoreProperty([hCertStore, dwPropId, dwFlags, pvData]) => Integer
CertStrToName([dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError]) => Integer
CertStrToNameA([dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError]) => Integer
CertStrToNameW([dwCertEncodingType, pszX500, dwStrType, pvReserved, pbEncoded, pcbEncoded, ppszError]) => Integer
CertUnregisterPhysicalStore([pvSystemStore, dwFlags, pwszStoreName]) => Integer
CertUnregisterSystemStore([pvSystemStore, dwFlags]) => Integer
CertVerifyCertificateChainPolicy([pszPolicyOID, pChainContext, pPolicyPara, pPolicyStatus]) => Integer
CertVerifyCRLRevocation([dwCertEncodingType, pCertId, cCrlInfo, rgpCrlInfo]) => Integer
CertVerifyCRLTimeValidity([pTimeToVerify, pCrlInfo]) => Integer
CertVerifyCTLUsage([dwEncodingType, dwSubjectType, pvSubject, pSubjectUsage, dwFlags, pVerifyUsagePara, pVerifyUsageStatus]) => Integer
CertVerifyRevocation([dwEncodingType, dwRevType, cContext, rgpvContext, dwFlags, pRevPara, pRevStatus]) => Integer
CertVerifySubjectCertificateContext([pSubject, pIssuer, pdwFlags]) => Integer
CertVerifyTimeValidity([pTimeToVerify, pCertInfo]) => Integer
CertVerifyValidityNesting([pSubjectInfo, pIssuerInfo]) => Integer
CryptAcquireCertificatePrivateKey([pCert, dwFlags, pvParameters, phCryptProvOrNCryptKey, pdwKeySpec, pfCallerFreeProvOrNCryptKey]) => Integer
CryptBinaryToString([pbBinary, cbBinary, dwFlags, pszString, pcchString]) => Integer
CryptBinaryToStringA([pbBinary, cbBinary, dwFlags, pszString, pcchString]) => Integer
CryptBinaryToStringW([pbBinary, cbBinary, dwFlags, pszString, pcchString]) => Integer
CryptCreateKeyIdentifierFromCSP([dwCertEncodingType, pszPubKeyOID, pPubKeyStruc, cbPubKeyStruc, dwFlags, pvReserved, pbHash, pcbHash]) => Integer
CryptDecodeMessage([dwMsgTypeFlags, pDecryptPara, pVerifyPara, dwSignerIndex, pbEncodedBlob, cbEncodedBlob, dwPrevInnerContentType, pdwMsgType, pdwInnerContentType, pbDecoded, pcbDecoded, ppXchgCert, ppSignerCert]) => Integer
CryptDecodeObject([dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pvStructInfo, pcbStructInfo]) => Integer
CryptDecodeObjectEx([dwCertEncodingType, lpszStructType, pbEncoded, cbEncoded, dwFlags, pDecodePara, pvStructInfo, pcbStructInfo]) => Integer
CryptDecryptAndVerifyMessageSignature([pDecryptPara, pVerifyPara, dwSignerIndex, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert, ppSignerCert]) => Integer
CryptDecryptMessage([pDecryptPara, pbEncryptedBlob, cbEncryptedBlob, pbDecrypted, pcbDecrypted, ppXchgCert]) => Integer
CryptEncodeObject([dwCertEncodingType, lpszStructType, pvStructInfo, pbEncoded, pcbEncoded]) => Integer
CryptEncodeObjectEx([dwCertEncodingType, lpszStructType, pvStructInfo, dwFlags, pEncodePara, pvEncoded, pcbEncoded]) => Integer
CryptEncryptMessage([pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeEncrypted, cbToBeEncrypted, pbEncryptedBlob, pcbEncryptedBlob]) => Integer
CryptEnumKeyIdentifierProperties([pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvArg, pfnEnum]) => Integer
CryptEnumOIDFunction([dwEncodingType, pszFuncName, pszOID, dwFlags, pvArg, pfnEnumOIDFunc]) => Integer
CryptEnumOIDInfo([dwGroupId, dwFlags, pvArg, pfnEnumOIDInfo]) => Integer
CryptExportPKCS8([hCryptProv, dwKeySpec, pszPrivateKeyObjId, dwFlags, pvAuxInfo, pbPrivateKeyBlob, pcbPrivateKeyBlob]) => Integer
CryptExportPublicKeyInfo([hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pInfo, pcbInfo]) => Integer
CryptExportPublicKeyInfoEx([hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo]) => Integer
CryptExportPublicKeyInfoFromBCryptKeyHandle([hBCryptKey, dwCertEncodingType, pszPublicKeyObjId, dwFlags, pvAuxInfo, pInfo, pcbInfo]) => Integer
CryptFindCertificateKeyProvInfo([pCert, dwFlags, pvReserved]) => Integer
CryptFindLocalizedName([pwszCryptName]) => String
CryptFindOIDInfo([dwKeyType, pvKey, dwGroupId]) => Integer
CryptFormatObject([dwCertEncodingType, dwFormatType, dwFormatStrType, pFormatStruct, lpszStructType, pbEncoded, cbEncoded, pbFormat, pcbFormat]) => Integer
CryptFreeOIDFunctionAddress([hFuncAddr, dwFlags]) => Integer
CryptGetDefaultOIDDllList([hFuncSet, dwEncodingType, pwszDllList, pcchDllList]) => Integer
CryptGetDefaultOIDFunctionAddress([hFuncSet, dwEncodingType, pwszDll, dwFlags, ppvFuncAddr, phFuncAddr]) => Integer
CryptGetKeyIdentifierProperty([pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData, pcbData]) => Integer
CryptGetMessageCertificates([dwMsgAndCertEncodingType, hCryptProv, dwFlags, pbSignedBlob, cbSignedBlob]) => Integer
CryptGetMessageSignerCount([dwMsgEncodingType, pbSignedBlob, cbSignedBlob]) => Integer
CryptGetOIDFunctionAddress([hFuncSet, dwEncodingType, pszOID, dwFlags, ppvFuncAddr, phFuncAddr]) => Integer
CryptGetOIDFunctionValue([dwEncodingType, pszFuncName, pszOID, pwszValueName, pdwValueType, pbValueData, pcbValueData]) => Integer
CryptHashCertificate([hCryptProv, Algid, dwFlags, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash]) => Integer
CryptHashCertificate2([pwszCNGHashAlgid, dwFlags, pvReserved, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash]) => Integer
CryptHashMessage([pHashPara, fDetachedHash, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbHashedBlob, pcbHashedBlob, pbComputedHash, pcbComputedHash]) => Integer
CryptHashPublicKeyInfo([hCryptProv, Algid, dwFlags, dwCertEncodingType, pInfo, pbComputedHash, pcbComputedHash]) => Integer
CryptHashToBeSigned([hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pbComputedHash, pcbComputedHash]) => Integer
CryptImportPKCS8([sPrivateKeyAndParams, dwFlags, phCryptProv, pvAuxInfo]) => Integer
CryptImportPublicKeyInfo([hCryptProv, dwCertEncodingType, pInfo, phKey]) => Integer
CryptImportPublicKeyInfoEx([hCryptProv, dwCertEncodingType, pInfo, aiKeyAlg, dwFlags, pvAuxInfo, phKey]) => Integer
CryptImportPublicKeyInfoEx2([dwCertEncodingType, pInfo, dwFlags, pvAuxInfo, phKey]) => Integer
CryptInitOIDFunctionSet([pszFuncName, dwFlags]) => Integer
CryptInstallDefaultContext([hCryptProv, dwDefaultType, pvDefaultPara, dwFlags, pvReserved, phDefaultContext]) => Integer
CryptInstallOIDFunctionAddress([hModule, dwEncodingType, pszFuncName, cFuncEntry, rgFuncEntry, dwFlags]) => Integer
CryptMemAlloc([cbSize]) => Integer
CryptMemFree([pv]) => void
CryptMemRealloc([pv, cbSize]) => Integer
CryptMsgCalculateEncodedLength([dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, cbData]) => Integer
CryptMsgClose([hCryptMsg]) => Integer
CryptMsgControl([hCryptMsg, dwFlags, dwCtrlType, pvCtrlPara]) => Integer
CryptMsgCountersign([hCryptMsg, dwIndex, cCountersigners, rgCountersigners]) => Integer
CryptMsgCountersignEncoded([dwEncodingType, pbSignerInfo, cbSignerInfo, cCountersigners, rgCountersigners, pbCountersignature, pcbCountersignature]) => Integer
CryptMsgDuplicate([hCryptMsg]) => Integer
CryptMsgEncodeAndSignCTL([dwMsgEncodingType, pCtlInfo, pSignInfo, dwFlags, pbEncoded, pcbEncoded]) => Integer
CryptMsgGetAndVerifySigner([hCryptMsg, cSignerStore, rghSignerStore, dwFlags, ppSigner, pdwSignerIndex]) => Integer
CryptMsgGetParam([hCryptMsg, dwParamType, dwIndex, pvData, pcbData]) => Integer
CryptMsgOpenToDecode([dwMsgEncodingType, dwFlags, dwMsgType, hCryptProv, pRecipientInfo, pStreamInfo]) => Integer
CryptMsgOpenToEncode([dwMsgEncodingType, dwFlags, dwMsgType, pvMsgEncodeInfo, pszInnerContentObjID, pStreamInfo]) => Integer
CryptMsgSignCTL([dwMsgEncodingType, pbCtlContent, cbCtlContent, pSignInfo, dwFlags, pbEncoded, pcbEncoded]) => Integer
CryptMsgUpdate([hCryptMsg, pbData, cbData, fFinal]) => Integer
CryptMsgVerifyCountersignatureEncoded([hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, pciCountersigner]) => Integer
CryptMsgVerifyCountersignatureEncodedEx([hCryptProv, dwEncodingType, pbSignerInfo, cbSignerInfo, pbSignerInfoCountersignature, cbSignerInfoCountersignature, dwSignerType, pvSigner, dwFlags, pvExtra]) => Integer
CryptProtectData([pDataIn, szDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut]) => Integer
CryptProtectMemory([pData, cbData, dwFlags]) => Integer
CryptQueryObject([dwObjectType, pvObject, dwExpectedContentTypeFlags, dwExpectedFormatTypeFlags, dwFlags, pdwMsgAndCertEncodingType, pdwContentType, pdwFormatType, phCertStore, phMsg, ppvContext]) => Integer
CryptRegisterDefaultOIDFunction([dwEncodingType, pszFuncName, dwIndex, pwszDll]) => Integer
CryptRegisterOIDFunction([dwEncodingType, pszFuncName, pszOID, pwszDll, pszOverrideFuncName]) => Integer
CryptRegisterOIDInfo([pInfo, dwFlags]) => Integer
CryptRetrieveTimeStamp([wszUrl, dwRetrievalFlags, dwTimeout, pszHashId, pPara, pbData, cbData, ppTsContext, ppTsSigner, phStore]) => Integer
CryptSetKeyIdentifierProperty([pKeyIdentifier, dwPropId, dwFlags, pwszComputerName, pvReserved, pvData]) => Integer
CryptSetOIDFunctionValue([dwEncodingType, pszFuncName, pszOID, pwszValueName, dwValueType, pbValueData, cbValueData]) => Integer
CryptSignAndEncodeCertificate([hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, lpszStructType, pvStructInfo, pSignatureAlgorithm, pvHashAuxInfo, pbEncoded, pcbEncoded]) => Integer
CryptSignAndEncryptMessage([pSignPara, pEncryptPara, cRecipientCert, rgpRecipientCert, pbToBeSignedAndEncrypted, cbToBeSignedAndEncrypted, pbSignedAndEncryptedBlob, pcbSignedAndEncryptedBlob]) => Integer
CryptSignCertificate([hCryptProvOrNCryptKey, dwKeySpec, dwCertEncodingType, pbEncodedToBeSigned, cbEncodedToBeSigned, pSignatureAlgorithm, pvHashAuxInfo, pbSignature, pcbSignature]) => Integer
CryptSignMessage([pSignPara, fDetachedSignature, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, pbSignedBlob, pcbSignedBlob]) => Integer
CryptSignMessageWithKey([pSignPara, pbToBeSigned, cToBeSigned, pbSignedBlob, pcbSignedBlob]) => Integer
CryptSIPAddProvider([psNewProv]) => Integer
CryptSIPCreateIndirectData([pSubjectInfo, pcbIndirectData, pIndirectData]) => Integer
CryptSIPGetSignedDataMsg([pSubjectInfo, pdwEncodingType, dwIndex, pcbSignedDataMsg, pbSignedDataMsg]) => Integer
CryptSIPLoad([pgSubject, dwFlags, pSipDispatch]) => Integer
CryptSIPPutSignedDataMsg([pSubjectInfo, dwEncodingType, pdwIndex, cbSignedDataMsg, pbSignedDataMsg]) => Integer
CryptSIPRemoveProvider([pgProv]) => Integer
CryptSIPRemoveSignedDataMsg([pSubjectInfo, dwIndex]) => Integer
CryptSIPRetrieveSubjectGuid([FileName, hFileIn, pgSubject]) => Integer
CryptSIPRetrieveSubjectGuidForCatalogFile([FileName, hFileIn, pgSubject]) => Integer
CryptSIPVerifyIndirectData([pSubjectInfo, pIndirectData]) => Integer
CryptStringToBinary([pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags]) => Integer
CryptStringToBinaryA([pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags]) => Integer
CryptStringToBinaryW([pszString, cchString, dwFlags, pbBinary, pcbBinary, pdwSkip, pdwFlags]) => Integer
CryptUninstallDefaultContext([hDefaultContext, dwFlags, pvReserved]) => Integer
CryptUnprotectData([pDataIn, ppszDataDescr, pOptionalEntropy, pvReserved, pPromptStruct, dwFlags, pDataOut]) => Integer
CryptUnprotectMemory([pData, cbData, dwFlags]) => Integer
CryptUnregisterDefaultOIDFunction([dwEncodingType, pszFuncName, pwszDll]) => Integer
CryptUnregisterOIDFunction([dwEncodingType, pszFuncName, pszOID]) => Integer
CryptUnregisterOIDInfo([pInfo]) => Integer
CryptUpdateProtectedState([pOldSid, pwszOldPassword, dwFlags, pdwSuccessCount, pdwFailureCount]) => Integer
CryptVerifyCertificateSignature([hCryptProv, dwCertEncodingType, pbEncoded, cbEncoded, pPublicKey]) => Integer
CryptVerifyCertificateSignatureEx([hCryptProv, dwCertEncodingType, dwSubjectType, pvSubject, dwIssuerType, pvIssuer, dwFlags, pvExtra]) => Integer
CryptVerifyDetachedMessageHash([pHashPara, pbDetachedHashBlob, cbDetachedHashBlob, cToBeHashed, rgpbToBeHashed, rgcbToBeHashed, pbComputedHash, pcbComputedHash]) => Integer
CryptVerifyDetachedMessageSignature([pVerifyPara, dwSignerIndex, pbDetachedSignBlob, cbDetachedSignBlob, cToBeSigned, rgpbToBeSigned, rgcbToBeSigned, ppSignerCert]) => Integer
CryptVerifyMessageHash([pHashPara, pbHashedBlob, cbHashedBlob, pbToBeHashed, pcbToBeHashed, pbComputedHash, pcbComputedHash]) => Integer
CryptVerifyMessageSignature([pVerifyPara, dwSignerIndex, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded, ppSignerCert]) => Integer
CryptVerifyMessageSignatureWithKey([pVerifyPara, pPublicKeyInfo, pbSignedBlob, cbSignedBlob, pbDecoded, pcbDecoded]) => Integer
CryptVerifyTimeStampSignature([pbTSContentInfo, cbTSContentInfo, pbData, cbData, hAdditionalStore, ppTsContext, ppTsSigner, phStore]) => Integer
PFXExportCertStore([hStore, pPFX, szPassword, dwFlags]) => Integer
PFXExportCertStoreEx([hStore, pPFX, szPassword, pvPara, dwFlags]) => Integer
PFXImportCertStore([pPFX, szPassword, dwFlags]) => Integer
PFXIsPFXBlob([pPFX]) => Integer
PFXVerifyPassword([pPFX, szPassword, dwFlags]) => Integer
AbortDoc([hdc]) => Integer
AbortPath([hdc]) => Integer
AddFontMemResourceEx([pbFont, cbFont, pdv, pcFonts]) => Integer
AddFontResource([lpszFilename]) => Integer
AddFontResourceA([lpszFilename]) => Integer
AddFontResourceEx([lpszFilename, fl, pdv]) => Integer
AddFontResourceExA([lpszFilename, fl, pdv]) => Integer
AddFontResourceExW([lpszFilename, fl, pdv]) => Integer
AddFontResourceW([lpszFilename]) => Integer
AngleArc([hdc, X, Y, dwRadius, eStartAngle, eSweepAngle]) => Integer
AnimatePalette([hpal, iStartIndex, cEntries, ppe]) => Integer
Arc([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nXStartArc, nYStartArc, nXEndArc, nYEndArc]) => Integer
ArcTo([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2]) => Integer
BeginPath([hdc]) => Integer
BitBlt([hdcDest, nXDest, nYDest, nWidth, nHeight, hdcSrc, nXSrc, nYSrc, dwRop]) => Integer
CancelDC([hdc]) => Integer
CheckColorsInGamut([hDC, lpRGBTriples, lpBuffer, nCount]) => Integer
ChoosePixelFormat([hdc, ppfd]) => Integer
Chord([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2]) => Integer
CloseEnhMetaFile([hdc]) => Integer
CloseFigure([hdc]) => Integer
CloseMetaFile([hdc]) => Integer
ColorCorrectPalette([hDC, hPalette, dwFirstEntry, dwNumOfEntries]) => Integer
ColorMatchToTarget([hDC, hdcTarget, uiAction]) => Integer
CombineRgn([hrgnDest, hrgnSrc1, hrgnSrc2, fnCombineMode]) => Integer
CombineTransform([lpxformResult, lpxform1, lpxform2]) => Integer
CopyEnhMetaFile([hemfSrc, lpszFile]) => Integer
CopyEnhMetaFileA([hemfSrc, lpszFile]) => Integer
CopyEnhMetaFileW([hemfSrc, lpszFile]) => Integer
CopyMetaFile([hmfSrc, lpszFile]) => Integer
CopyMetaFileA([hmfSrc, lpszFile]) => Integer
CopyMetaFileW([hmfSrc, lpszFile]) => Integer
CreateBitmap([nWidth, nHeight, cPlanes, cBitsPerPel, lpvBits]) => Integer
CreateBitmapIndirect([lpbm]) => Integer
CreateBrushIndirect([lplb]) => Integer
CreateColorSpace([lpLogColorSpace]) => Integer
CreateColorSpaceA([lpLogColorSpace]) => Integer
CreateColorSpaceW([lpLogColorSpace]) => Integer
CreateCompatibleBitmap([hdc, nWidth, nHeight]) => Integer
CreateCompatibleDC([hdc]) => Integer
CreateDC([lpszDriver, lpszDevice, lpszOutput, lpInitData]) => Integer
CreateDCA([lpszDriver, lpszDevice, lpszOutput, lpInitData]) => Integer
CreateDCW([lpszDriver, lpszDevice, lpszOutput, lpInitData]) => Integer
CreateDIBitmap([hdc, lpbmih, fdwInit, lpbInit, lpbmi, fuUsage]) => Integer
CreateDIBPatternBrush([hglbDIBPacked, fuColorSpec]) => Integer
CreateDIBPatternBrushPt([lpPackedDIB, iUsage]) => Integer
CreateDIBSection([hdc, pbmi, iUsage, ppvBits, hSection, dwOffset]) => Integer
CreateDiscardableBitmap([hdc, nWidth, nHeight]) => Integer
CreateEllipticRgn([nLeftRect, nTopRect, nRightRect, nBottomRect]) => Integer
CreateEllipticRgnIndirect([lprc]) => Integer
CreateEnhMetaFile([hdcRef, lpFilename, lpRect, lpDescription]) => Integer
CreateEnhMetaFileA([hdcRef, lpFilename, lpRect, lpDescription]) => Integer
CreateEnhMetaFileW([hdcRef, lpFilename, lpRect, lpDescription]) => Integer
CreateFont([nHeight, nWidth, nEscapement, nOrientation, fnWeight, fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision, fdwClipPrecision, fdwQuality, fdwPitchAndFamily, lpszFace]) => Integer
CreateFontA([nHeight, nWidth, nEscapement, nOrientation, fnWeight, fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision, fdwClipPrecision, fdwQuality, fdwPitchAndFamily, lpszFace]) => Integer
CreateFontIndirect([lplf]) => Integer
CreateFontIndirectA([lplf]) => Integer
CreateFontIndirectEx([penumlfex]) => Integer
CreateFontIndirectExA([penumlfex]) => Integer
CreateFontIndirectExW([penumlfex]) => Integer
CreateFontIndirectW([lplf]) => Integer
CreateFontW([nHeight, nWidth, nEscapement, nOrientation, fnWeight, fdwItalic, fdwUnderline, fdwStrikeOut, fdwCharSet, fdwOutputPrecision, fdwClipPrecision, fdwQuality, fdwPitchAndFamily, lpszFace]) => Integer
CreateHalftonePalette([hdc]) => Integer
CreateHatchBrush([fnStyle, clrref]) => Integer
CreateIC([lpszDriver, lpszDevice, lpszOutput, lpdvmInit]) => Integer
CreateICA([lpszDriver, lpszDevice, lpszOutput, lpdvmInit]) => Integer
CreateICW([lpszDriver, lpszDevice, lpszOutput, lpdvmInit]) => Integer
CreateMetaFile([lpszFile]) => Integer
CreateMetaFileA([lpszFile]) => Integer
CreateMetaFileW([lpszFile]) => Integer
CreatePalette([lplgpl]) => Integer
CreatePatternBrush([hbmp]) => Integer
CreatePen([fnPenStyle, nWidth, crColor]) => Integer
CreatePenIndirect([lplgpn]) => Integer
CreatePolygonRgn([lppt, cPoints, fnPolyFillMode]) => Integer
CreatePolyPolygonRgn([lppt, lpPolyCounts, nCount, fnPolyFillMode]) => Integer
CreateRectRgn([nLeftRect, nTopRect, nRightRect, nBottomRect]) => Integer
CreateRectRgnIndirect([lprc]) => Integer
CreateRoundRectRgn([nLeftRect, nTopRect, nRightRect, nBottomRect, nWidthEllipse, nHeightEllipse]) => Integer
CreateScalableFontResource([fdwHidden, lpszFontRes, lpszFontFile, lpszCurrentPath]) => Integer
CreateScalableFontResourceA([fdwHidden, lpszFontRes, lpszFontFile, lpszCurrentPath]) => Integer
CreateScalableFontResourceW([fdwHidden, lpszFontRes, lpszFontFile, lpszCurrentPath]) => Integer
CreateSolidBrush([crColor]) => Integer
DDCCIGetCapabilitiesString([hMonitor, pszString, dwLength]) => Integer
DDCCIGetCapabilitiesStringLength([hMonitor, pdwLength]) => Integer
DDCCIGetTimingReport([hMonitor, pmtr]) => Integer
DDCCIGetVCPFeature([hMonitor, dwVCPCode, pvct, pdwCurrentValue, pdwMaximumValue]) => Integer
DDCCISaveCurrentSettings([hMonitor]) => Integer
DDCCISetVCPFeature([hMonitor, dwVCPCode, dwNewValue]) => Integer
DeleteColorSpace([hColorSpace]) => Integer
DeleteDC([hdc]) => Integer
DeleteEnhMetaFile([hemf]) => Integer
DeleteMetaFile([hmf]) => Integer
DeleteObject([hObject]) => Integer
DescribePixelFormat([hdc, iPixelFormat, nBytes, ppfd]) => Integer
DestroyPhysicalMonitorInternal([hMonitor]) => Integer
DPtoLP([hdc, lpPoints, nCount]) => Integer
DrawEscape([hdc, nEscape, cbInput, lpszInData]) => Integer
Ellipse([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect]) => Integer
EnableEUDC([fEnableEUDC]) => Integer
EndDoc([hdc]) => Integer
EndPage([hdc]) => Integer
EndPath([hdc]) => Integer
EnumEnhMetaFile([hdc, hemf, lpEnhMetaFunc, lpData, lpRect]) => Integer
EnumFontFamilies([hdc, lpszFamily, lpEnumFontFamProc, lParam]) => Integer
EnumFontFamiliesA([hdc, lpszFamily, lpEnumFontFamProc, lParam]) => Integer
EnumFontFamiliesEx([hdc, lpLogfont, lpEnumFontFamExProc, lParam, dwFlags]) => Integer
EnumFontFamiliesExA([hdc, lpLogfont, lpEnumFontFamExProc, lParam, dwFlags]) => Integer
EnumFontFamiliesExW([hdc, lpLogfont, lpEnumFontFamExProc, lParam, dwFlags]) => Integer
EnumFontFamiliesW([hdc, lpszFamily, lpEnumFontFamProc, lParam]) => Integer
EnumFonts([hdc, lpFaceName, lpFontFunc, lParam]) => Integer
EnumFontsA([hdc, lpFaceName, lpFontFunc, lParam]) => Integer
EnumFontsW([hdc, lpFaceName, lpFontFunc, lParam]) => Integer
EnumICMProfiles([hDC, lpEnumICMProfilesFunc, lParam]) => Integer
EnumICMProfilesA([hDC, lpEnumICMProfilesFunc, lParam]) => Integer
EnumICMProfilesW([hDC, lpEnumICMProfilesFunc, lParam]) => Integer
EnumMetaFile([hdc, hmf, lpMetaFunc, lParam]) => Integer
EnumObjects([hdc, nObjectType, lpObjectFunc, lParam]) => Integer
EqualRgn([hSrcRgn1, hSrcRgn2]) => Integer
Escape([hdc, nEscape, cbInput, lpvInData, lpvOutData]) => Integer
ExcludeClipRect([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect]) => Integer
ExtCreatePen([dwPenStyle, dwWidth, lplb, dwStyleCount, lpStyle]) => Integer
ExtCreateRegion([lpXform, nCount, lpRgnData]) => Integer
ExtEscape([hdc, nEscape, cbInput, lpszInData, cbOutput, lpszOutData]) => Integer
ExtFloodFill([hdc, nXStart, nYStart, crColor, fuFillType]) => Integer
ExtSelectClipRgn([hdc, hrgn, fnMode]) => Integer
ExtTextOut([hdc, X, Y, fuOptions, lprc, lpString, cbCount, lpDx]) => Integer
ExtTextOutA([hdc, X, Y, fuOptions, lprc, lpString, cbCount, lpDx]) => Integer
ExtTextOutW([hdc, X, Y, fuOptions, lprc, lpString, cbCount, lpDx]) => Integer
FillPath([hdc]) => Integer
FillRgn([hdc, hrgn, hbr]) => Integer
FlattenPath([hdc]) => Integer
FloodFill([hdc, nXStart, nYStart, crFill]) => Integer
FrameRgn([hdc, hrgn, hbr, nWidth, nHeight]) => Integer
GdiAlphaBlend([hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, ftn]) => Integer
GdiComment([hdc, cbSize, lpData]) => Integer
GdiFlush() => Integer
GdiGetBatchLimit() => Integer
GdiGradientFill([hdc, pVertex, dwNumVertex, pMesh, dwNumMesh, dwMode]) => Integer
GdiSetBatchLimit([dwLimit]) => Integer
GdiTransparentBlt([hdcDest, xoriginDest, yoriginDest, wDest, hDest, hdcSrc, xoriginSrc, yoriginSrc, wSrc, hSrc, crTransparent]) => Integer
GetArcDirection([hdc]) => Integer
GetAspectRatioFilterEx([hdc, lpAspectRatio]) => Integer
GetBitmapBits([hbmp, cbBuffer, lpvBits]) => Integer
GetBitmapDimensionEx([hBitmap, lpDimension]) => Integer
GetBkColor([hdc]) => Integer
GetBkMode([hdc]) => Integer
GetBoundsRect([hdc, lprcBounds, flags]) => Integer
GetBrushOrgEx([hdc, lppt]) => Integer
GetCharABCWidths([hdc, uFirstChar, uLastChar, lpabc]) => Integer
GetCharABCWidthsA([hdc, uFirstChar, uLastChar, lpabc]) => Integer
GetCharABCWidthsFloat([hdc, iFirstChar, iLastChar, lpABCF]) => Integer
GetCharABCWidthsFloatA([hdc, iFirstChar, iLastChar, lpABCF]) => Integer
GetCharABCWidthsFloatW([hdc, iFirstChar, iLastChar, lpABCF]) => Integer
GetCharABCWidthsI([hdc, giFirst, cgi, pgi, lpabc]) => Integer
GetCharABCWidthsW([hdc, uFirstChar, uLastChar, lpabc]) => Integer
GetCharacterPlacement([hdc, lpString, nCount, nMaxExtent, lpResults, dwFlags]) => Integer
GetCharacterPlacementA([hdc, lpString, nCount, nMaxExtent, lpResults, dwFlags]) => Integer
GetCharacterPlacementW([hdc, lpString, nCount, nMaxExtent, lpResults, dwFlags]) => Integer
GetCharWidth([hdc, iFirstChar, iLastChar, lpBuffer]) => Integer
GetCharWidth32([hdc, iFirstChar, iLastChar, lpBuffer]) => Integer
GetCharWidth32A([hdc, iFirstChar, iLastChar, lpBuffer]) => Integer
GetCharWidth32W([hdc, iFirstChar, iLastChar, lpBuffer]) => Integer
GetCharWidthA([hdc, iFirstChar, iLastChar, lpBuffer]) => Integer
GetCharWidthFloat([hdc, iFirstChar, iLastChar, pxBuffer]) => Integer
GetCharWidthFloatA([hdc, iFirstChar, iLastChar, pxBuffer]) => Integer
GetCharWidthFloatW([hdc, iFirstChar, iLastChar, pxBuffer]) => Integer
GetCharWidthI([hdc, giFirst, cgi, pgi, lpBuffer]) => Integer
GetCharWidthW([hdc, iFirstChar, iLastChar, lpBuffer]) => Integer
GetClipBox([hdc, lprc]) => Integer
GetClipRgn([hdc, hrgn]) => Integer
GetColorAdjustment([hdc, lpca]) => Integer
GetColorSpace([hDC]) => Integer
GetCurrentObject([hdc, uObjectType]) => Integer
GetCurrentPositionEx([hdc, lpPoint]) => Integer
GetDCBrushColor([hdc]) => Integer
GetDCOrgEx([hdc, lpPoint]) => Integer
GetDCPenColor([hdc]) => Integer
GetDeviceCaps([hdc, nIndex]) => Integer
GetDeviceGammaRamp([hDC, lpRamp]) => Integer
GetDIBColorTable([hdc, uStartIndex, cEntries, pColors]) => Integer
GetDIBits([hdc, hbmp, uStartScan, cScanLines, lpvBits, lpbi, uUsage]) => Integer
GetEnhMetaFile([lpszMetaFile]) => Integer
GetEnhMetaFileA([lpszMetaFile]) => Integer
GetEnhMetaFileBits([hemf, cbBuffer, lpbBuffer]) => Integer
GetEnhMetaFileDescription([hemf, cchBuffer, lpszDescription]) => Integer
GetEnhMetaFileDescriptionA([hemf, cchBuffer, lpszDescription]) => Integer
GetEnhMetaFileDescriptionW([hemf, cchBuffer, lpszDescription]) => Integer
GetEnhMetaFileHeader([hemf, cbBuffer, lpemh]) => Integer
GetEnhMetaFilePaletteEntries([hemf, cEntries, lppe]) => Integer
GetEnhMetaFilePixelFormat([hemf, cbBuffer, ppfd]) => Integer
GetEnhMetaFileW([lpszMetaFile]) => Integer
GetFontData([hdc, dwTable, dwOffset, lpvBuffer, cbData]) => Integer
GetFontLanguageInfo([hdc]) => Integer
GetFontUnicodeRanges([hdc, lpgs]) => Integer
GetGlyphIndices([hdc, lpstr, c, pgi, fl]) => Integer
GetGlyphIndicesA([hdc, lpstr, c, pgi, fl]) => Integer
GetGlyphIndicesW([hdc, lpstr, c, pgi, fl]) => Integer
GetGlyphOutline([hdc, uChar, uFormat, lpgm, cbBuffer, lpvBuffer, lpmat2]) => Integer
GetGlyphOutlineA([hdc, uChar, uFormat, lpgm, cbBuffer, lpvBuffer, lpmat2]) => Integer
GetGlyphOutlineW([hdc, uChar, uFormat, lpgm, cbBuffer, lpvBuffer, lpmat2]) => Integer
GetGraphicsMode([hdc]) => Integer
GetICMProfile([hDC, lpcbName, lpszFilename]) => Integer
GetICMProfileA([hDC, lpcbName, lpszFilename]) => Integer
GetICMProfileW([hDC, lpcbName, lpszFilename]) => Integer
GetKerningPairs([hdc, nNumPairs, lpkrnpair]) => Integer
GetKerningPairsA([hdc, nNumPairs, lpkrnpair]) => Integer
GetKerningPairsW([hdc, nNumPairs, lpkrnpair]) => Integer
GetLayout([hdc]) => Integer
GetLogColorSpace([hColorSpace, lpBuffer, nSize]) => Integer
GetLogColorSpaceA([hColorSpace, lpBuffer, nSize]) => Integer
GetLogColorSpaceW([hColorSpace, lpBuffer, nSize]) => Integer
GetMapMode([hdc]) => Integer
GetMetaFileBitsEx([hmf, nSize, lpvData]) => Integer
GetMetaRgn([hdc, hrgn]) => Integer
GetMiterLimit([hdc, peLimit]) => Integer
GetNearestColor([hdc, crColor]) => Integer
GetNearestPaletteIndex([hpal, crColor]) => Integer
GetNumberOfPhysicalMonitors([pstrDeviceName, pdwNumberOfPhysicalMonitors]) => Integer
GetObject([hgdiobj, cbBuffer, lpvObject]) => Integer
GetObjectA([hgdiobj, cbBuffer, lpvObject]) => Integer
GetObjectType([h]) => Integer
GetObjectW([hgdiobj, cbBuffer, lpvObject]) => Integer
GetOutlineTextMetrics([hdc, cbData, lpOTM]) => Integer
GetOutlineTextMetricsA([hdc, cbData, lpOTM]) => Integer
GetOutlineTextMetricsW([hdc, cbData, lpOTM]) => Integer
GetPaletteEntries([hpal, iStartIndex, nEntries, lppe]) => Integer
GetPath([hdc, lpPoints, lpTypes, nSize]) => Integer
GetPhysicalMonitorDescription([hMonitor, dwPhysicalMonitorDescriptionSizeInChars, szPhysicalMonitorDescription]) => Integer
GetPhysicalMonitors([pstrDeviceName, dwPhysicalMonitorArraySize, pdwNumPhysicalMonitorHandlesInArray, phPhysicalMonitorArray]) => Integer
GetPixel([hdc, nXPos, nYPos]) => Integer
GetPixelFormat([hDC]) => Integer
GetPolyFillMode([hdc]) => Integer
GetRandomRgn([hdc, hrgn, iNum]) => Integer
GetRasterizerCaps([lprs, cb]) => Integer
GetRegionData([hRgn, dwCount, lpRgnData]) => Integer
GetRgnBox([hrgn, lprc]) => Integer
GetROP2([hdc]) => Integer
GetStockObject([fnObject]) => Integer
GetStretchBltMode([hdc]) => Integer
GetSystemPaletteEntries([hdc, iStartIndex, nEntries, lppe]) => Integer
GetSystemPaletteUse([hdc]) => Integer
GetTextAlign([hdc]) => Integer
GetTextCharacterExtra([hdc]) => Integer
GetTextCharset([hdc]) => Integer
GetTextCharsetInfo([hdc, lpSig, dwFlags]) => Integer
GetTextColor([hdc]) => Integer
GetTextExtentExPoint([hdc, lpszStr, cchString, nMaxExtent, lpnFit, alpDx, lpSize]) => Integer
GetTextExtentExPointA([hdc, lpszStr, cchString, nMaxExtent, lpnFit, alpDx, lpSize]) => Integer
GetTextExtentExPointI([hdc, pgiIn, cgi, nMaxExtent, lpnFit, alpDx, lpSize]) => Integer
GetTextExtentExPointW([hdc, lpszStr, cchString, nMaxExtent, lpnFit, alpDx, lpSize]) => Integer
GetTextExtentPoint([hdc, lpString, cbString, lpSize]) => Integer
GetTextExtentPoint32([hdc, lpString, c, lpSize]) => Integer
GetTextExtentPoint32A([hdc, lpString, c, lpSize]) => Integer
GetTextExtentPoint32W([hdc, lpString, c, lpSize]) => Integer
GetTextExtentPointA([hdc, lpString, cbString, lpSize]) => Integer
GetTextExtentPointI([hdc, pgiIn, cgi, lpSize]) => Integer
GetTextExtentPointW([hdc, lpString, cbString, lpSize]) => Integer
GetTextFace([hdc, nCount, lpFaceName]) => Integer
GetTextFaceA([hdc, nCount, lpFaceName]) => Integer
GetTextFaceW([hdc, nCount, lpFaceName]) => Integer
GetTextMetrics([hdc, lptm]) => Integer
GetTextMetricsA([hdc, lptm]) => Integer
GetTextMetricsW([hdc, lptm]) => Integer
GetViewportExtEx([hdc, lpSize]) => Integer
GetViewportOrgEx([hdc, lpPoint]) => Integer
GetWindowExtEx([hdc, lpSize]) => Integer
GetWindowOrgEx([hdc, lpPoint]) => Integer
GetWinMetaFileBits([hemf, cbBuffer, lpbBuffer, fnMapMode, hdcRef]) => Integer
GetWorldTransform([hdc, lpXform]) => Integer
IntersectClipRect([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect]) => Integer
InvertRgn([hdc, hrgn]) => Integer
LineDDA([nXStart, nYStart, nXEnd, nYEnd, lpLineFunc, lpData]) => Integer
LineTo([hdc, nXEnd, nYEnd]) => Integer
LPtoDP([hdc, lpPoints, nCount]) => Integer
MaskBlt([hdcDest, nXDest, nYDest, nWidth, nHeight, hdcSrc, nXSrc, nYSrc, hbmMask, xMask, yMask, dwRop]) => Integer
ModifyWorldTransform([hdc, lpXform, iMode]) => Integer
MoveToEx([hdc, X, Y, lpPoint]) => Integer
OffsetClipRgn([hdc, nXOffset, nYOffset]) => Integer
OffsetRgn([hrgn, nXOffset, nYOffset]) => Integer
OffsetViewportOrgEx([hdc, nXOffset, nYOffset, lpPoint]) => Integer
OffsetWindowOrgEx([hdc, nXOffset, nYOffset, lpPoint]) => Integer
PaintRgn([hdc, hrgn]) => Integer
PatBlt([hdc, nXLeft, nYLeft, nWidth, nHeight, dwRop]) => Integer
PathToRegion([hdc]) => Integer
Pie([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2]) => Integer
PlayEnhMetaFile([hdc, hemf, lpRect]) => Integer
PlayEnhMetaFileRecord([hdc, lpHandletable, lpEnhMetaRecord, nHandles]) => Integer
PlayMetaFile([hdc, hmf]) => Integer
PlayMetaFileRecord([hdc, lpHandletable, lpMetaRecord, nHandles]) => Integer
PlgBlt([hdcDest, lpPoint, hdcSrc, nXSrc, nYSrc, nWidth, nHeight, hbmMask, xMask, yMask]) => Integer
PolyBezier([hdc, lppt, cPoints]) => Integer
PolyBezierTo([hdc, lppt, cCount]) => Integer
PolyDraw([hdc, lppt, lpbTypes, cCount]) => Integer
Polygon([hdc, lpPoints, nCount]) => Integer
Polyline([hdc, lppt, cPoints]) => Integer
PolylineTo([hdc, lppt, cCount]) => Integer
PolyPolygon([hdc, lpPoints, lpPolyCounts, nCount]) => Integer
PolyPolyline([hdc, lppt, lpdwPolyPoints, cCount]) => Integer
PolyTextOut([hdc, pptxt, cStrings]) => Integer
PolyTextOutA([hdc, pptxt, cStrings]) => Integer
PolyTextOutW([hdc, pptxt, cStrings]) => Integer
PtInRegion([hrgn, X, Y]) => Integer
PtVisible([hdc, X, Y]) => Integer
RealizePalette([hdc]) => Integer
Rectangle([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect]) => Integer
RectInRegion([hrgn, lprc]) => Integer
RectVisible([hDC, lprc]) => Integer
RemoveFontMemResourceEx([fh]) => Integer
RemoveFontResource([lpFileName]) => Integer
RemoveFontResourceA([lpFileName]) => Integer
RemoveFontResourceEx([lpFileName, fl, pdv]) => Integer
RemoveFontResourceExA([lpFileName, fl, pdv]) => Integer
RemoveFontResourceExW([lpFileName, fl, pdv]) => Integer
RemoveFontResourceW([lpFileName]) => Integer
ResetDC([hdc, lpInitData]) => Integer
ResetDCA([hdc, lpInitData]) => Integer
ResetDCW([hdc, lpInitData]) => Integer
ResizePalette([hpal, nEntries]) => Integer
RestoreDC([hdc, nSavedDC]) => Integer
RoundRect([hdc, nLeftRect, nTopRect, nRightRect, nBottomRect, nWidth, nHeight]) => Integer
SaveDC([hdc]) => Integer
ScaleViewportExtEx([hdc, Xnum, Xdenom, Ynum, Ydenom, lpSize]) => Integer
ScaleWindowExtEx([hdc, Xnum, Xdenom, Ynum, Ydenom, lpSize]) => Integer
SelectClipPath([hdc, iMode]) => Integer
SelectClipRgn([hdc, hrgn]) => Integer
SelectObject([hdc, hgdiobj]) => Integer
SelectPalette([hdc, hpal, bForceBackground]) => Integer
SetAbortProc([hdc, lpAbortProc]) => Integer
SetArcDirection([hdc, ArcDirection]) => Integer
SetBitmapBits([hbmp, cBytes, lpBits]) => Integer
SetBitmapDimensionEx([hBitmap, nWidth, nHeight, lpSize]) => Integer
SetBkColor([hdc, crColor]) => Integer
SetBkMode([hdc, iBkMode]) => Integer
SetBoundsRect([hdc, lprcBounds, flags]) => Integer
SetBrushOrgEx([hdc, nXOrg, nYOrg, lppt]) => Integer
SetColorAdjustment([hdc, lpca]) => Integer
SetColorSpace([hDC, hColorSpace]) => Integer
SetDCBrushColor([hdc, crColor]) => Integer
SetDCPenColor([hdc, crColor]) => Integer
SetDeviceGammaRamp([hDC, lpRamp]) => Integer
SetDIBColorTable([hdc, uStartIndex, cEntries, pColors]) => Integer
SetDIBits([hdc, hbmp, uStartScan, cScanLines, lpvBits, lpbmi, fuColorUse]) => Integer
SetDIBitsToDevice([hdc, XDest, YDest, dwWidth, dwHeight, XSrc, YSrc, uStartScan, cScanLines, lpvBits, lpbmi, fuColorUse]) => Integer
SetEnhMetaFileBits([cbBuffer, lpData]) => Integer
SetGraphicsMode([hdc, iMode]) => Integer
SetICMMode([hDC, iEnableICM]) => Integer
SetICMProfile([hDC, lpFileName]) => Integer
SetICMProfileA([hDC, lpFileName]) => Integer
SetICMProfileW([hDC, lpFileName]) => Integer
SetLayout([hdc, dwLayout]) => Integer
SetMapMode([hdc, fnMapMode]) => Integer
SetMapperFlags([hdc, dwFlag]) => Integer
SetMetaFileBitsEx([nSize, lpData]) => Integer
SetMetaRgn([hdc]) => Integer
SetMiterLimit([hdc, eNewLimit, peOldLimit]) => Integer
SetPaletteEntries([hpal, iStart, cEntries, lppe]) => Integer
SetPixel([hdc, X, Y, crColor]) => Integer
SetPixelFormat([hdc, iPixelFormat, ppfd]) => Integer
SetPixelV([hdc, X, Y, crColor]) => Integer
SetPolyFillMode([hdc, iPolyFillMode]) => Integer
SetRectRgn([hrgn, nLeftRect, nTopRect, nRightRect, nBottomRect]) => Integer
SetROP2([hdc, fnDrawMode]) => Integer
SetStretchBltMode([hdc, iStretchMode]) => Integer
SetSystemPaletteUse([hdc, uUsage]) => Integer
SetTextAlign([hdc, fMode]) => Integer
SetTextCharacterExtra([hdc, nCharExtra]) => Integer
SetTextColor([hdc, crColor]) => Integer
SetTextJustification([hdc, nBreakExtra, nBreakCount]) => Integer
SetViewportExtEx([hdc, nXExtent, nYExtent, lpSize]) => Integer
SetViewportOrgEx([hdc, X, Y, lpPoint]) => Integer
SetWindowExtEx([hdc, nXExtent, nYExtent, lpSize]) => Integer
SetWindowOrgEx([hdc, X, Y, lpPoint]) => Integer
SetWinMetaFileBits([cbBuffer, lpbBuffer, hdcRef, lpmfp]) => Integer
SetWorldTransform([hdc, lpXform]) => Integer
StartDoc([hdc, lpdi]) => Integer
StartDocA([hdc, lpdi]) => Integer
StartDocW([hdc, lpdi]) => Integer
StartPage([hdc]) => Integer
StretchBlt([hdcDest, nXOriginDest, nYOriginDest, nWidthDest, nHeightDest, hdcSrc, nXOriginSrc, nYOriginSrc, nWidthSrc, nHeightSrc, dwRop]) => Integer
StretchDIBits([hdc, XDest, YDest, nDestWidth, nDestHeight, XSrc, YSrc, nSrcWidth, nSrcHeight, lpBits, lpBitsInfo, iUsage, dwRop]) => Integer
StrokeAndFillPath([hdc]) => Integer
StrokePath([hdc]) => Integer
SwapBuffers([hDC]) => Integer
TextOut([hdc, nXStart, nYStart, lpString, cchString]) => Integer
TextOutA([hdc, nXStart, nYStart, lpString, cchString]) => Integer
TextOutW([hdc, nXStart, nYStart, lpString, cchString]) => Integer
TranslateCharsetInfo([lpSrc, lpCs, dwFlags]) => Integer
UnrealizeObject([hgdiobj]) => Integer
UpdateColors([hdc]) => Integer
UpdateICMRegKey([dwReserved, lpszCMID, lpszFileName, nCommand]) => Integer
UpdateICMRegKeyA([dwReserved, lpszCMID, lpszFileName, nCommand]) => Integer
UpdateICMRegKeyW([dwReserved, lpszCMID, lpszFileName, nCommand]) => Integer
WidenPath([hdc]) => Integer
GdipAddPathArc([path, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipAddPathArcI([path, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipAddPathBezier([path, x1, y1, x2, y2, x3, y3, x4, y4]) => Integer
GdipAddPathBezierI([path, x1, y1, x2, y2, x3, y3, x4, y4]) => Integer
GdipAddPathBeziers([path, points, count]) => Integer
GdipAddPathBeziersI([path, points, count]) => Integer
GdipAddPathClosedCurve([path, points, count]) => Integer
GdipAddPathClosedCurve2([path, points, count, tension]) => Integer
GdipAddPathClosedCurve2I([path, points, count, tension]) => Integer
GdipAddPathClosedCurveI([path, points, count]) => Integer
GdipAddPathCurve([path, points, count]) => Integer
GdipAddPathCurve2([path, points, count, tension]) => Integer
GdipAddPathCurve2I([path, points, count, tension]) => Integer
GdipAddPathCurve3([path, points, count, offset, numberOfSegments, tension]) => Integer
GdipAddPathCurve3I([path, points, count, offset, numberOfSegments, tension]) => Integer
GdipAddPathCurveI([path, points, count]) => Integer
GdipAddPathEllipse([path, x, y, width, height]) => Integer
GdipAddPathEllipseI([path, x, y, width, height]) => Integer
GdipAddPathLine([path, x1, y1, x2, y2]) => Integer
GdipAddPathLine2([path, points, count]) => Integer
GdipAddPathLine2I([path, points, count]) => Integer
GdipAddPathLineI([path, x1, y1, x2, y2]) => Integer
GdipAddPathPath([path, addingPath, connect]) => Integer
GdipAddPathPie([path, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipAddPathPieI([path, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipAddPathPolygon([path, points, count]) => Integer
GdipAddPathPolygonI([path, points, count]) => Integer
GdipAddPathRectangle([path, x, y, width, height]) => Integer
GdipAddPathRectangleI([path, x, y, width, height]) => Integer
GdipAddPathRectangles([path, rects, count]) => Integer
GdipAddPathRectanglesI([path, rects, count]) => Integer
GdipAddPathString([path, string, length, family, style, emSize, layoutRect, format]) => Integer
GdipAddPathStringI([path, string, length, family, style, emSize, layoutRect, format]) => Integer
GdipAlloc([size]) => Integer
GdipBeginContainer([graphics, dstrect, srcrect, unit, state]) => Integer
GdipBeginContainer2([graphics, state]) => Integer
GdipBeginContainerI([graphics, dstrect, srcrect, unit, state]) => Integer
GdipBitmapGetPixel([bitmap, x, y, color]) => Integer
GdipBitmapLockBits([bitmap, rect, flags, format, lockedBitmapData]) => Integer
GdipBitmapSetPixel([bitmap, x, y, color]) => Integer
GdipBitmapSetResolution([bitmap, xdpi, ydpi]) => Integer
GdipBitmapUnlockBits([bitmap, lockedBitmapData]) => Integer
GdipClearPathMarkers([path]) => Integer
GdipCloneBitmapArea([x, y, width, height, format, srcBitmap, dstBitmap]) => Integer
GdipCloneBitmapAreaI([x, y, width, height, format, srcBitmap, dstBitmap]) => Integer
GdipCloneBrush([brush, cloneBrush]) => Integer
GdipCloneCustomLineCap([customCap, clonedCap]) => Integer
GdipCloneFont([font, cloneFont]) => Integer
GdipCloneFontFamily([FontFamily, clonedFontFamily]) => Integer
GdipCloneImage([image, cloneImage]) => Integer
GdipCloneImageAttributes([imageattr, cloneImageattr]) => Integer
GdipCloneMatrix([matrix, cloneMatrix]) => Integer
GdipClonePath([path, clonePath]) => Integer
GdipClonePen([pen, clonepen]) => Integer
GdipCloneRegion([region, cloneRegion]) => Integer
GdipCloneStringFormat([format, newFormat]) => Integer
GdipClosePathFigure([path]) => Integer
GdipClosePathFigures([path]) => Integer
GdipCombineRegionPath([region, path, combineMode]) => Integer
GdipCombineRegionRect([region, rect, combineMode]) => Integer
GdipCombineRegionRectI([region, rect, combineMode]) => Integer
GdipCombineRegionRegion([region, region2, combineMode]) => Integer
GdipComment([graphics, sizeData, data]) => Integer
GdipCreateAdjustableArrowCap([height, width, isFilled, cap]) => Integer
GdipCreateBitmapFromDirectDrawSurface([surface, bitmap]) => Integer
GdipCreateBitmapFromFile([filename, bitmap]) => Integer
GdipCreateBitmapFromFileICM([filename, bitmap]) => Integer
GdipCreateBitmapFromGdiDib([gdiBitmapInfo, gdiBitmapData, bitmap]) => Integer
GdipCreateBitmapFromGraphics([width, height, target, bitmap]) => Integer
GdipCreateBitmapFromHBITMAP([hbm, hpal, bitmap]) => Integer
GdipCreateBitmapFromHICON([hicon, bitmap]) => Integer
GdipCreateBitmapFromResource([hInstance, lpBitmapName, bitmap]) => Integer
GdipCreateBitmapFromScan0([width, height, stride, format, scan0, bitmap]) => Integer
GdipCreateBitmapFromStream([stream, bitmap]) => Integer
GdipCreateBitmapFromStreamICM([stream, bitmap]) => Integer
GdipCreateCachedBitmap([bitmap, graphics, cachedBitmap]) => Integer
GdipCreateCustomLineCap([fillPath, strokePath, baseCap, baseInset, customCap]) => Integer
GdipCreateFont([fontFamily, emSize, style, unit, font]) => Integer
GdipCreateFontFamilyFromName([name, fontCollection, FontFamily]) => Integer
GdipCreateFontFromDC([hdc, font]) => Integer
GdipCreateFontFromLogfont([hdc, logfont, font]) => Integer
GdipCreateFontFromLogfontA([hdc, logfont, font]) => Integer
GdipCreateFontFromLogfontW([hdc, logfont, font]) => Integer
GdipCreateFromHDC([hdc, graphics]) => Integer
GdipCreateFromHDC2([hdc, hDevice, graphics]) => Integer
GdipCreateFromHWND([hwnd, graphics]) => Integer
GdipCreateFromHWNDICM([hwnd, graphics]) => Integer
GdipCreateHalftonePalette() => Integer
GdipCreateHatchBrush([hatchstyle, forecol, backcol, brush]) => Integer
GdipCreateHBITMAPFromBitmap([bitmap, hbmReturn, background]) => Integer
GdipCreateHICONFromBitmap([bitmap, hbmReturn]) => Integer
GdipCreateImageAttributes([imageattr]) => Integer
GdipCreateLineBrush([point1, point2, color1, color2, wrapMode, lineGradient]) => Integer
GdipCreateLineBrushFromRect([rect, color1, color2, mode, wrapMode, lineGradient]) => Integer
GdipCreateLineBrushFromRectI([rect, color1, color2, mode, wrapMode, lineGradient]) => Integer
GdipCreateLineBrushFromRectWithAngle([rect, color1, color2, angle, isAngleScalable, wrapMode, lineGradient]) => Integer
GdipCreateLineBrushFromRectWithAngleI([rect, color1, color2, angle, isAngleScalable, wrapMode, lineGradient]) => Integer
GdipCreateLineBrushI([point1, point2, color1, color2, wrapMode, lineGradient]) => Integer
GdipCreateMatrix([matrix]) => Integer
GdipCreateMatrix2([m11, m12, m21, m22, dx, dy, matrix]) => Integer
GdipCreateMatrix3([rect, dstplg, matrix]) => Integer
GdipCreateMatrix3I([rect, dstplg, matrix]) => Integer
GdipCreateMetafileFromEmf([hEmf, deleteEmf, metafile]) => Integer
GdipCreateMetafileFromFile([file, metafile]) => Integer
GdipCreateMetafileFromStream([stream, metafile]) => Integer
GdipCreateMetafileFromWmf([hWmf, deleteWmf, wmfPlaceableFileHeader, metafile]) => Integer
GdipCreateMetafileFromWmfFile([file, wmfPlaceableFileHeader, metafile]) => Integer
GdipCreatePath([brushMode, path]) => Integer
GdipCreatePath2([GDIPGpPointF, GDIPBYTE, INT, GpFillMode, path]) => Integer
GdipCreatePath2I([GDIPGpPoint, GDIPBYTE, INT, GpFillMode, path]) => Integer
GdipCreatePathGradient([points, count, wrapMode, polyGradient]) => Integer
GdipCreatePathGradientFromPath([path, polyGradient]) => Integer
GdipCreatePathGradientI([points, count, wrapMode, polyGradient]) => Integer
GdipCreatePathIter([iterator, path]) => Integer
GdipCreatePen1([color, width, unit, pen]) => Integer
GdipCreatePen2([brush, width, unit, pen]) => Integer
GdipCreateRegion([region]) => Integer
GdipCreateRegionHrgn([hRgn, region]) => Integer
GdipCreateRegionPath([path, region]) => Integer
GdipCreateRegionRect([rect, region]) => Integer
GdipCreateRegionRectI([rect, region]) => Integer
GdipCreateRegionRgnData([regionData, size, region]) => Integer
GdipCreateSolidFill([color, brush]) => Integer
GdipCreateStreamOnFile([filename, access, stream]) => Integer
GdipCreateStringFormat([formatAttributes, language, format]) => Integer
GdipCreateTexture([image, wrapmode, texture]) => Integer
GdipCreateTexture2([image, wrapmode, x, y, width, height, texture]) => Integer
GdipCreateTexture2I([image, wrapmode, x, y, width, height, texture]) => Integer
GdipCreateTextureIA([image, imageAttributes, x, y, width, height, texture]) => Integer
GdipCreateTextureIAI([image, imageAttributes, x, y, width, height, texture]) => Integer
GdipDeleteBrush([brush]) => Integer
GdipDeleteCachedBitmap([cachedBitmap]) => Integer
GdipDeleteCustomLineCap([customCap]) => Integer
GdipDeleteFont([font]) => Integer
GdipDeleteFontFamily([FontFamily]) => Integer
GdipDeleteGraphics([graphics]) => Integer
GdipDeleteMatrix([matrix]) => Integer
GdipDeletePath([path]) => Integer
GdipDeletePathIter([iterator]) => Integer
GdipDeletePen([pen]) => Integer
GdipDeletePrivateFontCollection([fontCollection]) => Integer
GdipDeleteRegion([region]) => Integer
GdipDeleteStringFormat([format]) => Integer
GdipDisposeImage([image]) => Integer
GdipDisposeImageAttributes([imageattr]) => Integer
GdipDrawArc([graphics, pen, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipDrawArcI([graphics, pen, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipDrawBezier([graphics, pen, x1, y1, x2, y2, x3, y3, x4, y4]) => Integer
GdipDrawBezierI([graphics, pen, x1, y1, x2, y2, x3, y3, x4, y4]) => Integer
GdipDrawBeziers([graphics, pen, points, count]) => Integer
GdipDrawBeziersI([graphics, pen, points, count]) => Integer
GdipDrawCachedBitmap([graphics, cachedBitmap, x, y]) => Integer
GdipDrawClosedCurve([graphics, pen, points, count]) => Integer
GdipDrawClosedCurve2([graphics, pen, points, count, tension]) => Integer
GdipDrawClosedCurve2I([graphics, pen, points, count, tension]) => Integer
GdipDrawClosedCurveI([graphics, pen, points, count]) => Integer
GdipDrawCurve([graphics, pen, points, count]) => Integer
GdipDrawCurve2([graphics, pen, points, count, tension]) => Integer
GdipDrawCurve2I([graphics, pen, points, count, tension]) => Integer
GdipDrawCurve3([graphics, pen, points, count, offset, numberOfSegments, tension]) => Integer
GdipDrawCurve3I([graphics, pen, points, count, offset, numberOfSegments, tension]) => Integer
GdipDrawCurveI([graphics, pen, points, count]) => Integer
GdipDrawDriverString([graphics, text, length, font, brush, positions, flags, matrix]) => Integer
GdipDrawEllipse([graphics, pen, x, y, width, height]) => Integer
GdipDrawEllipseI([graphics, pen, x, y, width, height]) => Integer
GdipDrawImage([graphics, image, x, y]) => Integer
GdipDrawImageI([graphics, image, x, y]) => Integer
GdipDrawImagePointRect([graphics, image, x, y, srcx, srcy, srcwidth, srcheight, srcUnit]) => Integer
GdipDrawImagePointRectI([graphics, image, x, y, srcx, srcy, srcwidth, srcheight, srcUnit]) => Integer
GdipDrawImagePoints([graphics, image, dstpoints, count]) => Integer
GdipDrawImagePointsI([graphics, image, dstpoints, count]) => Integer
GdipDrawImagePointsRect([graphics, image, points, count, srcx, srcy, srcwidth, srcheight, srcUnit, imageAttributes, callback, callbackData]) => Integer
GdipDrawImagePointsRectI([graphics, image, points, count, srcx, srcy, srcwidth, srcheight, srcUnit, imageAttributes, callback, callbackData]) => Integer
GdipDrawImageRect([graphics, image, x, y, width, height]) => Integer
GdipDrawImageRectI([graphics, image, x, y, width, height]) => Integer
GdipDrawImageRectRect([graphics, image, dstx, dsty, dstwidth, dstheight, srcx, srcy, srcwidth, srcheight, srcUnit, imageAttributes, callback, callbackData]) => Integer
GdipDrawImageRectRectI([graphics, image, dstx, dsty, dstwidth, dstheight, srcx, srcy, srcwidth, srcheight, srcUnit, imageAttributes, callback, callbackData]) => Integer
GdipDrawLine([graphics, pen, x1, y1, x2, y2]) => Integer
GdipDrawLineI([graphics, pen, x1, y1, x2, y2]) => Integer
GdipDrawLines([graphics, pen, points, count]) => Integer
GdipDrawLinesI([graphics, pen, points, count]) => Integer
GdipDrawPath([graphics, pen, path]) => Integer
GdipDrawPie([graphics, pen, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipDrawPieI([graphics, pen, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipDrawPolygon([graphics, pen, points, count]) => Integer
GdipDrawPolygonI([graphics, pen, points, count]) => Integer
GdipDrawRectangle([graphics, pen, x, y, width, height]) => Integer
GdipDrawRectangleI([graphics, pen, x, y, width, height]) => Integer
GdipDrawRectangles([graphics, pen, rects, count]) => Integer
GdipDrawRectanglesI([graphics, pen, rects, count]) => Integer
GdipDrawString([graphics, string, length, font, layoutRect, stringFormat, brush]) => Integer
GdipEmfToWmfBits([hemf, cbData16, pData16, iMapMode, eFlags]) => Integer
GdipEndContainer([graphics, state]) => Integer
GdipEnumerateMetafileDestPoint([graphics, metafile, destPoint, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileDestPointI([graphics, metafile, destPoint, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileDestPoints([graphics, metafile, destPoints, count, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileDestPointsI([graphics, metafile, destPoints, count, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileDestRect([graphics, metafile, destRect, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileDestRectI([graphics, metafile, destRect, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileSrcRectDestPoint([graphics, metafile, destPoint, srcRect, srcUnit, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileSrcRectDestPointI([graphics, metafile, destPoint, srcRect, srcUnit, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileSrcRectDestPoints([graphics, metafile, destPoints, count, srcRect, srcUnit, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileSrcRectDestPointsI([graphics, metafile, destPoints, count, srcRect, srcUnit, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileSrcRectDestRect([graphics, metafile, destRect, srcRect, srcUnit, callback, callbackData, imageAttributes]) => Integer
GdipEnumerateMetafileSrcRectDestRectI([graphics, metafile, destRect, srcRect, srcUnit, callback, callbackData, imageAttributes]) => Integer
GdipFillClosedCurve([graphics, brush, points, count]) => Integer
GdipFillClosedCurve2([graphics, brush, points, count, tension, fillMode]) => Integer
GdipFillClosedCurve2I([graphics, brush, points, count, tension, fillMode]) => Integer
GdipFillClosedCurveI([graphics, brush, points, count]) => Integer
GdipFillEllipse([graphics, brush, x, y, width, height]) => Integer
GdipFillEllipseI([graphics, brush, x, y, width, height]) => Integer
GdipFillPath([graphics, brush, path]) => Integer
GdipFillPie([graphics, brush, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipFillPieI([graphics, brush, x, y, width, height, startAngle, sweepAngle]) => Integer
GdipFillPolygon([graphics, brush, points, count, fillMode]) => Integer
GdipFillPolygon2([graphics, brush, points, count]) => Integer
GdipFillPolygon2I([graphics, brush, points, count]) => Integer
GdipFillPolygonI([graphics, brush, points, count, fillMode]) => Integer
GdipFillRectangle([graphics, brush, x, y, width, height]) => Integer
GdipFillRectangleI([graphics, brush, x, y, width, height]) => Integer
GdipFillRectangles([graphics, brush, rects, count]) => Integer
GdipFillRectanglesI([graphics, brush, rects, count]) => Integer
GdipFillRegion([graphics, brush, region]) => Integer
GdipFlattenPath([path, matrix, flatness]) => Integer
GdipFlush([graphics, intention]) => Integer
GdipFree([ptr]) => void
GdipGetAdjustableArrowCapFillState([cap, fillState]) => Integer
GdipGetAdjustableArrowCapHeight([cap, height]) => Integer
GdipGetAdjustableArrowCapMiddleInset([cap, middleInset]) => Integer
GdipGetAdjustableArrowCapWidth([cap, width]) => Integer
GdipGetAllPropertyItems([image, totalBufferSize, numProperties, allItems]) => Integer
GdipGetBrushType([brush, type]) => Integer
GdipGetCellAscent([family, style, CellAscent]) => Integer
GdipGetCellDescent([family, style, CellDescent]) => Integer
GdipGetClip([graphics, region]) => Integer
GdipGetClipBounds([graphics, rect]) => Integer
GdipGetClipBoundsI([graphics, rect]) => Integer
GdipGetCompositingMode([graphics, compositingMode]) => Integer
GdipGetCompositingQuality([graphics, compositingQuality]) => Integer
GdipGetCustomLineCapBaseCap([customCap, baseCap]) => Integer
GdipGetCustomLineCapBaseInset([customCap, inset]) => Integer
GdipGetCustomLineCapStrokeCaps([customCap, startCap, endCap]) => Integer
GdipGetCustomLineCapStrokeJoin([customCap, lineJoin]) => Integer
GdipGetCustomLineCapType([customCap, capType]) => Integer
GdipGetCustomLineCapWidthScale([customCap, widthScale]) => Integer
GdipGetDC([graphics, hdc]) => Integer
GdipGetDpiX([graphics, dpi]) => Integer
GdipGetDpiY([graphics, dpi]) => Integer
GdipGetEmHeight([family, style, EmHeight]) => Integer
GdipGetEncoderParameterList([image, clsidEncoder, size, buffer]) => Integer
GdipGetEncoderParameterListSize([image, clsidEncoder, size]) => Integer
GdipGetFamily([font, family]) => Integer
GdipGetFamilyName([family, name, language]) => Integer
GdipGetFontCollectionFamilyCount([fontCollection, numFound]) => Integer
GdipGetFontCollectionFamilyList([fontCollection, numSought, gpfamilies, numFound]) => Integer
GdipGetFontHeight([font, graphics, height]) => Integer
GdipGetFontHeightGivenDPI([font, dpi, height]) => Integer
GdipGetFontSize([font, size]) => Integer
GdipGetFontStyle([font, style]) => Integer
GdipGetFontUnit([font, unit]) => Integer
GdipGetGenericFontFamilyMonospace([nativeFamily]) => Integer
GdipGetGenericFontFamilySansSerif([nativeFamily]) => Integer
GdipGetGenericFontFamilySerif([nativeFamily]) => Integer
GdipGetHatchBackgroundColor([brush, backcol]) => Integer
GdipGetHatchForegroundColor([brush, forecol]) => Integer
GdipGetHatchStyle([brush, hatchstyle]) => Integer
GdipGetHemfFromMetafile([metafile, hEmf]) => Integer
GdipGetImageAttributesAdjustedPalette([imageAttr, colorPalette, colorAdjustType]) => Integer
GdipGetImageBounds([image, srcRect, srcUnit]) => Integer
GdipGetImageDecoders([numDecoders, size, decoders]) => Integer
GdipGetImageDecodersSize([numDecoders, size]) => Integer
GdipGetImageDimension([image, width, height]) => Integer
GdipGetImageEncoders([numEncoders, size, encoders]) => Integer
GdipGetImageEncodersSize([numEncoders, size]) => Integer
GdipGetImageFlags([image, flags]) => Integer
GdipGetImageGraphicsContext([image, graphics]) => Integer
GdipGetImageHeight([image, height]) => Integer
GdipGetImageHorizontalResolution([image, resolution]) => Integer
GdipGetImagePalette([image, palette, size]) => Integer
GdipGetImagePaletteSize([image, size]) => Integer
GdipGetImagePixelFormat([image, format]) => Integer
GdipGetImageRawFormat([image, format]) => Integer
GdipGetImageThumbnail([image, thumbWidth, thumbHeight, thumbImage, callback, callbackData]) => Integer
GdipGetImageType([image, type]) => Integer
GdipGetImageVerticalResolution([image, resolution]) => Integer
GdipGetImageWidth([image, width]) => Integer
GdipGetInterpolationMode([graphics, interpolationMode]) => Integer
GdipGetLineBlend([brush, blend, positions, count]) => Integer
GdipGetLineBlendCount([brush, count]) => Integer
GdipGetLineColors([brush, colors]) => Integer
GdipGetLineGammaCorrection([brush, useGammaCorrection]) => Integer
GdipGetLinePresetBlend([brush, blend, positions, count]) => Integer
GdipGetLinePresetBlendCount([brush, count]) => Integer
GdipGetLineRect([brush, rect]) => Integer
GdipGetLineRectI([brush, rect]) => Integer
GdipGetLineSpacing([family, style, LineSpacing]) => Integer
GdipGetLineTransform([brush, matrix]) => Integer
GdipGetLineWrapMode([brush, wrapmode]) => Integer
GdipGetLogFont([font, graphics, logfontA]) => Integer
GdipGetLogFontA([font, graphics, logfontA]) => Integer
GdipGetLogFontW([font, graphics, logfontW]) => Integer
GdipGetMatrixElements([matrix, matrixOut]) => Integer
GdipGetMetafileDownLevelRasterizationLimit([metafile, metafileRasterizationLimitDpi]) => Integer
GdipGetMetafileHeaderFromEmf([hEmf, header]) => Integer
GdipGetMetafileHeaderFromFile([filename, header]) => Integer
GdipGetMetafileHeaderFromMetafile([metafile, header]) => Integer
GdipGetMetafileHeaderFromStream([stream, header]) => Integer
GdipGetMetafileHeaderFromWmf([hWmf, wmfPlaceableFileHeader, header]) => Integer
GdipGetNearestColor([graphics, argb]) => Integer
GdipGetPageScale([graphics, scale]) => Integer
GdipGetPageUnit([graphics, unit]) => Integer
GdipGetPathData([path, pathData]) => Integer
GdipGetPathFillMode([path, fillmode]) => Integer
GdipGetPathGradientBlend([brush, blend, positions, count]) => Integer
GdipGetPathGradientBlendCount([brush, count]) => Integer
GdipGetPathGradientCenterColor([brush, colors]) => Integer
GdipGetPathGradientCenterPoint([brush, points]) => Integer
GdipGetPathGradientCenterPointI([brush, points]) => Integer
GdipGetPathGradientFocusScales([brush, xScale, yScale]) => Integer
GdipGetPathGradientGammaCorrection([brush, useGammaCorrection]) => Integer
GdipGetPathGradientPath([brush, path]) => Integer
GdipGetPathGradientPointCount([brush, count]) => Integer
GdipGetPathGradientPresetBlend([brush, blend, positions, count]) => Integer
GdipGetPathGradientPresetBlendCount([brush, count]) => Integer
GdipGetPathGradientRect([brush, rect]) => Integer
GdipGetPathGradientRectI([brush, rect]) => Integer
GdipGetPathGradientSurroundColorCount([brush, count]) => Integer
GdipGetPathGradientSurroundColorsWithCount([brush, color, count]) => Integer
GdipGetPathGradientTransform([brush, matrix]) => Integer
GdipGetPathGradientWrapMode([brush, wrapmode]) => Integer
GdipGetPathLastPoint([path, lastPoint]) => Integer
GdipGetPathPoints([GpPath, points, count]) => Integer
GdipGetPathPointsI([GpPath, points, count]) => Integer
GdipGetPathTypes([path, types, count]) => Integer
GdipGetPathWorldBounds([path, bounds, matrix, pen]) => Integer
GdipGetPathWorldBoundsI([path, bounds, matrix, pen]) => Integer
GdipGetPenBrushFill([pen, brush]) => Integer
GdipGetPenColor([pen, argb]) => Integer
GdipGetPenCompoundArray([pen, dash, count]) => Integer
GdipGetPenCompoundCount([pen, count]) => Integer
GdipGetPenCustomEndCap([pen, customCap]) => Integer
GdipGetPenCustomStartCap([pen, customCap]) => Integer
GdipGetPenDashArray([pen, dash, count]) => Integer
GdipGetPenDashCap197819([pen, dashCap]) => Integer
GdipGetPenDashCount([pen, count]) => Integer
GdipGetPenDashOffset([pen, offset]) => Integer
GdipGetPenDashStyle([pen, dashstyle]) => Integer
GdipGetPenEndCap([pen, endCap]) => Integer
GdipGetPenFillType([pen, type]) => Integer
GdipGetPenLineJoin([pen, lineJoin]) => Integer
GdipGetPenMiterLimit([pen, miterLimit]) => Integer
GdipGetPenMode([pen, penMode]) => Integer
GdipGetPenStartCap([pen, startCap]) => Integer
GdipGetPenTransform([pen, matrix]) => Integer
GdipGetPenUnit([pen, unit]) => Integer
GdipGetPenWidth([pen, width]) => Integer
GdipGetPixelOffsetMode([graphics, pixelOffsetMode]) => Integer
GdipGetPointCount([path, count]) => Integer
GdipGetPropertyCount([image, numOfProperty]) => Integer
GdipGetPropertyIdList([image, numOfProperty, list]) => Integer
GdipGetPropertyItem([image, propId, propSize, buffer]) => Integer
GdipGetPropertyItemSize([image, propId, size]) => Integer
GdipGetPropertySize([image, totalBufferSize, numProperties]) => Integer
GdipGetRegionBounds([region, graphics, rect]) => Integer
GdipGetRegionBoundsI([region, graphics, rect]) => Integer
GdipGetRegionData([region, buffer, bufferSize, sizeFilled]) => Integer
GdipGetRegionDataSize([region, bufferSize]) => Integer
GdipGetRegionHRgn([region, graphics, hRgn]) => Integer
GdipGetRegionScans([region, rects, count, matrix]) => Integer
GdipGetRegionScansCount([region, count, matrix]) => Integer
GdipGetRegionScansI([region, rects, count, matrix]) => Integer
GdipGetRenderingOrigin([graphics, x, y]) => Integer
GdipGetSmoothingMode([graphics, smoothingMode]) => Integer
GdipGetSolidFillColor([brush, color]) => Integer
GdipGetStringFormatAlign([format, align]) => Integer
GdipGetStringFormatDigitSubstitution([format, language, substitute]) => Integer
GdipGetStringFormatFlags([format, flags]) => Integer
GdipGetStringFormatHotkeyPrefix([format, hotkeyPrefix]) => Integer
GdipGetStringFormatLineAlign([format, align]) => Integer
GdipGetStringFormatMeasurableCharacterRangeCount([format, count]) => Integer
GdipGetStringFormatTabStopCount([format, count]) => Integer
GdipGetStringFormatTabStops([format, count, firstTabOffset, tabStops]) => Integer
GdipGetStringFormatTrimming([format, trimming]) => Integer
GdipGetTextRenderingHint([graphics, mode]) => Integer
GdipGetTextureImage([brush, image]) => Integer
GdipGetTextureTransform([brush, matrix]) => Integer
GdipGetTextureWrapMode([brush, wrapmode]) => Integer
GdipGetVisibleClipBounds([graphics, rect]) => Integer
GdipGetVisibleClipBoundsI([graphics, rect]) => Integer
GdipGetWorldTransform([graphics, matrix]) => Integer
GdipGraphicsClear([graphics, color]) => Integer
GdipImageForceValidation([image]) => Integer
GdipImageGetFrameCount([image, dimensionID, count]) => Integer
GdipImageGetFrameDimensionsCount([image, count]) => Integer
GdipImageGetFrameDimensionsList([image, dimensionIDs, count]) => Integer
GdipImageRotateFlip([image, rfType]) => Integer
GdipImageSelectActiveFrame([image, dimensionID, frameIndex]) => Integer
GdipInvertMatrix([matrix]) => Integer
GdipIsClipEmpty([graphics, result]) => Integer
GdipIsEmptyRegion([region, graphics, result]) => Integer
GdipIsEqualRegion([region, region2, graphics, result]) => Integer
GdipIsInfiniteRegion([region, graphics, result]) => Integer
GdipIsMatrixEqual([matrix, matrix2, result]) => Integer
GdipIsMatrixIdentity([matrix, result]) => Integer
GdipIsMatrixInvertible([matrix, result]) => Integer
GdipIsOutlineVisiblePathPoint([path, x, y, pen, graphics, result]) => Integer
GdipIsOutlineVisiblePathPointI([path, x, y, pen, graphics, result]) => Integer
GdipIsVisibleClipEmpty([graphics, result]) => Integer
GdipIsVisiblePathPoint([path, x, y, graphics, result]) => Integer
GdipIsVisiblePathPointI([path, x, y, graphics, result]) => Integer
GdipIsVisiblePoint([graphics, x, y, result]) => Integer
GdipIsVisiblePointI([graphics, x, y, result]) => Integer
GdipIsVisibleRect([graphics, x, y, width, height, result]) => Integer
GdipIsVisibleRectI([graphics, x, y, width, height, result]) => Integer
GdipIsVisibleRegionPoint([region, x, y, graphics, result]) => Integer
GdipIsVisibleRegionPointI([region, x, y, graphics, result]) => Integer
GdipIsVisibleRegionRect([region, x, y, width, height, graphics, result]) => Integer
GdipIsVisibleRegionRectI([region, x, y, width, height, graphics, result]) => Integer
GdipLoadImageFromFile([filename, image]) => Integer
GdipLoadImageFromFileICM([filename, image]) => Integer
GdipLoadImageFromStream([stream, image]) => Integer
GdipLoadImageFromStreamICM([stream, image]) => Integer
GdiplusNotificationHook([token]) => Integer
GdiplusNotificationUnhook([token]) => void
GdiplusShutdown([token]) => void
GdiplusStartup([token, input, output]) => Integer
GdipMeasureCharacterRanges([graphics, string, length, font, layoutRect, stringFormat, regionCount, regions]) => Integer
GdipMeasureDriverString([graphics, text, length, font, positions, flags, matrix, boundingBox]) => Integer
GdipMeasureString([graphics, string, length, font, layoutRect, stringFormat, boundingBox, codepointsFitted, linesFilled]) => Integer
GdipMultiplyLineTransform([brush, matrix, order]) => Integer
GdipMultiplyMatrix([matrix, matrix2, order]) => Integer
GdipMultiplyPathGradientTransform([brush, matrix, order]) => Integer
GdipMultiplyPenTransform([pen, matrix, order]) => Integer
GdipMultiplyTextureTransform([brush, matrix, order]) => Integer
GdipMultiplyWorldTransform([graphics, matrix, order]) => Integer
GdipNewInstalledFontCollection([fontCollection]) => Integer
GdipNewPrivateFontCollection([fontCollection]) => Integer
GdipPathIterCopyData([iterator, resultCount, points, types, startIndex, endIndex]) => Integer
GdipPathIterEnumerate([iterator, resultCount, points, types, count]) => Integer
GdipPathIterGetCount([iterator, count]) => Integer
GdipPathIterGetSubpathCount([iterator, count]) => Integer
GdipPathIterHasCurve([iterator, hasCurve]) => Integer
GdipPathIterIsValid([iterator, valid]) => Integer
GdipPathIterNextMarker([iterator, resultCount, startIndex, endIndex]) => Integer
GdipPathIterNextMarkerPath([iterator, resultCount, path]) => Integer
GdipPathIterNextPathType([iterator, resultCount, pathType, startIndex, endIndex]) => Integer
GdipPathIterNextSubpath([iterator, resultCount, startIndex, endIndex, isClosed]) => Integer
GdipPathIterNextSubpathPath([iterator, resultCount, path, isClosed]) => Integer
GdipPathIterRewind([iterator]) => Integer
GdipPlayMetafileRecord([metafile, recordType, flags, dataSize, data]) => Integer
GdipPrivateAddFontFile([fontCollection, filename]) => Integer
GdipPrivateAddMemoryFont([fontCollection, memory, length]) => Integer
GdipRecordMetafile([referenceHdc, type, frameRect, frameUnit, description, metafile]) => Integer
GdipRecordMetafileFileName([fileName, referenceHdc, type, frameRect, frameUnit, description, metafile]) => Integer
GdipRecordMetafileFileNameI([fileName, referenceHdc, type, frameRect, frameUnit, description, metafile]) => Integer
GdipRecordMetafileI([referenceHdc, type, frameRect, frameUnit, description, metafile]) => Integer
GdipRecordMetafileStream([stream, referenceHdc, type, frameRect, frameUnit, description, metafile]) => Integer
GdipRecordMetafileStreamI([stream, referenceHdc, type, frameRect, frameUnit, description, metafile]) => Integer
GdipReleaseDC([graphics, hdc]) => Integer
GdipRemovePropertyItem([image, propId]) => Integer
GdipResetClip([graphics]) => Integer
GdipResetImageAttributes([imageattr, type]) => Integer
GdipResetLineTransform([brush]) => Integer
GdipResetPageTransform([graphics]) => Integer
GdipResetPath([path]) => Integer
GdipResetPathGradientTransform([brush]) => Integer
GdipResetPenTransform([pen]) => Integer
GdipResetTextureTransform([brush]) => Integer
GdipResetWorldTransform([graphics]) => Integer
GdipRestoreGraphics([graphics, state]) => Integer
GdipReversePath([path]) => Integer
GdipRotateLineTransform([brush, angle, order]) => Integer
GdipRotateMatrix([matrix, angle, order]) => Integer
GdipRotatePathGradientTransform([brush, angle, order]) => Integer
GdipRotatePenTransform([pen, angle, order]) => Integer
GdipRotateTextureTransform([brush, angle, order]) => Integer
GdipRotateWorldTransform([graphics, angle, order]) => Integer
GdipSaveAdd([image, encoderParams]) => Integer
GdipSaveAddImage([image, newImage, encoderParams]) => Integer
GdipSaveGraphics([graphics, state]) => Integer
GdipSaveImageToFile([image, filename, clsidEncoder, encoderParams]) => Integer
GdipSaveImageToStream([image, stream, clsidEncoder, encoderParams]) => Integer
GdipScaleLineTransform([brush, sx, sy, order]) => Integer
GdipScaleMatrix([matrix, scaleX, scaleY, order]) => Integer
GdipScalePathGradientTransform([brush, sx, sy, order]) => Integer
GdipScalePenTransform([pen, sx, sy, order]) => Integer
GdipScaleTextureTransform([brush, sx, sy, order]) => Integer
GdipScaleWorldTransform([graphics, sx, sy, order]) => Integer
GdipSetAdjustableArrowCapFillState([cap, fillState]) => Integer
GdipSetAdjustableArrowCapHeight([cap, height]) => Integer
GdipSetAdjustableArrowCapMiddleInset([cap, middleInset]) => Integer
GdipSetAdjustableArrowCapWidth([cap, width]) => Integer
GdipSetClipGraphics([graphics, srcgraphics, combineMode]) => Integer
GdipSetClipHrgn([graphics, hRgn, combineMode]) => Integer
GdipSetClipPath([graphics, path, combineMode]) => Integer
GdipSetClipRect([graphics, x, y, width, height, combineMode]) => Integer
GdipSetClipRectI([graphics, x, y, width, height, combineMode]) => Integer
GdipSetClipRegion([graphics, region, combineMode]) => Integer
GdipSetCompositingMode([graphics, compositingMode]) => Integer
GdipSetCompositingQuality([graphics, compositingQuality]) => Integer
GdipSetCustomLineCapBaseCap([customCap, baseCap]) => Integer
GdipSetCustomLineCapBaseInset([customCap, inset]) => Integer
GdipSetCustomLineCapStrokeCaps([customCap, startCap, endCap]) => Integer
GdipSetCustomLineCapStrokeJoin([customCap, lineJoin]) => Integer
GdipSetCustomLineCapWidthScale([customCap, widthScale]) => Integer
GdipSetEmpty([region]) => Integer
GdipSetImageAttributesCachedBackground([imageattr, enableFlag]) => Integer
GdipSetImageAttributesColorKeys([imageattr, type, enableFlag, colorLow, colorHigh]) => Integer
GdipSetImageAttributesColorMatrix([imageattr, type, enableFlag, colorMatrix, grayMatrix, flags]) => Integer
GdipSetImageAttributesGamma([imageattr, type, enableFlag, gamma]) => Integer
GdipSetImageAttributesNoOp([imageattr, type, enableFlag]) => Integer
GdipSetImageAttributesOutputChannel([imageattr, type, enableFlag, channelFlags]) => Integer
GdipSetImageAttributesOutputChannelColorProfile([imageattr, type, enableFlag, colorProfileFilename]) => Integer
GdipSetImageAttributesRemapTable([imageattr, type, enableFlag, mapSize, map]) => Integer
GdipSetImageAttributesThreshold([imageattr, type, enableFlag, threshold]) => Integer
GdipSetImageAttributesToIdentity([imageattr, type]) => Integer
GdipSetImageAttributesWrapMode([imageAttr, wrap, argb, clamp]) => Integer
GdipSetImagePalette([image, palette]) => Integer
GdipSetInfinite([region]) => Integer
GdipSetInterpolationMode([graphics, interpolationMode]) => Integer
GdipSetLineBlend([brush, blend, positions, count]) => Integer
GdipSetLineColors([brush, color1, color2]) => Integer
GdipSetLineGammaCorrection([brush, useGammaCorrection]) => Integer
GdipSetLineLinearBlend([brush, focus, scale]) => Integer
GdipSetLinePresetBlend([brush, blend, positions, count]) => Integer
GdipSetLineSigmaBlend([brush, focus, scale]) => Integer
GdipSetLineTransform([brush, matrix]) => Integer
GdipSetLineWrapMode([brush, wrapmode]) => Integer
GdipSetMatrixElements([matrix, m11, m12, m21, m22, dx, dy]) => Integer
GdipSetMetafileDownLevelRasterizationLimit([metafile, metafileRasterizationLimitDpi]) => Integer
GdipSetPageScale([graphics, scale]) => Integer
GdipSetPageUnit([graphics, unit]) => Integer
GdipSetPathFillMode([path, fillmode]) => Integer
GdipSetPathGradientBlend([brush, blend, positions, count]) => Integer
GdipSetPathGradientCenterColor([brush, colors]) => Integer
GdipSetPathGradientCenterPoint([brush, points]) => Integer
GdipSetPathGradientCenterPointI([brush, points]) => Integer
GdipSetPathGradientFocusScales([brush, xScale, yScale]) => Integer
GdipSetPathGradientGammaCorrection([brush, useGammaCorrection]) => Integer
GdipSetPathGradientLinearBlend([brush, focus, scale]) => Integer
GdipSetPathGradientPath([brush, path]) => Integer
GdipSetPathGradientPresetBlend([brush, blend, positions, count]) => Integer
GdipSetPathGradientSigmaBlend([brush, focus, scale]) => Integer
GdipSetPathGradientSurroundColorsWithCount([brush, color, count]) => Integer
GdipSetPathGradientTransform([brush, matrix]) => Integer
GdipSetPathGradientWrapMode([brush, wrapmode]) => Integer
GdipSetPathMarker([path]) => Integer
GdipSetPenBrushFill([pen, brush]) => Integer
GdipSetPenColor([pen, argb]) => Integer
GdipSetPenCompoundArray([pen, dash, count]) => Integer
GdipSetPenCustomEndCap([pen, customCap]) => Integer
GdipSetPenCustomStartCap([pen, customCap]) => Integer
GdipSetPenDashArray([pen, dash, count]) => Integer
GdipSetPenDashCap197819([pen, dashCap]) => Integer
GdipSetPenDashOffset([pen, offset]) => Integer
GdipSetPenDashStyle([pen, dashstyle]) => Integer
GdipSetPenEndCap([pen, endCap]) => Integer
GdipSetPenLineCap197819([pen, startCap, endCap, dashCap]) => Integer
GdipSetPenLineJoin([pen, lineJoin]) => Integer
GdipSetPenMiterLimit([pen, miterLimit]) => Integer
GdipSetPenMode([pen, penMode]) => Integer
GdipSetPenStartCap([pen, startCap]) => Integer
GdipSetPenTransform([pen, matrix]) => Integer
GdipSetPenUnit([pen, unit]) => Integer
GdipSetPenWidth([pen, width]) => Integer
GdipSetPixelOffsetMode([graphics, pixelOffsetMode]) => Integer
GdipSetPropertyItem([image, item]) => Integer
GdipSetRenderingOrigin([graphics, x, y]) => Integer
GdipSetSmoothingMode([graphics, smoothingMode]) => Integer
GdipSetSolidFillColor([brush, color]) => Integer
GdipSetStringFormatAlign([format, align]) => Integer
GdipSetStringFormatDigitSubstitution([format, language, substitute]) => Integer
GdipSetStringFormatFlags([format, flags]) => Integer
GdipSetStringFormatHotkeyPrefix([format, hotkeyPrefix]) => Integer
GdipSetStringFormatLineAlign([format, align]) => Integer
GdipSetStringFormatMeasurableCharacterRanges([format, rangeCount, ranges]) => Integer
GdipSetStringFormatTabStops([format, firstTabOffset, count, tabStops]) => Integer
GdipSetStringFormatTrimming([format, trimming]) => Integer
GdipSetTextRenderingHint([graphics, mode]) => Integer
GdipSetTextureTransform([brush, matrix]) => Integer
GdipSetTextureWrapMode([brush, wrapmode]) => Integer
GdipSetWorldTransform([graphics, matrix]) => Integer
GdipShearMatrix([matrix, shearX, shearY, order]) => Integer
GdipStartPathFigure([path]) => Integer
GdipStringFormatGetGenericDefault([format]) => Integer
GdipStringFormatGetGenericTypographic([format]) => Integer
GdipTestControl([control, param]) => Integer
GdipTransformMatrixPoints([matrix, pts, count]) => Integer
GdipTransformMatrixPointsI([matrix, pts, count]) => Integer
GdipTransformPath([path, matrix]) => Integer
GdipTransformPoints([graphics, destSpace, srcSpace, points, count]) => Integer
GdipTransformPointsI([graphics, destSpace, srcSpace, points, count]) => Integer
GdipTransformRegion([region, matrix]) => Integer
GdipTranslateClip([graphics, dx, dy]) => Integer
GdipTranslateClipI([graphics, dx, dy]) => Integer
GdipTranslateLineTransform([brush, dx, dy, order]) => Integer
GdipTranslateMatrix([matrix, offsetX, offsetY, order]) => Integer
GdipTranslatePathGradientTransform([brush, dx, dy, order]) => Integer
GdipTranslatePenTransform([pen, dx, dy, order]) => Integer
GdipTranslateRegion([region, dx, dy]) => Integer
GdipTranslateRegionI([region, dx, dy]) => Integer
GdipTranslateTextureTransform([brush, dx, dy, order]) => Integer
GdipTranslateWorldTransform([graphics, dx, dy, order]) => Integer
GdipVectorTransformMatrixPoints([matrix, pts, count]) => Integer
GdipVectorTransformMatrixPointsI([matrix, pts, count]) => Integer
GdipWarpPath([path, matrix, points, count, srcx, srcy, srcwidth, srcheight, warpMode, flatness]) => Integer
GdipWidenPath([nativePath, pen, matrix, flatness]) => Integer
GdipWindingModeOutline([path, matrix, flatness]) => Integer
gluBeginCurve([nobj]) => void
gluBeginPolygon([tess]) => void
gluBeginSurface([nobj]) => void
gluBeginTrim([nobj]) => void
gluBuild1DMipmaps([target, components, width, format, type, data]) => void
gluBuild2DMipmaps([target, components, width, height, format, type, data]) => void
gluCylinder([qobj, baseRadius, topRadius, height, slices, stacks]) => void
gluDeleteNurbsRenderer([nobj]) => void
gluDeleteQuadric([state]) => void
gluDeleteTess([tess]) => void
gluDisk([qobj, innerRadius, outerRadius, slices, loops]) => void
gluEndCurve([nobj]) => void
gluEndPolygon([tess]) => void
gluEndSurface([nobj]) => void
gluEndTrim([nobj]) => void
gluErrorString([errCode]) => Integer
gluGetNurbsProperty([nobj, property, value]) => void
gluGetString([name]) => Integer
gluGetTessProperty([tess, which, value]) => void
gluLoadSamplingMatrices([nobj, modelMatrix, projMatrix, viewport]) => void
gluLookAt([eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz]) => void
gluNewNurbsRenderer() => Integer
gluNewQuadric() => Integer
gluNewTess() => Integer
gluNextContour([tess, type]) => void
gluNurbsCallback([nobj, which, fn]) => void
gluNurbsCurve([nobj, nknots, knot, stride, ctlarray, order, type]) => void
gluNurbsProperty([nobj, property, value]) => void
gluNurbsSurface([nobj, sknot_count, sknot, tknot_count, tknot, s_stride, t_stride, ctlarray, sorder, torder, type]) => void
gluOrtho2D([left, right, top, bottom]) => void
gluPartialDisk([qobj, innerRadius, outerRadius, slices, loops, startAngle, sweepAngle]) => void
gluPerspective([fovy, aspect, zNear, zFar]) => void
gluPickMatrix([x, y, height, width, viewport]) => void
gluProject([objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz]) => Integer
gluPwlCurve([nobj, count, array, stride, type]) => void
gluQuadricCallback([qobj, which, fn]) => void
gluQuadricDrawStyle([quadObject, drawStyle]) => void
gluQuadricNormals([quadObject, normals]) => void
gluQuadricOrientation([quadObject, orientation]) => void
gluQuadricTexture([quadObject, textureCoords]) => void
gluScaleImage([format, widthin, heightin, typein, datain, widthout, heightout, typeout, dataout]) => Integer
gluSphere([qobj, radius, slices, stacks]) => void
gluTessBeginContour([tess]) => void
gluTessBeginPolygon([tess, polygon_data]) => void
gluTessCallback([tess, which, fn]) => void
gluTessEndContour([tess]) => void
gluTessEndPolygon([tess]) => void
gluTessNormal([tess, x, y, z]) => void
gluTessProperty([tess, which, value]) => void
gluTessVertex([tess, coords, data]) => void
gluUnProject([winx, winy, winz, modelMatrix, projMatrix, viewport, objx, objy, objz]) => Integer
HidD_FlushQueue([HidDeviceObject]) => Integer
HidD_FreePreparsedData([PreparsedData]) => Integer
HidD_GetAttributes([HidDeviceObject, Attributes]) => Integer
HidD_GetConfiguration([HidDeviceObject, Configuration, ConfigurationLength]) => Integer
HidD_GetFeature([HidDeviceObject, ReportBuffer, ReportBufferLength]) => Integer
HidD_GetIndexedString([HidDeviceObject, StringIndex, Buffer, BufferLength]) => Integer
HidD_GetInputReport([HidDeviceObject, ReportBuffer, ReportBufferLength]) => Integer
HidD_GetManufacturerString([HidDeviceObject, Buffer, BufferLength]) => Integer
HidD_GetMsGenreDescriptor([HidDeviceObject, Buffer, BufferLength]) => Integer
HidD_GetNumInputBuffers([HidDeviceObject, NumberBuffers]) => Integer
HidD_GetPhysicalDescriptor([HidDeviceObject, Buffer, BufferLength]) => Integer
HidD_GetPreparsedData([HidDeviceObject, PreparsedData]) => Integer
HidD_GetProductString([HidDeviceObject, Buffer, BufferLength]) => Integer
HidD_GetSerialNumberString([HidDeviceObject, Buffer, BufferLength]) => Integer
HidD_SetConfiguration([HidDeviceObject, Configuration, ConfigurationLength]) => Integer
HidD_SetFeature([HidDeviceObject, ReportBuffer, ReportBufferLength]) => Integer
HidD_SetNumInputBuffers([HidDeviceObject, NumberBuffers]) => Integer
HidD_SetOutputReport([HidDeviceObject, ReportBuffer, ReportBufferLength]) => Integer
HidP_GetButtonCaps([ReportType, ButtonCaps, ButtonCapsLength, PreparsedData]) => Integer
HidP_GetCaps([PreparsedData, Capabilities]) => Integer
HidP_GetData([ReportType, DataList, DataLength, PreparsedData, Report, ReportLength]) => Integer
HidP_GetExtendedAttributes([ReportType, DataIndex, PreparsedData, Attributes, LengthAttributes]) => Integer
HidP_GetLinkCollectionNodes([LinkCollectionNodes, LinkCollectionNodesLength, PreparsedData]) => Integer
HidP_GetScaledUsageValue([ReportType, UsagePage, LinkCollection, Usage, UsageValue, PreparsedData, Report, ReportLength]) => Integer
HidP_GetSpecificButtonCaps([ReportType, UsagePage, LinkCollection, Usage, ButtonCaps, ButtonCapsLength, PreparsedData]) => Integer
HidP_GetSpecificValueCaps([ReportType, UsagePage, LinkCollection, Usage, ValueCaps, ValueCapsLength, PreparsedData]) => Integer
HidP_GetUsages([ReportType, UsagePage, LinkCollection, UsageList, UsageLength, PreparsedData, Report, ReportLength]) => Integer
HidP_GetUsagesEx([ReportType, LinkCollection, ButtonList, UsageLength, PreparsedData, Report, ReportLength]) => Integer
HidP_GetUsageValue([ReportType, UsagePage, LinkCollection, Usage, UsageValue, PreparsedData, Report, ReportLength]) => Integer
HidP_GetUsageValueArray([ReportType, UsagePage, LinkCollection, Usage, UsageValue, UsageValueByteLength, PreparsedData, Report, ReportLength]) => Integer
HidP_GetValueCaps([ReportType, ValueCaps, ValueCapsLength, PreparsedData]) => Integer
HidP_InitializeReportForID([ReportType, ReportID, PreparsedData, Report, ReportLength]) => Integer
HidP_MaxDataListLength([ReportType, PreparsedData]) => Integer
HidP_MaxUsageListLength([ReportType, UsagePage, PreparsedData]) => Integer
HidP_SetData([ReportType, DataList, DataLength, PreparsedData, Report, ReportLength]) => Integer
HidP_SetScaledUsageValue([ReportType, UsagePage, LinkCollection, Usage, UsageValue, PreparsedData, Report, ReportLength]) => Integer
HidP_SetUsages([ReportType, UsagePage, LinkCollection, UsageList, UsageLength, PreparsedData, Report, ReportLength]) => Integer
HidP_SetUsageValue([ReportType, UsagePage, LinkCollection, Usage, UsageValue, PreparsedData, Report, ReportLength]) => Integer
HidP_SetUsageValueArray([ReportType, UsagePage, LinkCollection, Usage, UsageValue, UsageValueByteLength, PreparsedData, Report, ReportLength]) => Integer
HidP_TranslateUsagesToI8042ScanCodes([ChangedUsageList, UsageListLength, KeyAction, ModifierState, InsertCodesProcedure, InsertCodesContext]) => Integer
HidP_UnsetUsages([ReportType, UsagePage, LinkCollection, UsageList, UsageLength, PreparsedData, Report, ReportLength]) => Integer
HidP_UsageListDifference([PreviousUsageList, CurrentUsageList, BreakUsageList, MakeUsageList, UsageListLength]) => Integer
_hread([hFile, lpBuffer, lBytes]) => Integer
_hwrite([hFile, lpBuffer, lBytes]) => Integer
_lclose([hFile]) => Integer
_lcreat([lpPathName, iAttribute]) => Integer
_llseek([hFile, lOffset, iOrigin]) => Integer
_lopen([lpPathName, iReadWrite]) => Integer
_lread([hFile, lpBuffer, uBytes]) => Integer
_lwrite([hFile, lpBuffer, uBytes]) => Integer
AcquireSRWLockExclusive([SRWLock]) => void
AcquireSRWLockShared([SRWLock]) => void
ActivateActCtx([hActCtx, lpCookie]) => Integer
AddAtom([lpString]) => Integer
AddAtomA([lpString]) => Integer
AddAtomW([lpString]) => Integer
AddConsoleAlias([Source, Target, ExeName]) => Integer
AddConsoleAliasA([Source, Target, ExeName]) => Integer
AddConsoleAliasW([Source, Target, ExeName]) => Integer
AddDllDirectory([NewDirectory]) => Integer
AddIntegrityLabelToBoundaryDescriptor([BoundaryDescriptor, IntegrityLabel]) => Integer
AddRefActCtx([hActCtx]) => void
AddSecureMemoryCacheCallback([pfnCallBack]) => Integer
AddSIDToBoundaryDescriptor([BoundaryDescriptor, RequiredSid]) => Integer
AddVectoredContinueHandler([FirstHandler, VectoredHandler]) => Integer
AddVectoredExceptionHandler([FirstHandler, VectoredHandler]) => Integer
AdjustCalendarDate([lpCalDateTime, calUnit, amount]) => Integer
AllocateUserPhysicalPages([hProcess, NumberOfPages, UserPfnArray]) => Integer
AllocateUserPhysicalPagesNuma([hProcess, NumberOfPages, PageArray, nndPreferred]) => Integer
AllocConsole() => Integer
ApplicationRecoveryFinished([bSuccess]) => void
ApplicationRecoveryInProgress([pbCanceled]) => Integer
AreFileApisANSI() => Integer
AssignProcessToJobObject([hJob, hProcess]) => Integer
AttachConsole([dwProcessId]) => Integer
BackupRead([hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, bAbort, bProcessSecurity, lpContext]) => Integer
BackupSeek([hFile, dwLowBytesToSeek, dwHighBytesToSeek, lpdwLowByteSeeked, lpdwHighByteSeeked, lpContext]) => Integer
BackupWrite([hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, bAbort, bProcessSecurity, lpContext]) => Integer
Beep([dwFreq, dwDuration]) => Integer
BeginUpdateResource([pFileName, bDeleteExistingResources]) => Integer
BeginUpdateResourceA([pFileName, bDeleteExistingResources]) => Integer
BeginUpdateResourceW([pFileName, bDeleteExistingResources]) => Integer
BindIoCompletionCallback([FileHandle, Function, Flags]) => Integer
BuildCommDCB([lpDef, lpDCB]) => Integer
BuildCommDCBA([lpDef, lpDCB]) => Integer
BuildCommDCBAndTimeouts([lpDef, lpDCB, lpCommTimeouts]) => Integer
BuildCommDCBAndTimeoutsA([lpDef, lpDCB, lpCommTimeouts]) => Integer
BuildCommDCBAndTimeoutsW([lpDef, lpDCB, lpCommTimeouts]) => Integer
BuildCommDCBW([lpDef, lpDCB]) => Integer
CallbackMayRunLong([pci]) => Integer
CallNamedPipe([lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut]) => Integer
CallNamedPipeA([lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut]) => Integer
CallNamedPipeW([lpNamedPipeName, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, nTimeOut]) => Integer
CancelDeviceWakeupRequest([hDevice]) => Integer
CancelIo([hFile]) => Integer
CancelIoEx([hFile, lpOverlapped]) => Integer
CancelSynchronousIo([hThread]) => Integer
CancelThreadpoolIo([pio]) => void
CancelTimerQueueTimer([TimerQueue, Timer]) => Integer
CancelWaitableTimer([hTimer]) => Integer
ChangeTimerQueueTimer([TimerQueue, Timer, DueTime, Period]) => Integer
CheckNameLegalDOS8Dot3([lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal]) => Integer
CheckNameLegalDOS8Dot3A([lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal]) => Integer
CheckNameLegalDOS8Dot3W([lpName, lpOemName, OemNameSize, pbNameContainsSpaces, pbNameLegal]) => Integer
CheckRemoteDebuggerPresent([hProcess, pbDebuggerPresent]) => Integer
ClearCommBreak([hFile]) => Integer
ClearCommError([hFile, lpErrors, lpStat]) => Integer
CloseHandle([hObject]) => Integer
ClosePrivateNamespace([Handle, Flags]) => Integer
CloseThreadpool([ptpp]) => void
CloseThreadpoolCleanupGroup([ptpcg]) => void
CloseThreadpoolCleanupGroupMembers([ptpcg, fCancelPendingCallbacks, pvCleanupContext]) => void
CloseThreadpoolIo([pio]) => void
CloseThreadpoolTimer([pti]) => void
CloseThreadpoolWait([pwa]) => void
CloseThreadpoolWork([pwk]) => void
CommConfigDialog([lpszName, hWnd, lpCC]) => Integer
CommConfigDialogA([lpszName, hWnd, lpCC]) => Integer
CommConfigDialogW([lpszName, hWnd, lpCC]) => Integer
CompareFileTime([lpFileTime1, lpFileTime2]) => Integer
CompareString([Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2]) => Integer
CompareStringA([Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2]) => Integer
CompareStringEx([lpLocaleName, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, lpVersionInformation, lpReserved, lParam]) => Integer
CompareStringOrdinal([lpString1, cchCount1, lpString2, cchCount2, bIgnoreCase]) => Integer
CompareStringW([Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2]) => Integer
ConnectNamedPipe([hNamedPipe, lpOverlapped]) => Integer
ContinueDebugEvent([dwProcessId, dwThreadId, dwContinueStatus]) => Integer
ConvertCalDateTimeToSystemTime([lpCalDateTime, lpSysTime]) => Integer
ConvertDefaultLocale([Locale]) => Integer
ConvertFiberToThread() => Integer
ConvertSystemTimeToCalDateTime([lpSysTime, calId, lpCalDateTime]) => Integer
ConvertThreadToFiber([lpParameter]) => Integer
ConvertThreadToFiberEx([lpParameter, dwFlags]) => Integer
CopyContext([Destination, ContextFlags, Source]) => Integer
CopyFile([lpExistingFileName, lpNewFileName, bFailIfExists]) => Integer
CopyFileA([lpExistingFileName, lpNewFileName, bFailIfExists]) => Integer
CopyFileEx([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags]) => Integer
CopyFileExA([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags]) => Integer
CopyFileExW([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags]) => Integer
CopyFileTransacted([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction]) => Integer
CopyFileTransactedA([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction]) => Integer
CopyFileTransactedW([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, pbCancel, dwCopyFlags, hTransaction]) => Integer
CopyFileW([lpExistingFileName, lpNewFileName, bFailIfExists]) => Integer
CopyLZFile([INT, INT]) => Integer
CreateActCtx([pActCtx]) => Integer
CreateActCtxA([pActCtx]) => Integer
CreateActCtxW([pActCtx]) => Integer
CreateBoundaryDescriptor([Name, Flags]) => Integer
CreateBoundaryDescriptorA([Name, Flags]) => Integer
CreateBoundaryDescriptorW([Name, Flags]) => Integer
CreateConsoleScreenBuffer([dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlags, lpScreenBufferData]) => Integer
CreateDirectory([lpPathName, lpSecurityAttributes]) => Integer
CreateDirectoryA([lpPathName, lpSecurityAttributes]) => Integer
CreateDirectoryEx([lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes]) => Integer
CreateDirectoryExA([lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes]) => Integer
CreateDirectoryExW([lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes]) => Integer
CreateDirectoryTransacted([lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction]) => Integer
CreateDirectoryTransactedA([lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction]) => Integer
CreateDirectoryTransactedW([lpTemplateDirectory, lpNewDirectory, lpSecurityAttributes, hTransaction]) => Integer
CreateDirectoryW([lpPathName, lpSecurityAttributes]) => Integer
CreateEvent([lpEventAttributes, bManualReset, bInitialState, lpName]) => Integer
CreateEventA([lpEventAttributes, bManualReset, bInitialState, lpName]) => Integer
CreateEventEx([lpEventAttributes, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateEventExA([lpEventAttributes, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateEventExW([lpEventAttributes, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateEventW([lpEventAttributes, bManualReset, bInitialState, lpName]) => Integer
CreateFiber([dwStackSize, lpStartAddress, lpParameter]) => Integer
CreateFiberEx([dwStackCommitSize, dwStackReserveSize, dwFlags, lpStartAddress, lpParameter]) => Integer
CreateFile([lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile]) => Integer
CreateFileA([lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile]) => Integer
CreateFileMapping([hFile, lpAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName]) => Integer
CreateFileMappingA([hFile, lpAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName]) => Integer
CreateFileMappingNuma([hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred]) => Integer
CreateFileMappingNumaA([hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred]) => Integer
CreateFileMappingNumaW([hFile, lpFileMappingAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName, nndPreferred]) => Integer
CreateFileMappingW([hFile, lpAttributes, flProtect, dwMaximumSizeHigh, dwMaximumSizeLow, lpName]) => Integer
CreateFileTransacted([lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, pExtendedParameter]) => Integer
CreateFileTransactedA([lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, pExtendedParameter]) => Integer
CreateFileTransactedW([lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile, hTransaction, pusMiniVersion, pExtendedParameter]) => Integer
CreateFileW([lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile]) => Integer
CreateHardLink([lpFileName, lpExistingFileName, lpSecurityAttributes]) => Integer
CreateHardLinkA([lpFileName, lpExistingFileName, lpSecurityAttributes]) => Integer
CreateHardLinkTransacted([lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction]) => Integer
CreateHardLinkTransactedA([lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction]) => Integer
CreateHardLinkTransactedW([lpFileName, lpExistingFileName, lpSecurityAttributes, hTransaction]) => Integer
CreateHardLinkW([lpFileName, lpExistingFileName, lpSecurityAttributes]) => Integer
CreateIoCompletionPort([FileHandle, ExistingCompletionPort, CompletionKey, NumberOfConcurrentThreads]) => Integer
CreateJobObject([lpJobAttributes, lpName]) => Integer
CreateJobObjectA([lpJobAttributes, lpName]) => Integer
CreateJobObjectW([lpJobAttributes, lpName]) => Integer
CreateJobSet([NumJob, UserJobSet, Flags]) => Integer
CreateMailslot([lpName, nMaxMessageSize, lReadTimeout, lpSecurityAttributes]) => Integer
CreateMailslotA([lpName, nMaxMessageSize, lReadTimeout, lpSecurityAttributes]) => Integer
CreateMailslotW([lpName, nMaxMessageSize, lReadTimeout, lpSecurityAttributes]) => Integer
CreateMemoryResourceNotification([NotificationType]) => Integer
CreateMutex([lpMutexAttributes, bInitialOwner, lpName]) => Integer
CreateMutexA([lpMutexAttributes, bInitialOwner, lpName]) => Integer
CreateMutexEx([lpMutexAttributes, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateMutexExA([lpMutexAttributes, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateMutexExW([lpMutexAttributes, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateMutexW([lpMutexAttributes, bInitialOwner, lpName]) => Integer
CreateNamedPipe([lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes]) => Integer
CreateNamedPipeA([lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes]) => Integer
CreateNamedPipeW([lpName, dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut, lpSecurityAttributes]) => Integer
CreatePipe([hReadPipe, hWritePipe, lpPipeAttributes, nSize]) => Integer
CreatePrivateNamespace([lpPrivateNamespaceAttributes, lpBoundaryDescriptor, lpAliasPrefix]) => Integer
CreatePrivateNamespaceA([lpPrivateNamespaceAttributes, lpBoundaryDescriptor, lpAliasPrefix]) => Integer
CreatePrivateNamespaceW([lpPrivateNamespaceAttributes, lpBoundaryDescriptor, lpAliasPrefix]) => Integer
CreateProcess([lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation]) => Integer
CreateProcessA([lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation]) => Integer
CreateProcessW([lpApplicationName, lpCommandLine, lpProcessAttributes, lpThreadAttributes, bInheritHandles, dwCreationFlags, lpEnvironment, lpCurrentDirectory, lpStartupInfo, lpProcessInformation]) => Integer
CreateRemoteThread([hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId]) => Integer
CreateRemoteThreadEx([hProcess, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpAttributeList, lpThreadId]) => Integer
CreateSemaphore([lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName]) => Integer
CreateSemaphoreA([lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName]) => Integer
CreateSemaphoreEx([lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateSemaphoreExA([lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateSemaphoreExW([lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName, dwFlags, dwDesiredAccess]) => Integer
CreateSemaphoreW([lpSemaphoreAttributes, lInitialCount, lMaximumCount, lpName]) => Integer
CreateSymbolicLink([lpSymlinkFileName, lpTargetFileName, dwFlags]) => Integer
CreateSymbolicLinkA([lpSymlinkFileName, lpTargetFileName, dwFlags]) => Integer
CreateSymbolicLinkTransacted([lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction]) => Integer
CreateSymbolicLinkTransactedA([lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction]) => Integer
CreateSymbolicLinkTransactedW([lpSymlinkFileName, lpTargetFileName, dwFlags, hTransaction]) => Integer
CreateSymbolicLinkW([lpSymlinkFileName, lpTargetFileName, dwFlags]) => Integer
CreateTapePartition([hDevice, dwPartitionMethod, dwCount, dwSize]) => Integer
CreateThread([lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags, lpThreadId]) => Integer
CreateThreadpool([reserved]) => Integer
CreateThreadpoolCleanupGroup() => Integer
CreateThreadpoolIo([fl, pfnio, pv, pcbe]) => Integer
CreateThreadpoolTimer([pfnti, pv, pcbe]) => Integer
CreateThreadpoolWait([pfnwa, pv, pcbe]) => Integer
CreateThreadpoolWork([pfnwk, pv, pcbe]) => Integer
CreateTimerQueue() => Integer
CreateTimerQueueTimer([phNewTimer, TimerQueue, Callback, Parameter, DueTime, Period, Flags]) => Integer
CreateToolhelp32Snapshot([dwFlags, th32ProcessID]) => Integer
CreateWaitableTimer([lpTimerAttributes, bManualReset, lpTimerName]) => Integer
CreateWaitableTimerA([lpTimerAttributes, bManualReset, lpTimerName]) => Integer
CreateWaitableTimerEx([lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess]) => Integer
CreateWaitableTimerExA([lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess]) => Integer
CreateWaitableTimerExW([lpTimerAttributes, lpTimerName, dwFlags, dwDesiredAccess]) => Integer
CreateWaitableTimerW([lpTimerAttributes, bManualReset, lpTimerName]) => Integer
DeactivateActCtx([dwFlags, ulCookie]) => Integer
DebugActiveProcess([dwProcessId]) => Integer
DebugActiveProcessStop([dwProcessId]) => Integer
DebugBreak() => Integer
DebugBreakProcess([Process]) => Integer
DebugSetProcessKillOnExit([KillOnExit]) => Integer
DefineDosDevice([dwFlags, lpDeviceName, lpTargetPath]) => Integer
DefineDosDeviceA([dwFlags, lpDeviceName, lpTargetPath]) => Integer
DefineDosDeviceW([dwFlags, lpDeviceName, lpTargetPath]) => Integer
DeleteAtom([nAtom]) => Integer
DeleteBoundaryDescriptor([BoundaryDescriptor]) => void
DeleteCriticalSection([lpCriticalSection]) => void
DeleteFiber([lpFiber]) => void
DeleteFile([lpFileName]) => Integer
DeleteFileA([lpFileName]) => Integer
DeleteFileTransacted([lpFileName, hTransaction]) => Integer
DeleteFileTransactedA([lpFileName, hTransaction]) => Integer
DeleteFileTransactedW([lpFileName, hTransaction]) => Integer
DeleteFileW([lpFileName]) => Integer
DeleteProcThreadAttributeList([lpAttributeList]) => void
DeleteTimerQueue([TimerQueue]) => Integer
DeleteTimerQueueEx([TimerQueue, CompletionEvent]) => Integer
DeleteTimerQueueTimer([TimerQueue, Timer, CompletionEvent]) => Integer
DeleteVolumeMountPoint([lpszVolumeMountPoint]) => Integer
DeleteVolumeMountPointA([lpszVolumeMountPoint]) => Integer
DeleteVolumeMountPointW([lpszVolumeMountPoint]) => Integer
DeviceIoControl([hDevice, dwIoControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned, lpOverlapped]) => Integer
DisableThreadLibraryCalls([hModule]) => Integer
DisableThreadProfiling([PerformanceDataHandle]) => Integer
DisassociateCurrentThreadFromCallback([pci]) => void
DisconnectNamedPipe([hNamedPipe]) => Integer
DnsHostnameToComputerName([Hostname, ComputerName, nSize]) => Integer
DnsHostnameToComputerNameA([Hostname, ComputerName, nSize]) => Integer
DnsHostnameToComputerNameW([Hostname, ComputerName, nSize]) => Integer
DosDateTimeToFileTime([wFatDate, wFatTime, lpFileTime]) => Integer
DuplicateHandle([hSourceProcessHandle, hSourceHandle, hTargetProcessHandle, lpTargetHandle, dwDesiredAccess, bInheritHandle, dwOptions]) => Integer
EnableThreadProfiling([ThreadHandle, Flags, HardwareCounters, PerformanceDataHandle]) => Integer
EndUpdateResource([hUpdate, fDiscard]) => Integer
EndUpdateResourceA([hUpdate, fDiscard]) => Integer
EndUpdateResourceW([hUpdate, fDiscard]) => Integer
EnterCriticalSection([lpCriticalSection]) => void
EnumCalendarInfo([pCalInfoEnumProc, Locale, Calendar, CalType]) => Integer
EnumCalendarInfoA([pCalInfoEnumProc, Locale, Calendar, CalType]) => Integer
EnumCalendarInfoEx([pCalInfoEnumProcEx, Locale, Calendar, CalType]) => Integer
EnumCalendarInfoExA([pCalInfoEnumProcEx, Locale, Calendar, CalType]) => Integer
EnumCalendarInfoExEx([pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam]) => Integer
EnumCalendarInfoExW([pCalInfoEnumProcEx, Locale, Calendar, CalType]) => Integer
EnumCalendarInfoW([pCalInfoEnumProc, Locale, Calendar, CalType]) => Integer
EnumDateFormats([lpDateFmtEnumProc, Locale, dwFlags]) => Integer
EnumDateFormatsA([lpDateFmtEnumProc, Locale, dwFlags]) => Integer
EnumDateFormatsEx([lpDateFmtEnumProcEx, Locale, dwFlags]) => Integer
EnumDateFormatsExA([lpDateFmtEnumProcEx, Locale, dwFlags]) => Integer
EnumDateFormatsExEx([lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam]) => Integer
EnumDateFormatsExW([lpDateFmtEnumProcEx, Locale, dwFlags]) => Integer
EnumDateFormatsW([lpDateFmtEnumProc, Locale, dwFlags]) => Integer
EnumLanguageGroupLocales([lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam]) => Integer
EnumLanguageGroupLocalesA([lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam]) => Integer
EnumLanguageGroupLocalesW([lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam]) => Integer
EnumResourceLanguages([hModule, lpType, lpName, lpEnumFunc, lParam]) => Integer
EnumResourceLanguagesA([hModule, lpType, lpName, lpEnumFunc, lParam]) => Integer
EnumResourceLanguagesEx([hModule, lpType, lpName, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceLanguagesExA([hModule, lpType, lpName, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceLanguagesExW([hModule, lpType, lpName, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceLanguagesW([hModule, lpType, lpName, lpEnumFunc, lParam]) => Integer
EnumResourceNames([hModule, lpszType, lpEnumFunc, lParam]) => Integer
EnumResourceNamesA([hModule, lpszType, lpEnumFunc, lParam]) => Integer
EnumResourceNamesEx([hModule, lpszType, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceNamesExA([hModule, lpszType, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceNamesExW([hModule, lpszType, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceNamesW([hModule, lpszType, lpEnumFunc, lParam]) => Integer
EnumResourceTypes([hModule, lpEnumFunc, lParam]) => Integer
EnumResourceTypesA([hModule, lpEnumFunc, lParam]) => Integer
EnumResourceTypesEx([hModule, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceTypesExA([hModule, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceTypesExW([hModule, lpEnumFunc, lParam, dwFlags, LangId]) => Integer
EnumResourceTypesW([hModule, lpEnumFunc, lParam]) => Integer
EnumSystemCodePages([lpCodePageEnumProc, dwFlags]) => Integer
EnumSystemCodePagesA([lpCodePageEnumProc, dwFlags]) => Integer
EnumSystemCodePagesW([lpCodePageEnumProc, dwFlags]) => Integer
EnumSystemFirmwareTables([FirmwareTableProviderSignature, pFirmwareTableBuffer, BufferSize]) => Integer
EnumSystemGeoID([GeoClass, ParentGeoId, lpGeoEnumProc]) => Integer
EnumSystemLanguageGroups([lpLanguageGroupEnumProc, dwFlags, lParam]) => Integer
EnumSystemLanguageGroupsA([lpLanguageGroupEnumProc, dwFlags, lParam]) => Integer
EnumSystemLanguageGroupsW([lpLanguageGroupEnumProc, dwFlags, lParam]) => Integer
EnumSystemLocales([lpLocaleEnumProc, dwFlags]) => Integer
EnumSystemLocalesA([lpLocaleEnumProc, dwFlags]) => Integer
EnumSystemLocalesEx([lpLocaleEnumProcEx, dwFlags, lParam, lpReserved]) => Integer
EnumSystemLocalesW([lpLocaleEnumProc, dwFlags]) => Integer
EnumTimeFormats([lpTimeFmtEnumProc, Locale, dwFlags]) => Integer
EnumTimeFormatsA([lpTimeFmtEnumProc, Locale, dwFlags]) => Integer
EnumTimeFormatsEx([lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam]) => Integer
EnumTimeFormatsW([lpTimeFmtEnumProc, Locale, dwFlags]) => Integer
EnumUILanguages([lpUILanguageEnumProc, dwFlags, lParam]) => Integer
EnumUILanguagesA([lpUILanguageEnumProc, dwFlags, lParam]) => Integer
EnumUILanguagesW([lpUILanguageEnumProc, dwFlags, lParam]) => Integer
EraseTape([hDevice, dwEraseType, bImmediate]) => Integer
EscapeCommFunction([hFile, dwFunc]) => Integer
ExitProcess([uExitCode]) => void
ExitThread([dwExitCode]) => void
ExpandEnvironmentStrings([lpSrc, lpDst, nSize]) => Integer
ExpandEnvironmentStringsA([lpSrc, lpDst, nSize]) => Integer
ExpandEnvironmentStringsW([lpSrc, lpDst, nSize]) => Integer
FatalAppExit([uAction, lpMessageText]) => void
FatalAppExitA([uAction, lpMessageText]) => void
FatalAppExitW([uAction, lpMessageText]) => void
FatalExit([ExitCode]) => void
FileTimeToDosDateTime([lpFileTime, lpFatDate, lpFatTime]) => Integer
FileTimeToLocalFileTime([lpFileTime, lpLocalFileTime]) => Integer
FileTimeToSystemTime([lpFileTime, lpSystemTime]) => Integer
FillConsoleOutputAttribute([hConsoleOutput, wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten]) => Integer
FillConsoleOutputCharacter([hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten]) => Integer
FillConsoleOutputCharacterA([hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten]) => Integer
FillConsoleOutputCharacterW([hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten]) => Integer
FindActCtxSectionGuid([dwFlags, lpExtensionGuid, ulSectionId, lpGuidToFind, ReturnedData]) => Integer
FindActCtxSectionString([dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, ReturnedData]) => Integer
FindActCtxSectionStringA([dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, ReturnedData]) => Integer
FindActCtxSectionStringW([dwFlags, lpExtensionGuid, ulSectionId, lpStringToFind, ReturnedData]) => Integer
FindAtom([lpString]) => Integer
FindAtomA([lpString]) => Integer
FindAtomW([lpString]) => Integer
FindClose([hFindFile]) => Integer
FindCloseChangeNotification([hChangeHandle]) => Integer
FindFirstChangeNotification([lpPathName, bWatchSubtree, dwNotifyFilter]) => Integer
FindFirstChangeNotificationA([lpPathName, bWatchSubtree, dwNotifyFilter]) => Integer
FindFirstChangeNotificationW([lpPathName, bWatchSubtree, dwNotifyFilter]) => Integer
FindFirstFile([lpFileName, lpFindFileData]) => Integer
FindFirstFileA([lpFileName, lpFindFileData]) => Integer
FindFirstFileEx([lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags]) => Integer
FindFirstFileExA([lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags]) => Integer
FindFirstFileExW([lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags]) => Integer
FindFirstFileNameTransactedW([lpFileName, dwFlags, StringLength, LinkName, hTransaction]) => Integer
FindFirstFileNameW([lpFileName, dwFlags, StringLength, LinkName]) => Integer
FindFirstFileTransacted([lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction]) => Integer
FindFirstFileTransactedA([lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction]) => Integer
FindFirstFileTransactedW([lpFileName, fInfoLevelId, lpFindFileData, fSearchOp, lpSearchFilter, dwAdditionalFlags, hTransaction]) => Integer
FindFirstFileW([lpFileName, lpFindFileData]) => Integer
FindFirstStreamTransactedW([lpFileName, InfoLevel, lpFindStreamData, dwFlags, hTransaction]) => Integer
FindFirstStreamW([lpFileName, InfoLevel, lpFindStreamData, dwFlags]) => Integer
FindFirstVolume([lpszVolumeName, cchBufferLength]) => Integer
FindFirstVolumeA([lpszVolumeName, cchBufferLength]) => Integer
FindFirstVolumeMountPoint([lpszRootPathName, lpszVolumeMountPoint, cchBufferLength]) => Integer
FindFirstVolumeMountPointA([lpszRootPathName, lpszVolumeMountPoint, cchBufferLength]) => Integer
FindFirstVolumeMountPointW([lpszRootPathName, lpszVolumeMountPoint, cchBufferLength]) => Integer
FindFirstVolumeW([lpszVolumeName, cchBufferLength]) => Integer
FindNextChangeNotification([hChangeHandle]) => Integer
FindNextFile([hFindFile, lpFindFileData]) => Integer
FindNextFileA([hFindFile, lpFindFileData]) => Integer
FindNextFileNameW([hFindStream, StringLength, LinkName]) => Integer
FindNextFileW([hFindFile, lpFindFileData]) => Integer
FindNextStreamW([hFindStream, lpFindStreamData]) => Integer
FindNextVolume([hFindVolume, lpszVolumeName, cchBufferLength]) => Integer
FindNextVolumeA([hFindVolume, lpszVolumeName, cchBufferLength]) => Integer
FindNextVolumeMountPoint([hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength]) => Integer
FindNextVolumeMountPointA([hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength]) => Integer
FindNextVolumeMountPointW([hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength]) => Integer
FindNextVolumeW([hFindVolume, lpszVolumeName, cchBufferLength]) => Integer
FindNLSString([Locale, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound]) => Integer
FindNLSStringEx([lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, sortHandle]) => Integer
FindResource([hModule, lpName, lpType]) => Integer
FindResourceA([hModule, lpName, lpType]) => Integer
FindResourceEx([hModule, lpType, lpName, wLanguage]) => Integer
FindResourceExA([hModule, lpType, lpName, wLanguage]) => Integer
FindResourceExW([hModule, lpType, lpName, wLanguage]) => Integer
FindResourceW([hModule, lpName, lpType]) => Integer
FindStringOrdinal([dwFindStringOrdinalFlags, lpStringSource, cchSource, lpStringValue, cchValue, bIgnoreCase]) => Integer
FindVolumeClose([hFindVolume]) => Integer
FindVolumeMountPointClose([hFindVolumeMountPoint]) => Integer
FlsAlloc([lpCallback]) => Integer
FlsFree([dwFlsIndex]) => Integer
FlsGetValue([dwFlsIndex]) => Integer
FlsSetValue([dwFlsIndex, lpFlsData]) => Integer
FlushConsoleInputBuffer([hConsoleInput]) => Integer
FlushFileBuffers([hFile]) => Integer
FlushInstructionCache([hProcess, lpBaseAddress, dwSize]) => Integer
FlushProcessWriteBuffers() => Integer
FlushViewOfFile([lpBaseAddress, dwNumberOfBytesToFlush]) => Integer
FoldString([dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest]) => Integer
FoldStringA([dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest]) => Integer
FoldStringW([dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest]) => Integer
FormatMessage([dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments]) => Integer
FormatMessageA([dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments]) => Integer
FormatMessageW([dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, Arguments]) => Integer
FreeConsole() => Integer
FreeEnvironmentStrings([lpszEnvironmentBlock]) => Integer
FreeEnvironmentStringsA([lpszEnvironmentBlock]) => Integer
FreeEnvironmentStringsW([lpszEnvironmentBlock]) => Integer
FreeLibrary([hModule]) => Integer
FreeLibraryAndExitThread([hModule, dwExitCode]) => void
FreeLibraryWhenCallbackReturns([pci, mod]) => void
FreeResource([hglbResource]) => Integer
FreeUserPhysicalPages([hProcess, NumberOfPages, UserPfnArray]) => Integer
GenerateConsoleCtrlEvent([dwCtrlEvent, dwProcessGroupId]) => Integer
GetACP() => Integer
GetActiveProcessorCount([GroupNumber]) => Integer
GetActiveProcessorGroupCount() => Integer
GetApplicationRecoveryCallback([hProcess, pRecoveryCallback, ppvParameter, pdwPingInterval, pdwFlags]) => Integer
GetApplicationRestartSettings([hProcess, pwzCommandline, pcchSize, pdwFlags]) => Integer
GetAtomName([nAtom, lpBuffer, nSize]) => Integer
GetAtomNameA([nAtom, lpBuffer, nSize]) => Integer
GetAtomNameW([nAtom, lpBuffer, nSize]) => Integer
GetBinaryType([lpApplicationName, lpBinaryType]) => Integer
GetBinaryTypeA([lpApplicationName, lpBinaryType]) => Integer
GetBinaryTypeW([lpApplicationName, lpBinaryType]) => Integer
GetCalendarDateFormatEx([lpszLocale, dwFlags, lpCalDateTime, lpFormat, lpDateStr, cchDate]) => Integer
GetCalendarInfo([Locale, Calendar, CalType, lpCalData, cchData, lpValue]) => Integer
GetCalendarInfoA([Locale, Calendar, CalType, lpCalData, cchData, lpValue]) => Integer
GetCalendarInfoEx([lpLocaleName, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue]) => Integer
GetCalendarInfoW([Locale, Calendar, CalType, lpCalData, cchData, lpValue]) => Integer
GetCalendarSupportedDateRange([Calendar, lpCalMinDateTime, lpCalMaxDateTime]) => Integer
GetCommandLine() => Integer
GetCommandLineA() => Integer
GetCommandLineW() => Integer
GetCommConfig([hCommDev, lpCC, lpdwSize]) => Integer
GetCommMask([hFile, lpEvtMask]) => Integer
GetCommModemStatus([hFile, lpModemStat]) => Integer
GetCommProperties([hFile, lpCommProp]) => Integer
GetCommState([hFile, lpDCB]) => Integer
GetCommTimeouts([hFile, lpCommTimeouts]) => Integer
GetCompressedFileSize([lpFileName, lpFileSizeHigh]) => Integer
GetCompressedFileSizeA([lpFileName, lpFileSizeHigh]) => Integer
GetCompressedFileSizeTransacted([lpFileName, lpFileSizeHigh, hTransaction]) => Integer
GetCompressedFileSizeTransactedA([lpFileName, lpFileSizeHigh, hTransaction]) => Integer
GetCompressedFileSizeTransactedW([lpFileName, lpFileSizeHigh, hTransaction]) => Integer
GetCompressedFileSizeW([lpFileName, lpFileSizeHigh]) => Integer
GetComputerName([lpBuffer, lpnSize]) => Integer
GetComputerNameA([lpBuffer, lpnSize]) => Integer
GetComputerNameEx([NameType, lpBuffer, lpnSize]) => Integer
GetComputerNameExA([NameType, lpBuffer, lpnSize]) => Integer
GetComputerNameExW([NameType, lpBuffer, lpnSize]) => Integer
GetComputerNameW([lpBuffer, lpnSize]) => Integer
GetConsoleAlias([lpSource, lpTargetBuffer, TargetBufferLength, lpExeName]) => Integer
GetConsoleAliasA([lpSource, lpTargetBuffer, TargetBufferLength, lpExeName]) => Integer
GetConsoleAliases([lpAliasBuffer, AliasBufferLength, lpExeName]) => Integer
GetConsoleAliasesA([lpAliasBuffer, AliasBufferLength, lpExeName]) => Integer
GetConsoleAliasesLength([lpExeName]) => Integer
GetConsoleAliasesLengthA([lpExeName]) => Integer
GetConsoleAliasesLengthW([lpExeName]) => Integer
GetConsoleAliasesW([lpAliasBuffer, AliasBufferLength, lpExeName]) => Integer
GetConsoleAliasExes([lpExeNameBuffer, ExeNameBufferLength]) => Integer
GetConsoleAliasExesA([lpExeNameBuffer, ExeNameBufferLength]) => Integer
GetConsoleAliasExesLength() => Integer
GetConsoleAliasExesLengthA() => Integer
GetConsoleAliasExesLengthW() => Integer
GetConsoleAliasExesW([lpExeNameBuffer, ExeNameBufferLength]) => Integer
GetConsoleAliasW([lpSource, lpTargetBuffer, TargetBufferLength, lpExeName]) => Integer
GetConsoleCP() => Integer
GetConsoleCursorInfo([hConsoleOutput, lpConsoleCursorInfo]) => Integer
GetConsoleDisplayMode([lpModeFlags]) => Integer
GetConsoleFontSize([hConsoleOutput, nFont]) => Integer
GetConsoleHistoryInfo([lpConsoleHistoryInfo]) => Integer
GetConsoleMode([hConsoleHandle, lpMode]) => Integer
GetConsoleOriginalTitle([lpConsoleTitle, nSize]) => Integer
GetConsoleOriginalTitleA([lpConsoleTitle, nSize]) => Integer
GetConsoleOriginalTitleW([lpConsoleTitle, nSize]) => Integer
GetConsoleOutputCP() => Integer
GetConsoleProcessList([lpdwProcessList, dwProcessCount]) => Integer
GetConsoleScreenBufferInfo([hConsoleOutput, lpConsoleScreenBufferInfo]) => Integer
GetConsoleScreenBufferInfoEx([hConsoleOutput, lpConsoleScreenBufferInfoEx]) => Integer
GetConsoleSelectionInfo([lpConsoleSelectionInfo]) => Integer
GetConsoleTitle([lpConsoleTitle, nSize]) => Integer
GetConsoleTitleA([lpConsoleTitle, nSize]) => Integer
GetConsoleTitleW([lpConsoleTitle, nSize]) => Integer
GetConsoleWindow() => Integer
GetCPInfo([CodePage, lpCPInfo]) => Integer
GetCPInfoEx([CodePage, dwFlags, lpCPInfoEx]) => Integer
GetCPInfoExA([CodePage, dwFlags, lpCPInfoEx]) => Integer
GetCPInfoExW([CodePage, dwFlags, lpCPInfoEx]) => Integer
GetCurrencyFormat([Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency]) => Integer
GetCurrencyFormatA([Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency]) => Integer
GetCurrencyFormatEx([lpLocaleName, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency]) => Integer
GetCurrencyFormatW([Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency]) => Integer
GetCurrentActCtx([lphActCtx]) => Integer
GetCurrentConsoleFont([hConsoleOutput, bMaximumWindow, lpConsoleCurrentFont]) => Integer
GetCurrentConsoleFontEx([hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx]) => Integer
GetCurrentDirectory([nBufferLength, lpBuffer]) => Integer
GetCurrentDirectoryA([nBufferLength, lpBuffer]) => Integer
GetCurrentDirectoryW([nBufferLength, lpBuffer]) => Integer
GetCurrentProcess() => Integer
GetCurrentProcessId() => Integer
GetCurrentProcessorNumber() => Integer
GetCurrentProcessorNumberEx([ProcNumber]) => void
GetCurrentThread() => Integer
GetCurrentThreadId() => Integer
GetDateFormat([Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate]) => Integer
GetDateFormatA([Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate]) => Integer
GetDateFormatEx([lpLocaleName, dwFlags, lpDate, lpFormat, lpDateStr, cchDate, lpCalendar]) => Integer
GetDateFormatW([Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate]) => Integer
GetDefaultCommConfig([lpszName, lpCC, lpdwSize]) => Integer
GetDefaultCommConfigA([lpszName, lpCC, lpdwSize]) => Integer
GetDefaultCommConfigW([lpszName, lpCC, lpdwSize]) => Integer
GetDevicePowerState([hDevice, pfOn]) => Integer
GetDiskFreeSpace([lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters]) => Integer
GetDiskFreeSpaceA([lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters]) => Integer
GetDiskFreeSpaceEx([lpDirectoryName, lpFreeBytesAvailable, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes]) => Integer
GetDiskFreeSpaceExA([lpDirectoryName, lpFreeBytesAvailable, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes]) => Integer
GetDiskFreeSpaceExW([lpDirectoryName, lpFreeBytesAvailable, lpTotalNumberOfBytes, lpTotalNumberOfFreeBytes]) => Integer
GetDiskFreeSpaceW([lpRootPathName, lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters]) => Integer
GetDllDirectory([nBufferLength, lpBuffer]) => Integer
GetDllDirectoryA([nBufferLength, lpBuffer]) => Integer
GetDllDirectoryW([nBufferLength, lpBuffer]) => Integer
GetDriveType([lpRootPathName]) => Integer
GetDriveTypeA([lpRootPathName]) => Integer
GetDriveTypeW([lpRootPathName]) => Integer
GetDurationFormat([Locale, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration]) => Integer
GetDurationFormatEx([lpLocaleName, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration]) => Integer
GetDynamicTimeZoneInformation([pTimeZoneInformation]) => Integer
GetEnabledXStateFeatures() => Integer
GetEnvironmentStrings() => Integer
GetEnvironmentStringsA() => Integer
GetEnvironmentStringsW() => Integer
GetEnvironmentVariable([lpName, lpBuffer, nSize]) => Integer
GetEnvironmentVariableA([lpName, lpBuffer, nSize]) => Integer
GetEnvironmentVariableW([lpName, lpBuffer, nSize]) => Integer
GetErrorMode() => Integer
GetExitCodeProcess([hProcess, lpExitCode]) => Integer
GetExitCodeThread([hThread, lpExitCode]) => Integer
GetExpandedName([LPTSTR, LPTSTR]) => Integer
GetExpandedNameA([LPSTR, LPSTR]) => Integer
GetExpandedNameW([LPWSTR, LPWSTR]) => Integer
GetFileAttributes([lpFileName]) => Integer
GetFileAttributesA([lpFileName]) => Integer
GetFileAttributesEx([lpFileName, fInfoLevelId, lpFileInformation]) => Integer
GetFileAttributesExA([lpFileName, fInfoLevelId, lpFileInformation]) => Integer
GetFileAttributesExW([lpFileName, fInfoLevelId, lpFileInformation]) => Integer
GetFileAttributesTransacted([lpFileName, fInfoLevelId, lpFileInformation, hTransaction]) => Integer
GetFileAttributesTransactedA([lpFileName, fInfoLevelId, lpFileInformation, hTransaction]) => Integer
GetFileAttributesTransactedW([lpFileName, fInfoLevelId, lpFileInformation, hTransaction]) => Integer
GetFileAttributesW([lpFileName]) => Integer
GetFileBandwidthReservation([hFile, lpPeriodMilliseconds, lpBytesPerPeriod, pDiscardable, lpTransferSize, lpNumOutstandingRequests]) => Integer
GetFileInformationByHandle([hFile, lpFileInformation]) => Integer
GetFileInformationByHandleEx([hFile, FileInformationClass, lpFileInformation, dwBufferSize]) => Integer
GetFileMUIInfo([dwFlags, pcwszFilePath, pFileMUIInfo, pcbFileMUIInfo]) => Integer
GetFileMUIPath([dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator]) => Integer
GetFileSize([hFile, lpFileSizeHigh]) => Integer
GetFileSizeEx([hFile, lpFileSize]) => Integer
GetFileTime([hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime]) => Integer
GetFileType([hFile]) => Integer
GetFinalPathNameByHandle([hFile, lpszFilePath, cchFilePath, dwFlags]) => Integer
GetFinalPathNameByHandleA([hFile, lpszFilePath, cchFilePath, dwFlags]) => Integer
GetFinalPathNameByHandleW([hFile, lpszFilePath, cchFilePath, dwFlags]) => Integer
GetFirmwareEnvironmentVariable([lpName, lpGuid, pBuffer, nSize]) => Integer
GetFirmwareEnvironmentVariableA([lpName, lpGuid, pBuffer, nSize]) => Integer
GetFirmwareEnvironmentVariableW([lpName, lpGuid, pBuffer, nSize]) => Integer
GetFullPathName([lpFileName, nBufferLength, lpBuffer, lpFilePart]) => Integer
GetFullPathNameA([lpFileName, nBufferLength, lpBuffer, lpFilePart]) => Integer
GetFullPathNameTransacted([lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction]) => Integer
GetFullPathNameTransactedA([lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction]) => Integer
GetFullPathNameTransactedW([lpFileName, nBufferLength, lpBuffer, lpFilePart, hTransaction]) => Integer
GetFullPathNameW([lpFileName, nBufferLength, lpBuffer, lpFilePart]) => Integer
GetGeoInfo([Location, GeoType, lpGeoData, cchData, LangId]) => Integer
GetGeoInfoA([Location, GeoType, lpGeoData, cchData, LangId]) => Integer
GetGeoInfoW([Location, GeoType, lpGeoData, cchData, LangId]) => Integer
GetHandleInformation([hObject, lpdwFlags]) => Integer
GetLargePageMinimum() => Integer
GetLargestConsoleWindowSize([hConsoleOutput]) => Integer
GetLastError() => Integer
GetLocaleInfo([Locale, LCType, lpLCData, cchData]) => Integer
GetLocaleInfoA([Locale, LCType, lpLCData, cchData]) => Integer
GetLocaleInfoEx([lpLocaleName, LCType, lpLCData, cchData]) => Integer
GetLocaleInfoW([Locale, LCType, lpLCData, cchData]) => Integer
GetLocalTime([lpSystemTime]) => void
GetLogicalDrives() => Integer
GetLogicalDriveStrings([nBufferLength, lpBuffer]) => Integer
GetLogicalDriveStringsA([nBufferLength, lpBuffer]) => Integer
GetLogicalDriveStringsW([nBufferLength, lpBuffer]) => Integer
GetLogicalProcessorInformation([Buffer, ReturnLength]) => Integer
GetLogicalProcessorInformationEx([RelationshipType, Buffer, ReturnedLength]) => Integer
GetLongPathName([lpszShortPath, lpszLongPath, cchBuffer]) => Integer
GetLongPathNameA([lpszShortPath, lpszLongPath, cchBuffer]) => Integer
GetLongPathNameTransacted([lpszShortPath, lpszLongPath, cchBuffer, hTransaction]) => Integer
GetLongPathNameTransactedA([lpszShortPath, lpszLongPath, cchBuffer, hTransaction]) => Integer
GetLongPathNameTransactedW([lpszShortPath, lpszLongPath, cchBuffer, hTransaction]) => Integer
GetLongPathNameW([lpszShortPath, lpszLongPath, cchBuffer]) => Integer
GetMailslotInfo([hMailslot, lpMaxMessageSize, lpNextSize, lpMessageCount, lpReadTimeout]) => Integer
GetMaximumProcessorCount([GroupNumber]) => Integer
GetMaximumProcessorGroupCount() => Integer
GetModuleFileName([hModule, lpFilename, nSize]) => Integer
GetModuleFileNameA([hModule, lpFilename, nSize]) => Integer
GetModuleFileNameW([hModule, lpFilename, nSize]) => Integer
GetModuleHandle([lpModuleName]) => Integer
GetModuleHandleA([lpModuleName]) => Integer
GetModuleHandleEx([dwFlags, lpModuleName, phModule]) => Integer
GetModuleHandleExA([dwFlags, lpModuleName, phModule]) => Integer
GetModuleHandleExW([dwFlags, lpModuleName, phModule]) => Integer
GetModuleHandleW([lpModuleName]) => Integer
GetNamedPipeClientComputerName([Pipe, ClientComputerName, ClientComputerNameLength]) => Integer
GetNamedPipeClientComputerNameA([Pipe, ClientComputerName, ClientComputerNameLength]) => Integer
GetNamedPipeClientComputerNameW([Pipe, ClientComputerName, ClientComputerNameLength]) => Integer
GetNamedPipeClientProcessId([Pipe, ClientProcessId]) => Integer
GetNamedPipeClientSessionId([Pipe, ClientSessionId]) => Integer
GetNamedPipeHandleState([hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize]) => Integer
GetNamedPipeHandleStateA([hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize]) => Integer
GetNamedPipeHandleStateW([hNamedPipe, lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout, lpUserName, nMaxUserNameSize]) => Integer
GetNamedPipeInfo([hNamedPipe, lpFlags, lpOutBufferSize, lpInBufferSize, lpMaxInstances]) => Integer
GetNamedPipeServerProcessId([Pipe, ServerProcessId]) => Integer
GetNamedPipeServerSessionId([Pipe, ServerSessionId]) => Integer
GetNativeSystemInfo([lpSystemInfo]) => void
GetNLSVersion([Function, Locale, lpVersionInformation]) => Integer
GetNLSVersionEx([function, lpLocaleName, lpVersionInformation]) => Integer
GetNumaAvailableMemoryNode([Node, AvailableBytes]) => Integer
GetNumaAvailableMemoryNodeEx([Node, AvailableBytes]) => Integer
GetNumaHighestNodeNumber([HighestNodeNumber]) => Integer
GetNumaNodeNumberFromHandle([hFile, NodeNumber]) => Integer
GetNumaNodeProcessorMask([Node, ProcessorMask]) => Integer
GetNumaNodeProcessorMaskEx([Node, ProcessorMask]) => Integer
GetNumaProcessorNode([Processor, NodeNumber]) => Integer
GetNumaProcessorNodeEx([Processor, NodeNumber]) => Integer
GetNumaProximityNode([ProximityId, NodeNumber]) => Integer
GetNumaProximityNodeEx([ProximityId, NodeNumber]) => Integer
GetNumberFormat([Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber]) => Integer
GetNumberFormatA([Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber]) => Integer
GetNumberFormatEx([lpLocaleName, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber]) => Integer
GetNumberFormatW([Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber]) => Integer
GetNumberOfConsoleInputEvents([hConsoleInput, lpcNumberOfEvents]) => Integer
GetNumberOfConsoleMouseButtons([lpNumberOfMouseButtons]) => Integer
GetOEMCP() => Integer
GetOverlappedResult([hFile, lpOverlapped, lpNumberOfBytesTransferred, bWait]) => Integer
GetPhysicallyInstalledSystemMemory([TotalMemoryInKilobytes]) => Integer
GetPriorityClass([hProcess]) => Integer
GetPrivateProfileInt([lpAppName, lpKeyName, nDefault, lpFileName]) => Integer
GetPrivateProfileIntA([lpAppName, lpKeyName, nDefault, lpFileName]) => Integer
GetPrivateProfileIntW([lpAppName, lpKeyName, nDefault, lpFileName]) => Integer
GetPrivateProfileSection([lpAppName, lpReturnedString, nSize, lpFileName]) => Integer
GetPrivateProfileSectionA([lpAppName, lpReturnedString, nSize, lpFileName]) => Integer
GetPrivateProfileSectionNames([lpszReturnBuffer, nSize, lpFileName]) => Integer
GetPrivateProfileSectionNamesA([lpszReturnBuffer, nSize, lpFileName]) => Integer
GetPrivateProfileSectionNamesW([lpszReturnBuffer, nSize, lpFileName]) => Integer
GetPrivateProfileSectionW([lpAppName, lpReturnedString, nSize, lpFileName]) => Integer
GetPrivateProfileString([lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, lpFileName]) => Integer
GetPrivateProfileStringA([lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, lpFileName]) => Integer
GetPrivateProfileStringW([lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize, lpFileName]) => Integer
GetPrivateProfileStruct([lpszSection, lpszKey, lpStruct, uSizeStruct, szFile]) => Integer
GetPrivateProfileStructA([lpszSection, lpszKey, lpStruct, uSizeStruct, szFile]) => Integer
GetPrivateProfileStructW([lpszSection, lpszKey, lpStruct, uSizeStruct, szFile]) => Integer
GetProcAddress([hModule, lpProcName]) => Integer
GetProcessAffinityMask([hProcess, lpProcessAffinityMask, lpSystemAffinityMask]) => Integer
GetProcessDEPPolicy([hProcess, lpFlags, lpPermanent]) => Integer
GetProcessGroupAffinity([hProcess, GroupCount, GroupArray]) => Integer
GetProcessHandleCount([hProcess, pdwHandleCount]) => Integer
GetProcessHeap() => Integer
GetProcessHeaps([NumberOfHeaps, ProcessHeaps]) => Integer
GetProcessId([Process]) => Integer
GetProcessIdOfThread([Thread]) => Integer
GetProcessIoCounters([hProcess, lpIoCounters]) => Integer
GetProcessorSystemCycleTime([Group, Buffer, ReturnedLength]) => Integer
GetProcessPreferredUILanguages([dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer]) => Integer
GetProcessPriorityBoost([hProcess, pDisablePriorityBoost]) => Integer
GetProcessShutdownParameters([lpdwLevel, lpdwFlags]) => Integer
GetProcessTimes([hProcess, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime]) => Integer
GetProcessVersion([ProcessId]) => Integer
GetProcessWorkingSetSize([hProcess, lpMinimumWorkingSetSize, lpMaximumWorkingSetSize]) => Integer
GetProcessWorkingSetSizeEx([hProcess, lpMinimumWorkingSetSize, lpMaximumWorkingSetSize, Flags]) => Integer
GetProductInfo([dwOSMajorVersion, dwOSMinorVersion, dwSpMajorVersion, dwSpMinorVersion, pdwReturnedProductType]) => Integer
GetProfileInt([lpAppName, lpKeyName, nDefault]) => Integer
GetProfileIntA([lpAppName, lpKeyName, nDefault]) => Integer
GetProfileIntW([lpAppName, lpKeyName, nDefault]) => Integer
GetProfileSection([lpAppName, lpReturnedString, nSize]) => Integer
GetProfileSectionA([lpAppName, lpReturnedString, nSize]) => Integer
GetProfileSectionW([lpAppName, lpReturnedString, nSize]) => Integer
GetProfileString([lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize]) => Integer
GetProfileStringA([lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize]) => Integer
GetProfileStringW([lpAppName, lpKeyName, lpDefault, lpReturnedString, nSize]) => Integer
GetQueuedCompletionStatus([CompletionPort, lpNumberOfBytes, lpCompletionKey, lpOverlapped, dwMilliseconds]) => Integer
GetQueuedCompletionStatusEx([CompletionPort, lpCompletionPortEntries, ulCount, ulNumEntriesRemoved, dwMilliseconds, fAlertable]) => Integer
GetShortPathName([lpszLongPath, lpszShortPath, cchBuffer]) => Integer
GetShortPathNameA([lpszLongPath, lpszShortPath, cchBuffer]) => Integer
GetShortPathNameW([lpszLongPath, lpszShortPath, cchBuffer]) => Integer
GetStartupInfo([lpStartupInfo]) => void
GetStartupInfoA([lpStartupInfo]) => void
GetStartupInfoW([lpStartupInfo]) => void
GetStdHandle([nStdHandle]) => Integer
GetStringScripts([dwFlags, lpString, cchString, lpScripts, cchScripts]) => Integer
GetStringType([Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType]) => Integer
GetStringTypeA([Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType]) => Integer
GetStringTypeEx([Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType]) => Integer
GetStringTypeExA([Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType]) => Integer
GetStringTypeExW([Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType]) => Integer
GetStringTypeW([dwInfoType, lpSrcStr, cchSrc, lpCharType]) => Integer
GetSystemDefaultLangID() => Integer
GetSystemDefaultLCID() => Integer
GetSystemDefaultLocaleName([lpLocaleName, cchLocaleName]) => Integer
GetSystemDefaultUILanguage() => Integer
GetSystemDEPPolicy() => Integer
GetSystemDirectory([lpBuffer, uSize]) => Integer
GetSystemDirectoryA([lpBuffer, uSize]) => Integer
GetSystemDirectoryW([lpBuffer, uSize]) => Integer
GetSystemFileCacheSize([lpMinimumFileCacheSize, lpMaximumFileCacheSize, lpFlags]) => Integer
GetSystemFirmwareTable([FirmwareTableProviderSignature, FirmwareTableID, pFirmwareTableBuffer, BufferSize]) => Integer
GetSystemInfo([lpSystemInfo]) => void
GetSystemPowerStatus([lpSystemPowerStatus]) => Integer
GetSystemPreferredUILanguages([dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer]) => Integer
GetSystemRegistryQuota([pdwQuotaAllowed, pdwQuotaUsed]) => Integer
GetSystemTime([lpSystemTime]) => void
GetSystemTimeAdjustment([lpTimeAdjustment, lpTimeIncrement, lpTimeAdjustmentDisabled]) => Integer
GetSystemTimeAsFileTime([lpSystemTimeAsFileTime]) => void
GetSystemTimes([lpIdleTime, lpKernelTime, lpUserTime]) => Integer
GetSystemWindowsDirectory([lpBuffer, uSize]) => Integer
GetSystemWindowsDirectoryA([lpBuffer, uSize]) => Integer
GetSystemWindowsDirectoryW([lpBuffer, uSize]) => Integer
GetSystemWow64Directory([lpBuffer, uSize]) => Integer
GetSystemWow64DirectoryA([lpBuffer, uSize]) => Integer
GetSystemWow64DirectoryW([lpBuffer, uSize]) => Integer
GetTapeParameters([hDevice, dwOperation, lpdwSize, lpTapeInformation]) => Integer
GetTapePosition([hDevice, dwPositionType, lpdwPartition, lpdwOffsetLow, lpdwOffsetHigh]) => Integer
GetTapeStatus([hDevice]) => Integer
GetTempFileName([lpPathName, lpPrefixString, uUnique, lpTempFileName]) => Integer
GetTempFileNameA([lpPathName, lpPrefixString, uUnique, lpTempFileName]) => Integer
GetTempFileNameW([lpPathName, lpPrefixString, uUnique, lpTempFileName]) => Integer
GetTempPath([nBufferLength, lpBuffer]) => Integer
GetTempPathA([nBufferLength, lpBuffer]) => Integer
GetTempPathW([nBufferLength, lpBuffer]) => Integer
GetThreadContext([hThread, lpContext]) => Integer
GetThreadErrorMode() => Integer
GetThreadGroupAffinity([hThread, GroupAffinity]) => Integer
GetThreadId([Thread]) => Integer
GetThreadIdealProcessorEx([hThread, lpIdealProcessor]) => Integer
GetThreadIOPendingFlag([hThread, lpIOIsPending]) => Integer
GetThreadLocale() => Integer
GetThreadPreferredUILanguages([dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer]) => Integer
GetThreadPriority([hThread]) => Integer
GetThreadPriorityBoost([hThread, pDisablePriorityBoost]) => Integer
GetThreadSelectorEntry([hThread, dwSelector, lpSelectorEntry]) => Integer
GetThreadTimes([hThread, lpCreationTime, lpExitTime, lpKernelTime, lpUserTime]) => Integer
GetThreadUILanguage() => Integer
GetTickCount() => Integer
GetTickCount64() => Integer
GetTimeFormat([Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime]) => Integer
GetTimeFormatA([Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime]) => Integer
GetTimeFormatEx([lpLocaleName, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime]) => Integer
GetTimeFormatW([Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime]) => Integer
GetTimeZoneInformation([lpTimeZoneInformation]) => Integer
GetTimeZoneInformationForYear([wYear, pdtzi, ptzi]) => Integer
GetUILanguageInfo([dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pdwAttributes]) => Integer
GetUserDefaultLangID() => Integer
GetUserDefaultLCID() => Integer
GetUserDefaultLocaleName([lpLocaleName, cchLocaleName]) => Integer
GetUserDefaultUILanguage() => Integer
GetUserGeoID([GeoClass]) => Integer
GetUserPreferredUILanguages([dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer]) => Integer
GetVersion() => Integer
GetVersionEx([lpVersionInfo]) => Integer
GetVersionExA([lpVersionInfo]) => Integer
GetVersionExW([lpVersionInfo]) => Integer
GetVolumeInformation([lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize]) => Integer
GetVolumeInformationA([lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize]) => Integer
GetVolumeInformationByHandleW([hFile, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize]) => Integer
GetVolumeInformationW([lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize]) => Integer
GetVolumeNameForVolumeMountPoint([lpszVolumeMountPoint, lpszVolumeName, cchBufferLength]) => Integer
GetVolumeNameForVolumeMountPointA([lpszVolumeMountPoint, lpszVolumeName, cchBufferLength]) => Integer
GetVolumeNameForVolumeMountPointW([lpszVolumeMountPoint, lpszVolumeName, cchBufferLength]) => Integer
GetVolumePathName([lpszFileName, lpszVolumePathName, cchBufferLength]) => Integer
GetVolumePathNameA([lpszFileName, lpszVolumePathName, cchBufferLength]) => Integer
GetVolumePathNamesForVolumeName([lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength]) => Integer
GetVolumePathNamesForVolumeNameA([lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength]) => Integer
GetVolumePathNamesForVolumeNameW([lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength]) => Integer
GetVolumePathNameW([lpszFileName, lpszVolumePathName, cchBufferLength]) => Integer
GetWindowsDirectory([lpBuffer, uSize]) => Integer
GetWindowsDirectoryA([lpBuffer, uSize]) => Integer
GetWindowsDirectoryW([lpBuffer, uSize]) => Integer
GetWriteWatch([dwFlags, lpBaseAddress, dwRegionSize, lpAddresses, lpdwCount, lpdwGranularity]) => Integer
GetXStateFeaturesMask([Context, FeatureMask]) => Integer
GlobalAddAtom([lpString]) => Integer
GlobalAddAtomA([lpString]) => Integer
GlobalAddAtomW([lpString]) => Integer
GlobalAlloc([uFlags, dwBytes]) => Integer
GlobalCompact([dwMinFree]) => Integer
GlobalDeleteAtom([nAtom]) => Integer
GlobalFindAtom([lpString]) => Integer
GlobalFindAtomA([lpString]) => Integer
GlobalFindAtomW([lpString]) => Integer
GlobalFix([hMem]) => void
GlobalFlags([hMem]) => Integer
GlobalFree([hMem]) => Integer
GlobalGetAtomName([nAtom, lpBuffer, nSize]) => Integer
GlobalGetAtomNameA([nAtom, lpBuffer, nSize]) => Integer
GlobalGetAtomNameW([nAtom, lpBuffer, nSize]) => Integer
GlobalHandle([pMem]) => Integer
GlobalLock([hMem]) => Integer
GlobalMemoryStatus([lpBuffer]) => void
GlobalMemoryStatusEx([lpBuffer]) => Integer
GlobalReAlloc([hMem, dwBytes, uFlags]) => Integer
GlobalSize([hMem]) => Integer
GlobalUnfix([hMem]) => void
GlobalUnlock([hMem]) => Integer
GlobalUnWire([hMem]) => Integer
GlobalWire([hMem]) => Integer
Heap32First([lphe, th32ProcessID, th32HeapID]) => Integer
Heap32ListFirst([hSnapshot, lphl]) => Integer
Heap32ListNext([hSnapshot, lphl]) => Integer
Heap32Next([lphe]) => Integer
HeapAlloc([hHeap, dwFlags, dwBytes]) => Integer
HeapCompact([hHeap, dwFlags]) => Integer
HeapCreate([flOptions, dwInitialSize, dwMaximumSize]) => Integer
HeapDestroy([hHeap]) => Integer
HeapFree([hHeap, dwFlags, lpMem]) => Integer
HeapLock([hHeap]) => Integer
HeapQueryInformation([HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength, ReturnLength]) => Integer
HeapReAlloc([hHeap, dwFlags, lpMem, dwBytes]) => Integer
HeapSetInformation([HeapHandle, HeapInformationClass, HeapInformation, HeapInformationLength]) => Integer
HeapSize([hHeap, dwFlags, lpMem]) => Integer
HeapUnlock([hHeap]) => Integer
HeapValidate([hHeap, dwFlags, lpMem]) => Integer
HeapWalk([hHeap, lpEntry]) => Integer
IdnToAscii([dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar]) => Integer
IdnToNameprepUnicode([dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpNameprepCharStr, cchNameprepChar]) => Integer
IdnToUnicode([dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar]) => Integer
InitAtomTable([nSize]) => Integer
InitializeConditionVariable([ConditionVariable]) => void
InitializeContext([Buffer, ContextFlags, Context, ContextLength]) => Integer
InitializeCriticalSection([lpCriticalSection]) => void
InitializeCriticalSectionAndSpinCount([lpCriticalSection, dwSpinCount]) => Integer
InitializeCriticalSectionEx([lpCriticalSection, dwSpinCount, Flags]) => Integer
InitializeProcThreadAttributeList([lpAttributeList, dwAttributeCount, dwFlags, lpSize]) => Integer
InitializeSListHead([ListHead]) => void
InitializeSRWLock([SRWLock]) => void
InitOnceBeginInitialize([lpInitOnce, dwFlags, fPending, lpContext]) => Integer
InitOnceComplete([lpInitOnce, dwFlags, lpContext]) => Integer
InitOnceExecuteOnce([InitOnce, InitFn, Parameter, Context]) => Integer
InitOnceInitialize([InitOnce]) => void
InterlockedCompareExchange([Destination, Exchange, Comparand]) => Integer
InterlockedCompareExchange64([Destination, Exchange, Comparand]) => Integer
InterlockedDecrement([Addend]) => Integer
InterlockedExchange([Target, Value]) => Integer
InterlockedExchangeAdd([Addend, Value]) => Integer
InterlockedFlushSList([ListHead]) => Integer
InterlockedIncrement([Addend]) => Integer
InterlockedPopEntrySList([ListHead]) => Integer
InterlockedPushEntrySList([ListHead, ListEntry]) => Integer
InterlockedPushListSList([ListHead, List, ListEnd, Count]) => Integer
IsBadCodePtr([lpfn]) => Integer
IsBadHugeReadPtr([lp, ucb]) => Integer
IsBadHugeWritePtr([lp, ucb]) => Integer
IsBadReadPtr([lp, ucb]) => Integer
IsBadStringPtr([lpsz, ucchMax]) => Integer
IsBadStringPtrA([lpsz, ucchMax]) => Integer
IsBadStringPtrW([lpsz, ucchMax]) => Integer
IsBadWritePtr([lp, ucb]) => Integer
IsCalendarLeapYear([calId, year, era]) => Integer
IsDBCSLeadByte([TestChar]) => Integer
IsDBCSLeadByteEx([CodePage, TestChar]) => Integer
IsDebuggerPresent() => Integer
IsNLSDefinedString([Function, dwFlags, lpVersionInformation, lpString, cchStr]) => Integer
IsNormalizedString([NormForm, lpString, cwLength]) => Integer
IsProcessInJob([ProcessHandle, JobHandle, Result]) => Integer
IsProcessorFeaturePresent([ProcessorFeature]) => Integer
IsSystemResumeAutomatic() => Integer
IsThreadAFiber() => Integer
IsThreadpoolTimerSet([pti]) => Integer
IsValidCodePage([CodePage]) => Integer
IsValidLanguageGroup([LanguageGroup, dwFlags]) => Integer
IsValidLocale([Locale, dwFlags]) => Integer
IsValidLocaleName([lpLocaleName]) => Integer
IsWow64Process([hProcess, Wow64Process]) => Integer
LCIDToLocaleName([Locale, lpName, cchName, dwFlags]) => Integer
LCMapString([Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest]) => Integer
LCMapStringA([Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest]) => Integer
LCMapStringEx([lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, sortHandle]) => Integer
LCMapStringW([Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest]) => Integer
LeaveCriticalSection([lpCriticalSection]) => void
LeaveCriticalSectionWhenCallbackReturns([pci, pcs]) => void
LoadLibrary([lpFileName]) => Integer
LoadLibraryA([lpFileName]) => Integer
LoadLibraryEx([lpFileName, hFile, dwFlags]) => Integer
LoadLibraryExA([lpFileName, hFile, dwFlags]) => Integer
LoadLibraryExW([lpFileName, hFile, dwFlags]) => Integer
LoadLibraryW([lpFileName]) => Integer
LoadModule([lpModuleName, lpParameterBlock]) => Integer
LoadResource([hModule, hResInfo]) => Integer
LoadStringByReference([Flags, Language, SourceString, Buffer, cchBuffer, Directory, pcchBufferOut]) => Integer
LocalAlloc([uFlags, uBytes]) => Integer
LocalCompact([uMinFree]) => Integer
LocaleNameToLCID([lpName, dwFlags]) => Integer
LocalFileTimeToFileTime([lpLocalFileTime, lpFileTime]) => Integer
LocalFlags([hMem]) => Integer
LocalFree([hMem]) => Integer
LocalHandle([pMem]) => Integer
LocalLock([hMem]) => Integer
LocalReAlloc([hMem, uBytes, uFlags]) => Integer
LocalShrink([hMem, cbNewSize]) => Integer
LocalSize([hMem]) => Integer
LocalUnlock([hMem]) => Integer
LocateXStateFeature([Context, FeatureId, Length]) => Integer
LockFile([hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh]) => Integer
LockFileEx([hFile, dwFlags, dwReserved, nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh, lpOverlapped]) => Integer
LockResource([hResData]) => Integer
lstrcat([lpString1, lpString2]) => String
lstrcatA([lpString1, lpString2]) => String
lstrcatW([lpString1, lpString2]) => String
lstrcmp([lpString1, lpString2]) => Integer
lstrcmpA([lpString1, lpString2]) => Integer
lstrcmpi([lpString1, lpString2]) => Integer
lstrcmpiA([lpString1, lpString2]) => Integer
lstrcmpiW([lpString1, lpString2]) => Integer
lstrcmpW([lpString1, lpString2]) => Integer
lstrcpy([lpString1, lpString2]) => String
lstrcpyA([lpString1, lpString2]) => String
lstrcpyn([lpString1, lpString2, iMaxLength]) => String
lstrcpynA([lpString1, lpString2, iMaxLength]) => String
lstrcpynW([lpString1, lpString2, iMaxLength]) => String
lstrcpyW([lpString1, lpString2]) => String
lstrlen([lpString]) => Integer
lstrlenA([lpString]) => Integer
lstrlenW([lpString]) => Integer
LZClose([INT]) => void
LZCopy([INT, INT]) => Integer
LZDone() => Integer
LZInit([INT]) => Integer
LZOpenFile([LPTSTR, LPOFSTRUCT, WORD]) => Integer
LZOpenFileA([LPSTR, LPOFSTRUCT, WORD]) => Integer
LZOpenFileW([LPWSTR, LPOFSTRUCT, WORD]) => Integer
LZRead([INT, LPSTR, INT]) => Integer
LZSeek([INT, LONG, INT]) => Integer
LZStart() => Integer
MapUserPhysicalPages([lpAddress, NumberOfPages, UserPfnArray]) => Integer
MapUserPhysicalPagesScatter([VirtualAddresses, NumberOfPages, PageArray]) => Integer
MapViewOfFile([hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap]) => Integer
MapViewOfFileEx([hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress]) => Integer
MapViewOfFileExNuma([hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress, nndPreferred]) => Integer
Module32First([hSnapshot, lpme]) => Integer
Module32FirstW([hSnapshot, lpme]) => Integer
Module32Next([hSnapshot, lpme]) => Integer
Module32NextW([hSnapshot, lpme]) => Integer
MoveFile([lpExistingFileName, lpNewFileName]) => Integer
MoveFileA([lpExistingFileName, lpNewFileName]) => Integer
MoveFileEx([lpExistingFileName, lpNewFileName, dwFlags]) => Integer
MoveFileExA([lpExistingFileName, lpNewFileName, dwFlags]) => Integer
MoveFileExW([lpExistingFileName, lpNewFileName, dwFlags]) => Integer
MoveFileTransacted([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction]) => Integer
MoveFileTransactedA([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction]) => Integer
MoveFileTransactedW([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags, hTransaction]) => Integer
MoveFileW([lpExistingFileName, lpNewFileName]) => Integer
MoveFileWithProgress([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags]) => Integer
MoveFileWithProgressA([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags]) => Integer
MoveFileWithProgressW([lpExistingFileName, lpNewFileName, lpProgressRoutine, lpData, dwFlags]) => Integer
MulDiv([nNumber, nNumerator, nDenominator]) => Integer
MultiByteToWideChar([CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar]) => Integer
NeedCurrentDirectoryForExePath([ExeName]) => Integer
NeedCurrentDirectoryForExePathA([ExeName]) => Integer
NeedCurrentDirectoryForExePathW([ExeName]) => Integer
NotifyUILanguageChange([dwFlags, pcwstrNewLanguage, pcwstrPreviousLanguage, dwReserved, pdwStatusRtrn]) => Integer
OpenEvent([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenEventA([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenEventW([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenFile([lpFileName, lpReOpenBuff, uStyle]) => Integer
OpenFileById([hFile, lpFileID, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlags]) => Integer
OpenFileMapping([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenFileMappingA([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenFileMappingW([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenJobObject([dwDesiredAccess, bInheritHandles, lpName]) => Integer
OpenJobObjectA([dwDesiredAccess, bInheritHandles, lpName]) => Integer
OpenJobObjectW([dwDesiredAccess, bInheritHandles, lpName]) => Integer
OpenMutex([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenMutexA([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenMutexW([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenPrivateNamespace([lpBoundaryDescriptor, lpAliasPrefix]) => Integer
OpenPrivateNamespaceA([lpBoundaryDescriptor, lpAliasPrefix]) => Integer
OpenPrivateNamespaceW([lpBoundaryDescriptor, lpAliasPrefix]) => Integer
OpenProcess([dwDesiredAccess, bInheritHandle, dwProcessId]) => Integer
OpenSemaphore([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenSemaphoreA([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenSemaphoreW([dwDesiredAccess, bInheritHandle, lpName]) => Integer
OpenThread([dwDesiredAccess, bInheritHandle, dwThreadId]) => Integer
OpenWaitableTimer([dwDesiredAccess, bInheritHandle, lpTimerName]) => Integer
OpenWaitableTimerA([dwDesiredAccess, bInheritHandle, lpTimerName]) => Integer
OpenWaitableTimerW([dwDesiredAccess, bInheritHandle, lpTimerName]) => Integer
OutputDebugString([lpOutputString]) => void
OutputDebugStringA([lpOutputString]) => void
OutputDebugStringW([lpOutputString]) => void
PeekConsoleInput([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead]) => Integer
PeekConsoleInputA([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead]) => Integer
PeekConsoleInputW([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead]) => Integer
PeekNamedPipe([hNamedPipe, lpBuffer, nBufferSize, lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage]) => Integer
PostQueuedCompletionStatus([CompletionPort, dwNumberOfBytesTransferred, dwCompletionKey, lpOverlapped]) => Integer
PowerClearRequest([PowerRequest, RequestType]) => Integer
PowerCreateRequest([Context]) => Integer
PowerSetRequest([PowerRequest, RequestType]) => Integer
PrepareTape([hDevice, dwOperation, bImmediate]) => Integer
Process32First([hSnapshot, lppe]) => Integer
Process32FirstW([hSnapshot, lppe]) => Integer
Process32Next([hSnapshot, lppe]) => Integer
Process32NextW([hSnapshot, lppe]) => Integer
ProcessIdToSessionId([dwProcessId, pSessionId]) => Integer
PulseEvent([hEvent]) => Integer
PurgeComm([hFile, dwFlags]) => Integer
QueryActCtxSettingsW([dwFlags, hActCtx, settingsNameSpace, settingName, pvBuffer, dwBuffer, pdwWrittenOrRequired]) => Integer
QueryActCtxW([dwFlags, hActCtx, pvSubInstance, ulInfoClass, pvBuffer, cbBuffer, pcbWrittenOrRequired]) => Integer
QueryDepthSList([ListHead]) => Integer
QueryDosDevice([lpDeviceName, lpTargetPath, ucchMax]) => Integer
QueryDosDeviceA([lpDeviceName, lpTargetPath, ucchMax]) => Integer
QueryDosDeviceW([lpDeviceName, lpTargetPath, ucchMax]) => Integer
QueryFullProcessImageName([hProcess, dwFlags, lpExeName, lpdwSize]) => Integer
QueryFullProcessImageNameA([hProcess, dwFlags, lpExeName, lpdwSize]) => Integer
QueryFullProcessImageNameW([hProcess, dwFlags, lpExeName, lpdwSize]) => Integer
QueryIdleProcessorCycleTime([BufferLength, ProcessorIdleCycleTime]) => Integer
QueryIdleProcessorCycleTimeEx([Group, BufferLength, ProcessorIdleCycleTime]) => Integer
QueryInformationJobObject([hJob, JobObjectInfoClass, lpJobObjectInfo, cbJobObjectInfoLength, lpReturnLength]) => Integer
QueryMemoryResourceNotification([ResourceNotificationHandle, ResourceState]) => Integer
QueryPerformanceCounter([lpPerformanceCount]) => Integer
QueryPerformanceFrequency([lpFrequency]) => Integer
QueryProcessAffinityUpdateMode([ProcessHandle, lpdwFlags]) => Integer
QueryProcessCycleTime([ProcessHandle, CycleTime]) => Integer
QueryThreadCycleTime([ThreadHandle, CycleTime]) => Integer
QueryThreadpoolStackInformation([ptpp, ptpsi]) => Integer
QueryThreadProfiling([ThreadHandle, Enabled]) => Integer
QueryUnbiasedInterruptTime([UnbiasedTime]) => Integer
QueueUserAPC([pfnAPC, hThread, dwData]) => Integer
QueueUserWorkItem([Function, Context, Flags]) => Integer
RaiseException([dwExceptionCode, dwExceptionFlags, nNumberOfArguments, lpArguments]) => void
RaiseFailFastException([pExceptionRecord, pContextRecord, dwFlags]) => void
ReadConsole([hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl]) => Integer
ReadConsoleA([hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl]) => Integer
ReadConsoleInput([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead]) => Integer
ReadConsoleInputA([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead]) => Integer
ReadConsoleInputW([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead]) => Integer
ReadConsoleOutput([hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion]) => Integer
ReadConsoleOutputA([hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion]) => Integer
ReadConsoleOutputAttribute([hConsoleOutput, lpAttribute, nLength, dwReadCoord, lpNumberOfAttrsRead]) => Integer
ReadConsoleOutputCharacter([hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead]) => Integer
ReadConsoleOutputCharacterA([hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead]) => Integer
ReadConsoleOutputCharacterW([hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead]) => Integer
ReadConsoleOutputW([hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion]) => Integer
ReadConsoleW([hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl]) => Integer
ReadDirectoryChangesW([hDirectory, lpBuffer, nBufferLength, bWatchSubtree, dwNotifyFilter, lpBytesReturned, lpOverlapped, lpCompletionRoutine]) => Integer
ReadFile([hFile, lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, lpOverlapped]) => Integer
ReadFileEx([hFile, lpBuffer, nNumberOfBytesToRead, lpOverlapped, lpCompletionRoutine]) => Integer
ReadFileScatter([hFile, aSegmentArray, nNumberOfBytesToRead, lpReserved, lpOverlapped]) => Integer
ReadProcessMemory([hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesRead]) => Integer
ReadThreadProfilingData([PerformanceDataHandle, Flags, PerformanceData]) => Integer
RegisterApplicationRecoveryCallback([pRecoveryCallback, pvParameter, dwPingInterval, dwFlags]) => Integer
RegisterApplicationRestart([pwzCommandline, dwFlags]) => Integer
RegisterWaitForSingleObject([phNewWaitObject, hObject, Callback, Context, dwMilliseconds, dwFlags]) => Integer
RegisterWaitForSingleObjectEx([hObject, Callback, Context, dwMilliseconds, dwFlags]) => Integer
ReleaseActCtx([hActCtx]) => void
ReleaseMutex([hMutex]) => Integer
ReleaseMutexWhenCallbackReturns([pci, mut]) => void
ReleaseSemaphore([hSemaphore, lReleaseCount, lpPreviousCount]) => Integer
ReleaseSemaphoreWhenCallbackReturns([pci, sem, crel]) => void
ReleaseSRWLockExclusive([SRWLock]) => void
ReleaseSRWLockShared([SRWLock]) => void
RemoveDirectory([lpPathName]) => Integer
RemoveDirectoryA([lpPathName]) => Integer
RemoveDirectoryTransacted([lpPathName, hTransaction]) => Integer
RemoveDirectoryTransactedA([lpPathName, hTransaction]) => Integer
RemoveDirectoryTransactedW([lpPathName, hTransaction]) => Integer
RemoveDirectoryW([lpPathName]) => Integer
RemoveDllDirectory([Cookie]) => Integer
RemoveSecureMemoryCacheCallback([pfnCallBack]) => Integer
RemoveVectoredContinueHandler([Handler]) => Integer
RemoveVectoredExceptionHandler([Handler]) => Integer
ReOpenFile([hOriginalFile, dwDesiredAccess, dwShareMode, dwFlags]) => Integer
ReplaceFile([lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved]) => Integer
ReplaceFileA([lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved]) => Integer
ReplaceFileW([lpReplacedFileName, lpReplacementFileName, lpBackupFileName, dwReplaceFlags, lpExclude, lpReserved]) => Integer
RequestDeviceWakeup([hDevice]) => Integer
RequestWakeupLatency([latency]) => Integer
ResetEvent([hEvent]) => Integer
ResetWriteWatch([lpBaseAddress, dwRegionSize]) => Integer
ResolveLocaleName([lpNameToResolve, lpLocaleName, cchLocaleName]) => Integer
RestoreLastError([dwErrCode]) => void
ResumeThread([hThread]) => Integer
RtlCaptureContext([ContextRecord]) => void
RtlFillMemory([Destination, Length, Fill]) => void
RtlIsValidLocaleName([LocaleName, Flags]) => Integer
RtlMoveMemory([Destination, Source, Length]) => void
RtlPcToFileHeader([PcValue, BaseOfImage]) => Integer
RtlUnwind([TargetFrame, TargetIp, ExceptionRecord, ReturnValue]) => void
RtlZeroMemory([Destination, Length]) => void
ScrollConsoleScreenBuffer([hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill]) => Integer
ScrollConsoleScreenBufferA([hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill]) => Integer
ScrollConsoleScreenBufferW([hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill]) => Integer
SearchPath([lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart]) => Integer
SearchPathA([lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart]) => Integer
SearchPathW([lpPath, lpFileName, lpExtension, nBufferLength, lpBuffer, lpFilePart]) => Integer
SetCalendarInfo([Locale, Calendar, CalType, lpCalData]) => Integer
SetCalendarInfoA([Locale, Calendar, CalType, lpCalData]) => Integer
SetCalendarInfoW([Locale, Calendar, CalType, lpCalData]) => Integer
SetCommBreak([hFile]) => Integer
SetCommConfig([hCommDev, lpCC, dwSize]) => Integer
SetCommMask([hFile, dwEvtMask]) => Integer
SetCommState([hFile, lpDCB]) => Integer
SetCommTimeouts([hFile, lpCommTimeouts]) => Integer
SetComputerName([lpComputerName]) => Integer
SetComputerNameA([lpComputerName]) => Integer
SetComputerNameEx([NameType, lpBuffer]) => Integer
SetComputerNameExA([NameType, lpBuffer]) => Integer
SetComputerNameExW([NameType, lpBuffer]) => Integer
SetComputerNameW([lpComputerName]) => Integer
SetConsoleActiveScreenBuffer([hConsoleOutput]) => Integer
SetConsoleCP([wCodePageID]) => Integer
SetConsoleCtrlHandler([HandlerRoutine, Add]) => Integer
SetConsoleCursorInfo([hConsoleOutput, lpConsoleCursorInfo]) => Integer
SetConsoleCursorPosition([hConsoleOutput, dwCursorPosition]) => Integer
SetConsoleDisplayMode([hConsoleOutput, dwFlags, lpNewScreenBufferDimensions]) => Integer
SetConsoleHistoryInfo([lpConsoleHistoryInfo]) => Integer
SetConsoleMode([hConsoleHandle, dwMode]) => Integer
SetConsoleOutputCP([wCodePageID]) => Integer
SetConsoleScreenBufferInfoEx([hConsoleOutput, lpConsoleScreenBufferInfoEx]) => Integer
SetConsoleScreenBufferSize([hConsoleOutput, dwSize]) => Integer
SetConsoleTextAttribute([hConsoleOutput, wAttributes]) => Integer
SetConsoleTitle([lpConsoleTitle]) => Integer
SetConsoleTitleA([lpConsoleTitle]) => Integer
SetConsoleTitleW([lpConsoleTitle]) => Integer
SetConsoleWindowInfo([hConsoleOutput, bAbsolute, lpConsoleWindow]) => Integer
SetCriticalSectionSpinCount([lpCriticalSection, dwSpinCount]) => Integer
SetCurrentConsoleFontEx([hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx]) => Integer
SetCurrentDirectory([lpPathName]) => Integer
SetCurrentDirectoryA([lpPathName]) => Integer
SetCurrentDirectoryW([lpPathName]) => Integer
SetDefaultCommConfig([lpszName, lpCC, dwSize]) => Integer
SetDefaultCommConfigA([lpszName, lpCC, dwSize]) => Integer
SetDefaultCommConfigW([lpszName, lpCC, dwSize]) => Integer
SetDefaultDllDirectories([DirectoryFlags]) => Integer
SetDllDirectory([lpPathName]) => Integer
SetDllDirectoryA([lpPathName]) => Integer
SetDllDirectoryW([lpPathName]) => Integer
SetDynamicTimeZoneInformation([lpTimeZoneInformation]) => Integer
SetEndOfFile([hFile]) => Integer
SetEnvironmentVariable([lpName, lpValue]) => Integer
SetEnvironmentVariableA([lpName, lpValue]) => Integer
SetEnvironmentVariableW([lpName, lpValue]) => Integer
SetErrorMode([uMode]) => Integer
SetEvent([hEvent]) => Integer
SetEventWhenCallbackReturns([pci, evt]) => void
SetFileApisToANSI() => Integer
SetFileApisToOEM() => Integer
SetFileAttributes([lpFileName, dwFileAttributes]) => Integer
SetFileAttributesA([lpFileName, dwFileAttributes]) => Integer
SetFileAttributesTransacted([lpFileName, dwFileAttributes, hTransaction]) => Integer
SetFileAttributesTransactedA([lpFileName, dwFileAttributes, hTransaction]) => Integer
SetFileAttributesTransactedW([lpFileName, dwFileAttributes, hTransaction]) => Integer
SetFileAttributesW([lpFileName, dwFileAttributes]) => Integer
SetFileBandwidthReservation([hFile, nPeriodMilliseconds, nBytesPerPeriod, bDiscardable, lpTransferSize, lpNumOutstandingRequests]) => Integer
SetFileCompletionNotificationModes([FileHandle, Flags]) => Integer
SetFileInformationByHandle([hFile, FileInformationClass, lpFileInformation, dwBufferSize]) => Integer
SetFileIoOverlappedRange([FileHandle, OverlappedRangeStart, Length]) => Integer
SetFilePointer([hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod]) => Integer
SetFilePointerEx([hFile, liDistanceToMove, lpNewFilePointer, dwMoveMethod]) => Integer
SetFileShortName([hFile, lpShortName]) => Integer
SetFileShortNameA([hFile, lpShortName]) => Integer
SetFileShortNameW([hFile, lpShortName]) => Integer
SetFileTime([hFile, lpCreationTime, lpLastAccessTime, lpLastWriteTime]) => Integer
SetFileValidData([hFile, ValidDataLength]) => Integer
SetFirmwareEnvironmentVariable([lpName, lpGuid, pBuffer, nSize]) => Integer
SetFirmwareEnvironmentVariableA([lpName, lpGuid, pBuffer, nSize]) => Integer
SetFirmwareEnvironmentVariableW([lpName, lpGuid, pBuffer, nSize]) => Integer
SetHandleCount([uNumber]) => Integer
SetHandleInformation([hObject, dwMask, dwFlags]) => Integer
SetInformationJobObject([hJob, JobObjectInfoClass, lpJobObjectInfo, cbJobObjectInfoLength]) => Integer
SetLastError([dwErrCode]) => void
SetLocaleInfo([Locale, LCType, lpLCData]) => Integer
SetLocaleInfoA([Locale, LCType, lpLCData]) => Integer
SetLocaleInfoW([Locale, LCType, lpLCData]) => Integer
SetLocalTime([lpSystemTime]) => Integer
SetMailslotInfo([hMailslot, lReadTimeout]) => Integer
SetMessageWaitingIndicator([hMsgIndicator, ulMsgCount]) => Integer
SetNamedPipeHandleState([hNamedPipe, lpMode, lpMaxCollectionCount, lpCollectDataTimeout]) => Integer
SetPriorityClass([hProcess, dwPriorityClass]) => Integer
SetProcessAffinityMask([hProcess, dwProcessAffinityMask]) => Integer
SetProcessAffinityUpdateMode([ProcessHandle, dwFlags]) => Integer
SetProcessDEPPolicy([dwFlags]) => Integer
SetProcessPreferredUILanguages([dwFlags, pwszLanguagesBuffer, pulNumLanguages]) => Integer
SetProcessPriorityBoost([hProcess, DisablePriorityBoost]) => Integer
SetProcessShutdownParameters([dwLevel, dwFlags]) => Integer
SetProcessWorkingSetSize([hProcess, dwMinimumWorkingSetSize, dwMaximumWorkingSetSize]) => Integer
SetProcessWorkingSetSizeEx([hProcess, dwMinimumWorkingSetSize, dwMaximumWorkingSetSize, Flags]) => Integer
SetSearchPathMode([Flags]) => Integer
SetStdHandle([nStdHandle, hHandle]) => Integer
SetSystemFileCacheSize([MinimumFileCacheSize, MaximumFileCacheSize, Flags]) => Integer
SetSystemPowerState([fSuspend, fForce]) => Integer
SetSystemTime([lpSystemTime]) => Integer
SetSystemTimeAdjustment([dwTimeAdjustment, bTimeAdjustmentDisabled]) => Integer
SetTapeParameters([hDevice, dwOperation, lpTapeInformation]) => Integer
SetTapePosition([hDevice, dwPositionMethod, dwPartition, dwOffsetLow, dwOffsetHigh, bImmediate]) => Integer
SetThreadAffinityMask([hThread, dwThreadAffinityMask]) => Integer
SetThreadContext([hThread, lpContext]) => Integer
SetThreadErrorMode([dwNewMode, lpOldMode]) => Integer
SetThreadExecutionState([esFlags]) => Integer
SetThreadGroupAffinity([hThread, GroupAffinity, PreviousGroupAffinity]) => Integer
SetThreadIdealProcessor([hThread, dwIdealProcessor]) => Integer
SetThreadIdealProcessorEx([hThread, lpIdealProcessor, lpPreviousIdealProcessor]) => Integer
SetThreadLocale([Locale]) => Integer
SetThreadpoolStackInformation([ptpp, ptpsi]) => Integer
SetThreadpoolThreadMaximum([ptpp, cthrdMost]) => void
SetThreadpoolThreadMinimum([ptpp, cthrdMic]) => Integer
SetThreadpoolTimer([pti, pftDueTime, msPeriod, msWindowLength]) => void
SetThreadpoolWait([pwa, h, pftTimeout]) => void
SetThreadPreferredUILanguages([dwFlags, pwszLanguagesBuffer, pulNumLanguages]) => Integer
SetThreadPriority([hThread, nPriority]) => Integer
SetThreadPriorityBoost([hThread, DisablePriorityBoost]) => Integer
SetThreadStackGuarantee([StackSizeInBytes]) => Integer
SetThreadUILanguage([LangId]) => Integer
SetTimerQueueTimer([TimerQueue, Callback, Parameter, DueTime, Period, PreferIo]) => Integer
SetTimeZoneInformation([lpTimeZoneInformation]) => Integer
SetUnhandledExceptionFilter([lpTopLevelExceptionFilter]) => Integer
SetupComm([hFile, dwInQueue, dwOutQueue]) => Integer
SetUserGeoID([GeoId]) => Integer
SetVolumeLabel([lpRootPathName, lpVolumeName]) => Integer
SetVolumeLabelA([lpRootPathName, lpVolumeName]) => Integer
SetVolumeLabelW([lpRootPathName, lpVolumeName]) => Integer
SetVolumeMountPoint([lpszVolumeMountPoint, lpszVolumeName]) => Integer
SetVolumeMountPointA([lpszVolumeMountPoint, lpszVolumeName]) => Integer
SetVolumeMountPointW([lpszVolumeMountPoint, lpszVolumeName]) => Integer
SetWaitableTimer([hTimer, pDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, fResume]) => Integer
SetWaitableTimerEx([hTimer, lpDueTime, lPeriod, pfnCompletionRoutine, lpArgToCompletionRoutine, WakeContext, TolerableDelay]) => Integer
SetXStateFeaturesMask([Context, FeatureMask]) => Integer
SignalObjectAndWait([hObjectToSignal, hObjectToWaitOn, dwMilliseconds, bAlertable]) => Integer
SizeofResource([hModule, hResInfo]) => Integer
Sleep_([dwMilliseconds]) => void
SleepConditionVariableCS([ConditionVariable, CriticalSection, dwMilliseconds]) => Integer
SleepConditionVariableSRW([ConditionVariable, SRWLock, dwMilliseconds, Flags]) => Integer
SleepEx([dwMilliseconds, bAlertable]) => Integer
StartThreadpoolIo([pio]) => void
SubmitThreadpoolWork([pwk]) => void
SuspendThread([hThread]) => Integer
SwitchToFiber([lpFiber]) => void
SwitchToThread() => Integer
SystemTimeToFileTime([lpSystemTime, lpFileTime]) => Integer
SystemTimeToTzSpecificLocalTime([lpTimeZone, lpUniversalTime, lpLocalTime]) => Integer
SystemTimeToTzSpecificLocalTimeEx([lpTimeZoneInformation, lpUniversalTime, lpLocalTime]) => Integer
TerminateJobObject([hJob, uExitCode]) => Integer
TerminateProcess([hProcess, uExitCode]) => Integer
TerminateThread([hThread, dwExitCode]) => Integer
Thread32First([hSnapshot, lpte]) => Integer
Thread32Next([hSnapshot, lpte]) => Integer
TlsAlloc() => Integer
TlsFree([dwTlsIndex]) => Integer
TlsGetValue([dwTlsIndex]) => Integer
TlsSetValue([dwTlsIndex, lpTlsValue]) => Integer
Toolhelp32ReadProcessMemory([th32ProcessID, lpBaseAddress, lpBuffer, cbRead, lpNumberOfBytesRead]) => Integer
TransactNamedPipe([hNamedPipe, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesRead, lpOverlapped]) => Integer
TransmitCommChar([hFile, cChar]) => Integer
TryAcquireSRWLockExclusive([SRWLock]) => Integer
TryAcquireSRWLockShared([SRWLock]) => Integer
TryEnterCriticalSection([lpCriticalSection]) => Integer
TrySubmitThreadpoolCallback([pfns, pv, pcbe]) => Integer
TzSpecificLocalTimeToSystemTime([lpTimeZoneInformation, lpLocalTime, lpUniversalTime]) => Integer
TzSpecificLocalTimeToSystemTimeEx([lpTimeZoneInformation, lpLocalTime, lpUniversalTime]) => Integer
UnhandledExceptionFilter([ExceptionInfo]) => Integer
UnlockFile([hFile, dwFileOffsetLow, dwFileOffsetHigh, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh]) => Integer
UnlockFileEx([hFile, dwReserved, nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh, lpOverlapped]) => Integer
UnmapViewOfFile([lpBaseAddress]) => Integer
UnregisterApplicationRecoveryCallback() => Integer
UnregisterApplicationRestart() => Integer
UnregisterWait([WaitHandle]) => Integer
UnregisterWaitEx([WaitHandle, CompletionEvent]) => Integer
UpdateCalendarDayOfWeek([lpCalDateTime]) => Integer
UpdateProcThreadAttribute([lpAttributeList, dwFlags, Attribute, lpValue, cbSize, lpPreviousValue, lpReturnSize]) => Integer
UpdateResource([hUpdate, lpType, lpName, wLanguage, lpData, cbData]) => Integer
UpdateResourceA([hUpdate, lpType, lpName, wLanguage, lpData, cbData]) => Integer
UpdateResourceW([hUpdate, lpType, lpName, wLanguage, lpData, cbData]) => Integer
VerifyScripts([dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts]) => Integer
VerifyVersionInfo([lpVersionInfo, dwTypeMask, dwlConditionMask]) => Integer
VerifyVersionInfoA([lpVersionInfo, dwTypeMask, dwlConditionMask]) => Integer
VerifyVersionInfoW([lpVersionInfo, dwTypeMask, dwlConditionMask]) => Integer
VerLanguageName([wLang, szLang, cchLang]) => Integer
VerLanguageNameA([wLang, szLang, cchLang]) => Integer
VerLanguageNameW([wLang, szLang, cchLang]) => Integer
VerSetConditionMask([dwlConditionMask, dwTypeBitMask, dwConditionMask]) => Integer
VirtualAlloc([lpAddress, dwSize, flAllocationType, flProtect]) => Integer
VirtualAllocEx([hProcess, lpAddress, dwSize, flAllocationType, flProtect]) => Integer
VirtualAllocExNuma([hProcess, lpAddress, dwSize, flAllocationType, flProtect, nndPreferred]) => Integer
VirtualFree([lpAddress, dwSize, dwFreeType]) => Integer
VirtualFreeEx([hProcess, lpAddress, dwSize, dwFreeType]) => Integer
VirtualLock([lpAddress, dwSize]) => Integer
VirtualProtect([lpAddress, dwSize, flNewProtect, lpflOldProtect]) => Integer
VirtualProtectEx([hProcess, lpAddress, dwSize, flNewProtect, lpflOldProtect]) => Integer
VirtualQuery([lpAddress, lpBuffer, dwLength]) => Integer
VirtualQueryEx([hProcess, lpAddress, lpBuffer, dwLength]) => Integer
VirtualUnlock([lpAddress, dwSize]) => Integer
WaitCommEvent([hFile, lpEvtMask, lpOverlapped]) => Integer
WaitForDebugEvent([lpDebugEvent, dwMilliseconds]) => Integer
WaitForMultipleObjects([nCount, lpHandles, bWaitAll, dwMilliseconds]) => Integer
WaitForMultipleObjectsEx([nCount, lpHandles, bWaitAll, dwMilliseconds, bAlertable]) => Integer
WaitForSingleObject([hHandle, dwMilliseconds]) => Integer
WaitForSingleObjectEx([hHandle, dwMilliseconds, bAlertable]) => Integer
WaitForThreadpoolIoCallbacks([pio, fCancelPendingCallbacks]) => void
WaitForThreadpoolTimerCallbacks([pti, fCancelPendingCallbacks]) => void
WaitForThreadpoolWaitCallbacks([pwa, fCancelPendingCallbacks]) => void
WaitForThreadpoolWorkCallbacks([pwk, fCancelPendingCallbacks]) => void
WaitNamedPipe([lpNamedPipeName, nTimeOut]) => Integer
WaitNamedPipeA([lpNamedPipeName, nTimeOut]) => Integer
WaitNamedPipeW([lpNamedPipeName, nTimeOut]) => Integer
WakeAllConditionVariable([ConditionVariable]) => void
WakeConditionVariable([ConditionVariable]) => void
WerGetFlags([hProcess, pdwFlags]) => Integer
WerRegisterFile([pwzFile, regFileType, dwFlags]) => Integer
WerRegisterMemoryBlock([pvAddress, dwSize]) => Integer
WerRegisterRuntimeExceptionModule([pwszOutOfProcessCallbackDll, pContext]) => Integer
WerSetFlags([dwFlags]) => Integer
WerUnregisterFile([pwzFilePath]) => Integer
WerUnregisterMemoryBlock([pvAddress]) => Integer
WerUnregisterRuntimeExceptionModule([pwszOutOfProcessCallbackDll, pContext]) => Integer
WideCharToMultiByte([CodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar]) => Integer
WinExec([lpCmdLine, uCmdShow]) => Integer
Wow64DisableWow64FsRedirection([OldValue]) => Integer
Wow64EnableWow64FsRedirection([Wow64FsEnableRedirection]) => Integer
Wow64GetThreadContext([hThread, lpContext]) => Integer
Wow64GetThreadSelectorEntry([hThread, dwSelector, lpSelectorEntry]) => Integer
Wow64RevertWow64FsRedirection([OldValue]) => Integer
Wow64SetThreadContext([hThread, lpContext]) => Integer
Wow64SuspendThread([hThread]) => Integer
WriteConsole([hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved]) => Integer
WriteConsoleA([hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved]) => Integer
WriteConsoleInput([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten]) => Integer
WriteConsoleInputA([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten]) => Integer
WriteConsoleInputW([hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten]) => Integer
WriteConsoleOutput([hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion]) => Integer
WriteConsoleOutputA([hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion]) => Integer
WriteConsoleOutputAttribute([hConsoleOutput, lpAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten]) => Integer
WriteConsoleOutputCharacter([hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten]) => Integer
WriteConsoleOutputCharacterA([hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten]) => Integer
WriteConsoleOutputCharacterW([hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten]) => Integer
WriteConsoleOutputW([hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion]) => Integer
WriteConsoleW([hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved]) => Integer
WriteFile([hFile, lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, lpOverlapped]) => Integer
WriteFileEx([hFile, lpBuffer, nNumberOfBytesToWrite, lpOverlapped, lpCompletionRoutine]) => Integer
WriteFileGather([hFile, aSegmentArray, nNumberOfBytesToWrite, lpReserved, lpOverlapped]) => Integer
WritePrivateProfileSection([lpAppName, lpString, lpFileName]) => Integer
WritePrivateProfileSectionA([lpAppName, lpString, lpFileName]) => Integer
WritePrivateProfileSectionW([lpAppName, lpString, lpFileName]) => Integer
WritePrivateProfileString([lpAppName, lpKeyName, lpString, lpFileName]) => Integer
WritePrivateProfileStringA([lpAppName, lpKeyName, lpString, lpFileName]) => Integer
WritePrivateProfileStringW([lpAppName, lpKeyName, lpString, lpFileName]) => Integer
WritePrivateProfileStruct([lpszSection, lpszKey, lpStruct, uSizeStruct, szFile]) => Integer
WritePrivateProfileStructA([lpszSection, lpszKey, lpStruct, uSizeStruct, szFile]) => Integer
WritePrivateProfileStructW([lpszSection, lpszKey, lpStruct, uSizeStruct, szFile]) => Integer
WriteProcessMemory([hProcess, lpBaseAddress, lpBuffer, nSize, lpNumberOfBytesWritten]) => Integer
WriteProfileSection([lpAppName, lpString]) => Integer
WriteProfileSectionA([lpAppName, lpString]) => Integer
WriteProfileSectionW([lpAppName, lpString]) => Integer
WriteProfileString([lpAppName, lpKeyName, lpString]) => Integer
WriteProfileStringA([lpAppName, lpKeyName, lpString]) => Integer
WriteProfileStringW([lpAppName, lpKeyName, lpString]) => Integer
WriteTapemark([hDevice, dwTapemarkType, dwTapemarkCount, bImmediate]) => Integer
WTSGetActiveConsoleSessionId() => Integer
ZombifyActCtx([hActCtx]) => Integer
BindMoniker([pmk, grfOpt, iidResult, ppvResult]) => Integer
CLSIDFromProgID([lpszProgID, lpclsid]) => Integer
CLSIDFromProgIDEx([lpszProgID, lpclsid]) => Integer
CLSIDFromString([lpsz, pclsid]) => Integer
CoAddRefServerProcess() => Integer
CoAllowSetForegroundWindow([pUnk, lpvReserved]) => Integer
CoCancelCall([dwThreadId, ulTimeout]) => Integer
CoCopyProxy([pProxy, ppCopy]) => Integer
CoCreateFreeThreadedMarshaler([punkOuter, ppunkMarshal]) => Integer
CoCreateGuid([pguid]) => Integer
CoCreateInstance([rclsid, pUnkOuter, dwClsContext, riid, ppv]) => Integer
CoCreateInstanceEx([rclsid, punkOuter, dwClsCtx, pServerInfo, dwCount, pResults]) => Integer
CoDisableCallCancellation([pReserved]) => Integer
CoDisconnectContext([dwTimeout]) => Integer
CoDisconnectObject([pUnk, dwReserved]) => Integer
CoDosDateTimeToFileTime([nDosDate, nDosTime, lpFileTime]) => Integer
CoEnableCallCancellation([pReserved]) => Integer
CoFileTimeNow([lpFileTime]) => Integer
CoFileTimeToDosDateTime([lpFileTime, lpDosDate, lpDosTime]) => Integer
CoFreeAllLibraries() => Integer
CoFreeLibrary([hInst]) => void
CoFreeUnusedLibraries() => Integer
CoFreeUnusedLibrariesEx([dwUnloadDelay, dwReserved]) => void
CoGetApartmentType([pAptType, pAptQualifier]) => Integer
CoGetCallContext([riid, ppInterface]) => Integer
CoGetCallerTID([lpdwTID]) => Integer
CoGetCancelObject([dwThreadId, iid, ppUnk]) => Integer
CoGetClassObject([rclsid, dwClsContext, pServerInfo, riid, ppv]) => Integer
CoGetContextToken([pToken]) => Integer
CoGetCurrentLogicalThreadId([pguid]) => Integer
CoGetCurrentProcess() => Integer
CoGetDefaultContext([aptType, riid, ppv]) => Integer
CoGetInstanceFromFile([pServerInfo, pClsid, punkOuter, dwClsCtx, grfMode, pwszName, dwCount, pResults]) => Integer
CoGetInstanceFromIStorage([pServerInfo, pClsid, punkOuter, dwClsCtx, pstg, dwCount, pResults]) => Integer
CoGetInterceptor([iidIntercepted, punkOuter, iid, ppv]) => Integer
CoGetInterfaceAndReleaseStream([pStm, iid, ppv]) => Integer
CoGetMalloc([dwMemContext, ppMalloc]) => Integer
CoGetMarshalSizeMax([pulSize, riid, pUnk, dwDestContext, pvDestContext, mshlflags]) => Integer
CoGetObject([pszName, pBindOptions, riid, ppv]) => Integer
CoGetObjectContext([riid, ppv]) => Integer
CoGetPSClsid([riid, pClsid]) => Integer
CoGetStandardMarshal([riid, pUnk, dwDestContext, pvDestContext, mshlflags, ppMarshal]) => Integer
CoGetStdMarshalEx([pUnkOuter, smexflags, ppUnkInner]) => Integer
CoGetTreatAsClass([clsidOld, pClsidNew]) => Integer
CoImpersonateClient() => Integer
CoInitialize([pvReserved]) => Integer
CoInitializeEx([pvReserved, dwCoInit]) => Integer
CoInitializeSecurity([pSecDesc, cAuthSvc, asAuthSvc, pReserved1, dwAuthnLevel, dwImpLevel, pAuthList, dwCapabilities, pReserved3]) => Integer
CoInstall([pbc, dwFlags, pClassSpec, pQuery, pszCodeBase]) => Integer
CoInvalidateRemoteMachineBindings([pszMachineName]) => Integer
CoIsHandlerConnected([pUnk]) => Integer
CoIsOle1Class([rclsid]) => Integer
CoLoadLibrary([lpszLibName, bAutoFree]) => Integer
CoLockObjectExternal([pUnk, fLock, fLastUnlockReleases]) => Integer
CoMarshalHresult([pstm, hresult]) => Integer
CoMarshalInterface([pStm, riid, pUnk, dwDestContext, pvDestContext, mshlflags]) => Integer
CoMarshalInterThreadInterfaceInStream([riid, pUnk, ppStm]) => Integer
CoQueryAuthenticationServices([pcAuthSvc, asAuthSvc]) => Integer
CoQueryClientBlanket([pAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pPrivs, pCapabilities]) => Integer
CoQueryProxyBlanket([pProxy, pwAuthnSvc, pAuthzSvc, pServerPrincName, pAuthnLevel, pImpLevel, pAuthInfo, pCapabilites]) => Integer
CoRegisterChannelHook([ExtensionUuid, pChannelHook]) => Integer
CoRegisterClassObject([rclsid, pUnk, dwClsContext, flags, lpdwRegister]) => Integer
CoRegisterInitializeSpy([pSpy, puliCookie]) => Integer
CoRegisterMallocSpy([pMallocSpy]) => Integer
CoRegisterMessageFilter([lpMessageFilter, lplpMessageFilter]) => Integer
CoRegisterPSClsid([riid, rclsid]) => Integer
CoRegisterSurrogate([pSurrogate]) => Integer
CoReleaseMarshalData([pStm]) => Integer
CoReleaseServerProcess() => Integer
CoResumeClassObjects() => Integer
CoRevertToSelf() => Integer
CoRevokeClassObject([dwRegister]) => Integer
CoRevokeInitializeSpy([uliCookie]) => Integer
CoRevokeMallocSpy() => Integer
CoSetCancelObject([pUnk]) => Integer
CoSetProxyBlanket([pProxy, dwAuthnSvc, dwAuthzSvc, pServerPrincName, dwAuthnLevel, dwImpLevel, pAuthInfo, dwCapabilities]) => Integer
CoSuspendClassObjects() => Integer
CoSwitchCallContext([pNewObject, ppOldObject]) => Integer
CoTaskMemAlloc([cb]) => Integer
CoTaskMemFree([pv]) => void
CoTaskMemRealloc([pv, cb]) => Integer
CoTestCancel() => Integer
CoTreatAsClass([clsidOld, clsidNew]) => Integer
CoUninitialize() => Integer
CoUnmarshalHresult([pstm, phresult]) => Integer
CoUnmarshalInterface([pStm, riid, ppv]) => Integer
CoWaitForMultipleHandles([dwFlags, dwTimeout, cHandles, pHandles, lpdwindex]) => Integer
CreateAntiMoniker([ppmk]) => Integer
CreateBindCtx([reserved, ppbc]) => Integer
CreateClassMoniker([rclsid, ppmk]) => Integer
CreateDataAdviseHolder([ppDAHolder]) => Integer
CreateDataCache([pUnkOuter, rclsid, iid, ppv]) => Integer
CreateFileMoniker([lpszPathName, ppmk]) => Integer
CreateGenericComposite([pmkFirst, pmkRest, ppmkComposite]) => Integer
CreateILockBytesOnHGlobal([hGlobal, fDeleteOnRelease, ppLkbyt]) => Integer
CreateItemMoniker([lpszDelim, lpszItem, ppmk]) => Integer
CreateObjrefMoniker([punk, ppmk]) => Integer
CreateOleAdviseHolder([ppOAHolder]) => Integer
CreatePointerMoniker([punk, ppmk]) => Integer
CreateStreamOnHGlobal([hGlobal, fDeleteOnRelease, ppstm]) => Integer
DllDebugObjectRPCHook([fTrace, lpOrpcInitArgs]) => Integer
DoDragDrop([pDataObj, pDropSource, dwOKEffects, pdwEffect]) => Integer
FmtIdToPropStgName([pfmtid, oszName]) => Integer
FreePropVariantArray([cVariants, rgvars]) => Integer
GetClassFile([szFilename, pclsid]) => Integer
GetConvertStg([pStg]) => Integer
GetHGlobalFromILockBytes([pLkbyt, phglobal]) => Integer
GetHGlobalFromStream([pstm, phglobal]) => Integer
GetRunningObjectTable([reserved, pprot]) => Integer
IIDFromString([lpsz, lpiid]) => Integer
IsAccelerator([hAccel, cAccelEntries, lpMsg, lpwCmd]) => Integer
IsEqualGUID([rguid1, rguid2]) => Integer
MkParseDisplayName([pbc, szUserName, pchEaten, ppmk]) => Integer
MonikerCommonPrefixWith([pmkThis, pmkOther, ppmkCommon]) => Integer
MonikerRelativePathTo([pmkSrc, pmkDest, ppmkRelPath, dwReserved]) => Integer
OleConvertIStorageToOLESTREAM([pStg, lpolestream]) => Integer
OleConvertIStorageToOLESTREAMEx([pStg, cfFormat, lWidth, lHeight, dwSize, pmedium, lpolestm]) => Integer
OleConvertOLESTREAMToIStorage([lpolestream, pstg, ptd]) => Integer
OleConvertOLESTREAMToIStorageEx([lpolestm, pstg, pcfFormat, plWidth, plHeight, pdwSize, pmedium]) => Integer
OleCreate([rclsid, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj]) => Integer
OleCreateDefaultHandler([clsid, pUnkOuter, riid, lplpObj]) => Integer
OleCreateEmbeddingHelper([clsid, pUnkOuter, flags, pCF, riid, lplpObj]) => Integer
OleCreateEx([rclsid, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj]) => Integer
OleCreateFromData([pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj]) => Integer
OleCreateFromDataEx([pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj]) => Integer
OleCreateFromFile([rclsid, lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj]) => Integer
OleCreateFromFileEx([rclsid, lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj]) => Integer
OleCreateLink([pmkLinkSrc, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj]) => Integer
OleCreateLinkEx([pmkLinkSrc, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj]) => Integer
OleCreateLinkFromData([pSrcDataObj, riid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj]) => Integer
OleCreateLinkFromDataEx([pSrcDataObj, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj]) => Integer
OleCreateLinkToFile([lpszFileName, riid, renderopt, lpFormatEtc, pClientSite, pStg, ppvObj]) => Integer
OleCreateLinkToFileEx([lpszFileName, riid, dwFlags, renderopt, cFormats, rgAdvf, rgFormatEtc, lpAdviseSink, rgdwConnection, pClientSite, pStg, ppvObj]) => Integer
OleCreateMenuDescriptor([hmenuCombined, lpMenuWidths]) => Integer
OleCreateStaticFromData([pSrcDataObj, iid, renderopt, pFormatEtc, pClientSite, pStg, ppvObj]) => Integer
OleDestroyMenuDescriptor([holemenu]) => void
OleDoAutoConvert([pStg, pClsidNew]) => Integer
OleDraw([pUnknown, dwAspect, hdcDraw, lprcBounds]) => Integer
OleDuplicateData([hSrc, cfFormat, uiFlags]) => Integer
OleFlushClipboard() => Integer
OleGetAutoConvert([clsidOld, pClsidNew]) => Integer
OleGetClipboard([ppDataObj]) => Integer
OleGetIconOfClass([rclsid, lpszLabel, fUseTypeAsLabel]) => Integer
OleGetIconOfFile([lpszPath, fUseFileAsLabel]) => Integer
OleInitialize([pvReserved]) => Integer
OleIsCurrentClipboard([pDataObj]) => Integer
OleIsRunning([pObject]) => Integer
OleLoad([pStg, riid, pClientSite, ppvObj]) => Integer
OleLoadFromStream([pStm, iidInterface, ppvObj]) => Integer
OleLockRunning([pUnknown, fLock, fLastUnlockCloses]) => Integer
OleMetafilePictFromIconAndLabel([hIcon, lpszLabel, lpszSourceFile, iIconIndex]) => Integer
OleNoteObjectVisible([pUnknown, fVisible]) => Integer
OleQueryCreateFromData([pSrcDataObject]) => Integer
OleQueryLinkFromData([pSrcDataObject]) => Integer
OleRegEnumFormatEtc([clsid, dwDirection, ppenum]) => Integer
OleRegEnumVerbs([clsid, ppenum]) => Integer
OleRegGetMiscStatus([clsid, dwAspect, pdwStatus]) => Integer
OleRegGetUserType([clsid, dwFormOfType, pszUserType]) => Integer
OleRun([pUnknown]) => Integer
OleSave([pPS, pStg, fSameAsLoad]) => Integer
OleSaveToStream([pPStm, pStm]) => Integer
OleSetAutoConvert([clsidOld, clsidNew]) => Integer
OleSetClipboard([pDataObj]) => Integer
OleSetContainedObject([pUnknown, fContained]) => Integer
OleSetMenuDescriptor([holemenu, hwndFrame, hwndActiveObject, lpFrame, lpActiveObj]) => Integer
OleTranslateAccelerator([lpFrame, lpFrameInfo, lpmsg]) => Integer
OleUninitialize() => Integer
ProgIDFromCLSID([clsid, lplpszProgID]) => Integer
PropStgNameToFmtId([oszName, pfmtid]) => Integer
PropVariantClear([pvar]) => Integer
PropVariantCopy([pvarDest, pvarSrc]) => Integer
ReadClassStg([pStg, pclsid]) => Integer
ReadClassStm([pStm, pclsid]) => Integer
ReadFmtUserTypeStg([pStg, pcf, lplpszUserType]) => Integer
RegisterDragDrop([hwnd, pDropTarget]) => Integer
ReleaseStgMedium([pMedium]) => void
RevokeDragDrop([hwnd]) => Integer
SetConvertStg([pStg, fConvert]) => Integer
StgConvertPropertyToVariant([prop, CodePage, pvar, pma]) => Integer
StgConvertVariantToProperty([pvar, CodePage, pprop, pcb, pid, fReserved, pcIndirect]) => Integer
StgCreateDocfile([pwcsName, grfMode, reserved, ppstgOpen]) => Integer
StgCreateDocfileOnILockBytes([plkbyt, grfMode, reserved, ppstgOpen]) => Integer
StgCreatePropSetStg([pStorage, dwReserved, ppPropSetStg]) => Integer
StgCreatePropStg([pUnk, fmtid, pclsid, grfFlags, dwReserved, ppPropStg]) => Integer
StgCreateStorageEx([pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, pSecurityDescriptor, riid, ppObjectOpen]) => Integer
StgGetIFillLockBytesOnFile([pwcsName, ppflb]) => Integer
StgGetIFillLockBytesOnILockBytes([pilb, ppflb]) => Integer
StgIsStorageFile([pwcsName]) => Integer
StgIsStorageILockBytes([plkbyt]) => Integer
StgOpenAsyncDocfileOnIFillLockBytes([ppflb, grfmode, asyncFlags, ppstgOpen]) => Integer
StgOpenPropStg([pUnk, fmtid, grfFlags, dwReserved, ppPropStg]) => Integer
StgOpenStorage([pwcsName, pstgPriority, grfMode, snbExclude, reserved, ppstgOpen]) => Integer
StgOpenStorageEx([pwcsName, grfMode, stgfmt, grfAttrs, pStgOptions, reserved2, riid, ppObjectOpen]) => Integer
StgOpenStorageOnILockBytes([plkbyt, pStgPriority, grfMode, snbExclude, reserved, ppstgOpen]) => Integer
StgPropertyLengthAsVariant([pProp, cbProp, CodePage, bReserved]) => Integer
StgSetTimes([lpszName, pctime, patime, pmtime]) => Integer
StringFromCLSID([rclsid, lplpsz]) => Integer
StringFromGUID2([rguid, lpsz, cchMax]) => Integer
StringFromIID([rclsid, lplpsz]) => Integer
WriteClassStg([pStg, rclsid]) => Integer
WriteClassStm([pStm, rclsid]) => Integer
WriteFmtUserTypeStg([pStg, cf, lpszUserType]) => Integer
AccessibleChildren([paccContainer, iChildStart, cChildren, rgvarChildren, pcObtained]) => Integer
AccessibleObjectFromEvent([hwnd, dwObjectID, dwChildID, ppacc, pvarChild]) => Integer
AccessibleObjectFromPoint([ptScreen, ppacc, pvarChild]) => Integer
AccessibleObjectFromWindow([hwnd, dwObjectID, riid, ppvObject]) => Integer
CreateStdAccessibleObject([hwnd, idObject, riidInterface, ppvObject]) => Integer
CreateStdAccessibleProxy([hwnd, pszClassName, idObject, riidInterface, ppvObject]) => Integer
CreateStdAccessibleProxyA([hwnd, pszClassName, idObject, riidInterface, ppvObject]) => Integer
CreateStdAccessibleProxyW([hwnd, pszClassName, idObject, riidInterface, ppvObject]) => Integer
GetOleaccVersionInfo([pdwVer, pdwBuild]) => void
GetProcessHandleFromHwnd([hwnd]) => Integer
GetRoleText([dwRole, lpszRole, cchRoleMax]) => Integer
GetRoleTextA([dwRole, lpszRole, cchRoleMax]) => Integer
GetRoleTextW([dwRole, lpszRole, cchRoleMax]) => Integer
GetStateText([dwStateBit, lpszStateBit, cchStateBitMax]) => Integer
GetStateTextA([dwStateBit, lpszStateBit, cchStateBitMax]) => Integer
GetStateTextW([dwStateBit, lpszStateBit, cchStateBitMax]) => Integer
LresultFromObject([riid, wParam, pAcc]) => Integer
ObjectFromLresult([lResult, riid, wParam, ppvObject]) => Integer
WindowFromAccessibleObject([pacc, phwnd]) => Integer
BSTR_UserFree([pFlags, pBstr]) => void
BSTR_UserMarshal([pFlags, pBuffer, pBstr]) => Integer
BSTR_UserSize([pFlags, Offset, pBstr]) => Integer
BSTR_UserUnmarshal([pFlags, pBuffer, pBstr]) => Integer
BstrFromVector([psa, pbstr]) => Integer
ClearCustData([pCustData]) => void
CreateDispTypeInfo([pidata, lcid, pptinfo]) => Integer
CreateErrorInfo([pperrinfo]) => Integer
CreateStdDispatch([punkOuter, pvThis, ptinfo, ppunkStdDisp]) => Integer
CreateTypeLib([syskind, szFile, ppctlib]) => Integer
CreateTypeLib2([syskind, szFile, ppctlib]) => Integer
DispCallFunc([pvInstance, oVft, cc, vtReturn, cActuals, prgvt, prgpvarg, pvargResult]) => Integer
DispGetIDsOfNames([ptinfo, rgszNames, cNames, rgdispid]) => Integer
DispGetParam([pdispparams, position, vtTarg, pvarResult, puArgErr]) => Integer
DispInvoke([_this, ptinfo, dispidMember, wFlags, pparams, pvarResult, pexcepinfo, puArgErr]) => Integer
DosDateTimeToVariantTime([wDosDate, wDosTime, pvtime]) => Integer
GetActiveObject([rclsid, pvReserved, ppunk]) => Integer
GetAltMonthNames([lcid, prgp]) => Integer
GetErrorInfo([dwReserved, pperrinfo]) => Integer
GetRecordInfoFromGuids([rGuidTypeLib, uVerMajor, uVerMinor, lcid, rGuidTypeInfo, ppRecInfo]) => Integer
GetRecordInfoFromTypeInfo([pTypeInfo, ppRecInfo]) => Integer
GetVarConversionLocaleSetting([dwFlags]) => Integer
LHashValOfNameSys([syskind, lcid, szName]) => Integer
LHashValOfNameSysA([syskind, lcid, szName]) => Integer
LoadRegTypeLib([rguid, wVerMajor, wVerMinor, lcid, pptlib]) => Integer
LoadTypeLib([szFile, pptlib]) => Integer
LoadTypeLibEx([szFile, regkind, pptlib]) => Integer
LPSAFEARRAY_Marshal([pFlags, pBuffer, ppSafeArray, piid]) => Integer
LPSAFEARRAY_Size([pFlags, Offset, ppSafeArray, piid]) => Integer
LPSAFEARRAY_Unmarshal([pFlags, pBuffer, ppSafeArray, piid]) => Integer
LPSAFEARRAY_UserFree([pFlags, ppSafeArray]) => void
LPSAFEARRAY_UserMarshal([pFlags, pBuffer, ppSafeArray]) => Integer
LPSAFEARRAY_UserSize([pFlags, Offset, ppSafeArray]) => Integer
LPSAFEARRAY_UserUnmarshal([pFlags, pBuffer, ppSafeArray]) => Integer
OaBuildVersion() => Integer
OaEnablePerUserTLibRegistration() => Integer
OleCreateFontIndirect([lpFontDesc, riid, lplpvObj]) => Integer
OleCreatePictureIndirect([lpPictDesc, riid, fOwn, lplpvObj]) => Integer
OleCreatePropertyFrame([hwndOwner, x, y, lpszCaption, cObjects, ppUnk, cPages, pPageClsID, lcid, dwReserved, pvReserved]) => Integer
OleCreatePropertyFrameIndirect([lpParams]) => Integer
OleIconToCursor([hinstExe, hIcon]) => Integer
OleLoadPicture([lpstream, lSize, fRunmode, riid, lplpvObj]) => Integer
OleLoadPictureEx([lpstream, lSize, fRunmode, riid, xSizeDesired, ySizeDesired, dwFlags, lplpvObj]) => Integer
OleLoadPictureFile([varFileName, lplpdispPicture]) => Integer
OleLoadPictureFileEx([varFileName, xSizeDesired, ySizeDesired, dwFlags, lplpdispPicture]) => Integer
OleLoadPicturePath([szURLorPath, punkCaller, dwReserved, clrReserved, riid, ppvRet]) => Integer
OleSavePictureFile([lpdispPicture, bstrFileName]) => Integer
OleTranslateColor([clr, hpal, lpcolorref]) => Integer
QueryPathOfRegTypeLib([guid, wMaj, wMin, lcid, lpbstrPathName]) => Integer
RegisterActiveObject([punk, rclsid, dwFlags, pdwRegister]) => Integer
RegisterTypeLib([ptlib, szFullPath, szHelpDir]) => Integer
RegisterTypeLibForUser([ptlib, szFullPath, szHelpDir]) => Integer
RevokeActiveObject([dwRegister, pvReserved]) => Integer
SafeArrayAccessData([psa, ppvData]) => Integer
SafeArrayAllocData([psa]) => Integer
SafeArrayAllocDescriptor([cDims, ppsaOut]) => Integer
SafeArrayAllocDescriptorEx([vt, cDims, ppsaOut]) => Integer
SafeArrayCopy([psa, ppsaOut]) => Integer
SafeArrayCopyData([psaSource, psaTarget]) => Integer
SafeArrayCreate([vt, cDims, rgsabound]) => Integer
SafeArrayCreateEx([vt, cDims, rgsabound, pvExtra]) => Integer
SafeArrayCreateVector([vt, lLbound, cElements]) => Integer
SafeArrayCreateVectorEx([vt, lLbound, cElements, pvExtra]) => Integer
SafeArrayDestroy([psa]) => Integer
SafeArrayDestroyData([psa]) => Integer
SafeArrayDestroyDescriptor([psa]) => Integer
SafeArrayGetDim([psa]) => Integer
SafeArrayGetElement([psa, rgIndices, pv]) => Integer
SafeArrayGetElemsize([psa]) => Integer
SafeArrayGetIID([psa, pguid]) => Integer
SafeArrayGetLBound([psa, nDim, plLbound]) => Integer
SafeArrayGetRecordInfo([psa, prinfo]) => Integer
SafeArrayGetUBound([psa, nDim, plUbound]) => Integer
SafeArrayGetVartype([psa, pvt]) => Integer
SafeArrayLock([psa]) => Integer
SafeArrayPtrOfIndex([psa, rgIndices, ppvData]) => Integer
SafeArrayPutElement([psa, rgIndices, pv]) => Integer
SafeArrayRedim([psa, psaboundNew]) => Integer
SafeArraySetIID([psa, guid]) => Integer
SafeArraySetRecordInfo([psa, prinfo]) => Integer
SafeArrayUnaccessData([psa]) => Integer
SafeArrayUnlock([psa]) => Integer
SetErrorInfo([dwReserved, perrinfo]) => Integer
SetOaNoCache() => Integer
SetVarConversionLocaleSetting([dwFlags]) => Integer
SysAllocString([psz]) => String
SysAllocStringByteLen([psz, len]) => String
SysAllocStringLen([strIn, ui]) => String
SysFreeString([bstrString]) => void
SysReAllocString([pbstr, psz]) => Integer
SysReAllocStringLen([pbstr, psz, len]) => Integer
SysStringByteLen([bstr]) => Integer
SysStringLen([bstr]) => Integer
SystemTimeToVariantTime([lpSystemTime, pvtime]) => Integer
UnRegisterTypeLib([libID, wVerMajor, wVerMinor, lcid, syskind]) => Integer
UnRegisterTypeLibForUser([libID, wMajorVerNum, wMinorVerNum, lcid, syskind]) => Integer
VarAbs([pvarIn, pvarResult]) => Integer
VarAdd([pvarLeft, pvarRight, pvarResult]) => Integer
VarAnd([pvarLeft, pvarRight, pvarResult]) => Integer
VarBoolFromCy([cyIn, pboolOut]) => Integer
VarBoolFromDate([dateIn, pboolOut]) => Integer
VarBoolFromDec([pdecIn, pboolOut]) => Integer
VarBoolFromDisp([pdispIn, lcid, pboolOut]) => Integer
VarBoolFromI1([cIn, pboolOut]) => Integer
VarBoolFromI2([sIn, pboolOut]) => Integer
VarBoolFromI4([lIn, pboolOut]) => Integer
VarBoolFromI8([i64In, pboolOut]) => Integer
VarBoolFromR4([fltIn, pboolOut]) => Integer
VarBoolFromR8([dblIn, pboolOut]) => Integer
VarBoolFromStr([strIn, lcid, dwFlags, pboolOut]) => Integer
VarBoolFromUI1([bIn, pboolOut]) => Integer
VarBoolFromUI2([uiIn, pboolOut]) => Integer
VarBoolFromUI4([ulIn, pboolOut]) => Integer
VarBoolFromUI8([i64In, pboolOut]) => Integer
VarBstrCat([bstrLeft, bstrRight, pbstrResult]) => Integer
VarBstrCmp([bstrLeft, bstrRight, lcid, dwFlags]) => Integer
VarBstrFromBool([boolIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromCy([cyIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromDate([dateIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromDec([pdecIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromDisp([pdispIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromI1([cIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromI2([iVal, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromI4([lIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromI8([i64In, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromR4([fltIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromR8([dblIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromUI1([bVal, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromUI2([uiIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromUI4([ulIn, lcid, dwFlags, pbstrOut]) => Integer
VarBstrFromUI8([ui64In, lcid, dwFlags, pbstrOut]) => Integer
VarCat([pvarLeft, pvarRight, pvarResult]) => Integer
VarCmp([pvarLeft, pvarRight, lcid, dwFlags]) => Integer
VarCyAbs([cyIn, pcyResult]) => Integer
VarCyAdd([cyLeft, cyRight, pcyResult]) => Integer
VarCyCmp([cyLeft, cyRight]) => Integer
VarCyCmpR8([cyLeft, dblRight]) => Integer
VarCyFix([cyIn, pcyResult]) => Integer
VarCyFromBool([boolIn, pcyOut]) => Integer
VarCyFromDate([dateIn, pcyOut]) => Integer
VarCyFromDec([pdecIn, pcyOut]) => Integer
VarCyFromDisp([pdispIn, lcid, pcyOut]) => Integer
VarCyFromI1([cIn, pcyOut]) => Integer
VarCyFromI2([sIn, pcyOut]) => Integer
VarCyFromI4([lIn, pcyOut]) => Integer
VarCyFromI8([i64In, pcyOut]) => Integer
VarCyFromR4([fltIn, pcyOut]) => Integer
VarCyFromR8([dblIn, pcyOut]) => Integer
VarCyFromStr([strIn, lcid, dwFlags, pcyOut]) => Integer
VarCyFromUI1([bIn, pcyOut]) => Integer
VarCyFromUI2([uiIn, pcyOut]) => Integer
VarCyFromUI4([ulIn, pcyOut]) => Integer
VarCyFromUI8([ui64In, pcyOut]) => Integer
VarCyInt([cyIn, pcyResult]) => Integer
VarCyMul([cyLeft, cyRight, pcyResult]) => Integer
VarCyMulI4([cyLeft, lRight, pcyResult]) => Integer
VarCyMulI8([cyLeft, lRight, pcyResult]) => Integer
VarCyNeg([cyIn, pcyResult]) => Integer
VarCyRound([cyIn, cDecimals, pcyResult]) => Integer
VarCySub([cyLeft, cyRight, pcyResult]) => Integer
VarDateFromBool([boolIn, pdateOut]) => Integer
VarDateFromCy([cyIn, pdateOut]) => Integer
VarDateFromDec([pdecIn, pdateOut]) => Integer
VarDateFromDisp([pdispIn, lcid, pdateOut]) => Integer
VarDateFromI1([cIn, pdateOut]) => Integer
VarDateFromI2([sIn, pdateOut]) => Integer
VarDateFromI4([lIn, pdateOut]) => Integer
VarDateFromI8([i64In, pdateOut]) => Integer
VarDateFromR4([fltIn, pdateOut]) => Integer
VarDateFromR8([dblIn, pdateOut]) => Integer
VarDateFromStr([strIn, lcid, dwFlags, pdateOut]) => Integer
VarDateFromUdate([pudateIn, dwFlags, pdateOut]) => Integer
VarDateFromUdateEx([pudateIn, lcid, dwFlags, pdateOut]) => Integer
VarDateFromUI1([bIn, pdateOut]) => Integer
VarDateFromUI2([uiIn, pdateOut]) => Integer
VarDateFromUI4([ulIn, pdateOut]) => Integer
VarDateFromUI8([ui64In, pdateOut]) => Integer
VarDecAbs([pdecIn, pdecResult]) => Integer
VarDecAdd([pdecLeft, pdecRight, pdecResult]) => Integer
VarDecCmp([pdecLeft, pdecRight]) => Integer
VarDecCmpR8([pdecLeft, dblRight]) => Integer
VarDecDiv([pdecLeft, pdecRight, pdecResult]) => Integer
VarDecFix([pdecIn, pdecResult]) => Integer
VarDecFromBool([boolIn, pdecOut]) => Integer
VarDecFromCy([cyIn, pdecOut]) => Integer
VarDecFromDate([dateIn, pdecOut]) => Integer
VarDecFromDisp([pdispIn, lcid, pdecOut]) => Integer
VarDecFromI1([cIn, pdecOut]) => Integer
VarDecFromI2([uiIn, pdecOut]) => Integer
VarDecFromI4([lIn, pdecOut]) => Integer
VarDecFromI8([i64In, pdecOut]) => Integer
VarDecFromR4([fltIn, pdecOut]) => Integer
VarDecFromR8([dblIn, pdecOut]) => Integer
VarDecFromStr([strIn, lcid, dwFlags, pdecOut]) => Integer
VarDecFromUI1([bIn, pdecOut]) => Integer
VarDecFromUI2([uiIn, pdecOut]) => Integer
VarDecFromUI4([ulIn, pdecOut]) => Integer
VarDecFromUI8([ui64In, pdecOut]) => Integer
VarDecInt([pdecIn, pdecResult]) => Integer
VarDecMul([pdecLeft, pdecRight, pdecResult]) => Integer
VarDecNeg([pdecIn, pdecResult]) => Integer
VarDecRound([pdecIn, cDecimals, pdecResult]) => Integer
VarDecSub([pdecLeft, pdecRight, pdecResult]) => Integer
VarDiv([pvarLeft, pvarRight, pvarResult]) => Integer
VarEqv([pvarLeft, pvarRight, pvarResult]) => Integer
VarFix([pvarIn, pvarResult]) => Integer
VarFormat([pvarIn, pstrFormat, iFirstDay, iFirstWeek, dwFlags, pbstrOut]) => Integer
VarFormatCurrency([pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut]) => Integer
VarFormatDateTime([pvarIn, iNamedFormat, dwFlags, pbstrOut]) => Integer
VarFormatFromTokens([pvarIn, pstrFormat, pbTokCur, dwFlags, pbstrOut, lcid]) => Integer
VarFormatNumber([pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut]) => Integer
VarFormatPercent([pvarIn, iNumDig, iIncLead, iUseParens, iGroup, dwFlags, pbstrOut]) => Integer
VarI1FromBool([boolIn, pcOut]) => Integer
VarI1FromCy([cyIn, pcOut]) => Integer
VarI1FromDate([dateIn, pcOut]) => Integer
VarI1FromDec([pdecIn, pcOut]) => Integer
VarI1FromDisp([pdispIn, lcid, pcOut]) => Integer
VarI1FromI2([uiIn, pcOut]) => Integer
VarI1FromI4([lIn, pcOut]) => Integer
VarI1FromI8([i64In, pcOut]) => Integer
VarI1FromR4([fltIn, pcOut]) => Integer
VarI1FromR8([dblIn, pcOut]) => Integer
VarI1FromStr([strIn, lcid, dwFlags, pcOut]) => Integer
VarI1FromUI1([bIn, pcOut]) => Integer
VarI1FromUI2([uiIn, pcOut]) => Integer
VarI1FromUI4([ulIn, pcOut]) => Integer
VarI1FromUI8([i64In, pcOut]) => Integer
VarI2FromBool([boolIn, psOut]) => Integer
VarI2FromCy([cyIn, psOut]) => Integer
VarI2FromDate([dateIn, psOut]) => Integer
VarI2FromDec([pdecIn, psOut]) => Integer
VarI2FromDisp([pdispIn, lcid, psOut]) => Integer
VarI2FromI1([cIn, psOut]) => Integer
VarI2FromI4([lIn, psOut]) => Integer
VarI2FromI8([i64In, psOut]) => Integer
VarI2FromR4([fltIn, psOut]) => Integer
VarI2FromR8([dblIn, psOut]) => Integer
VarI2FromStr([strIn, lcid, dwFlags, psOut]) => Integer
VarI2FromUI1([bIn, psOut]) => Integer
VarI2FromUI2([uiIn, psOut]) => Integer
VarI2FromUI4([ulIn, psOut]) => Integer
VarI2FromUI8([ui64In, psOut]) => Integer
VarI4FromBool([boolIn, plOut]) => Integer
VarI4FromCy([cyIn, plOut]) => Integer
VarI4FromDate([dateIn, plOut]) => Integer
VarI4FromDec([pdecIn, plOut]) => Integer
VarI4FromDisp([pdispIn, lcid, plOut]) => Integer
VarI4FromI1([cIn, plOut]) => Integer
VarI4FromI2([sIn, plOut]) => Integer
VarI4FromI8([i64In, plOut]) => Integer
VarI4FromR4([fltIn, plOut]) => Integer
VarI4FromR8([dblIn, plOut]) => Integer
VarI4FromStr([strIn, lcid, dwFlags, plOut]) => Integer
VarI4FromUI1([bIn, plOut]) => Integer
VarI4FromUI2([uiIn, plOut]) => Integer
VarI4FromUI4([ulIn, plOut]) => Integer
VarI4FromUI8([ui64In, plOut]) => Integer
VarI8FromBool([boolIn, pi64Out]) => Integer
VarI8FromCy([cyIn, pi64Out]) => Integer
VarI8FromDate([dateIn, pi64Out]) => Integer
VarI8FromDec([pdecIn, pi64Out]) => Integer
VarI8FromDisp([pdispIn, lcid, pi64Out]) => Integer
VarI8FromI1([cIn, pi64Out]) => Integer
VarI8FromI2([sIn, pi64Out]) => Integer
VarI8FromR4([fltIn, pi64Out]) => Integer
VarI8FromR8([dblIn, pi64Out]) => Integer
VarI8FromStr([strIn, lcid, dwFlags, pi64Out]) => Integer
VarI8FromUI1([bIn, pi64Out]) => Integer
VarI8FromUI2([uiIn, pi64Out]) => Integer
VarI8FromUI4([ulIn, pi64Out]) => Integer
VarI8FromUI8([ui64In, pi64Out]) => Integer
VARIANT_UserFree([pFlags, pVariant]) => void
VARIANT_UserMarshal([pFlags, pBuffer, pVariant]) => Integer
VARIANT_UserSize([pFlags, Offset, pVariant]) => Integer
VARIANT_UserUnmarshal([pFlags, pBuffer, pVariant]) => Integer
VariantChangeType([pvargDest, pvarSrc, wFlags, vt]) => Integer
VariantChangeTypeEx([pvargDest, pvarSrc, lcid, wFlags, vt]) => Integer
VariantClear([pvarg]) => Integer
VariantCopy([pvargDest, pvargSrc]) => Integer
VariantCopyInd([pvarDest, pvargSrc]) => Integer
VariantInit([pvarg]) => void
VariantTimeToDosDateTime([vtime, pwDosDate, pwDosTime]) => Integer
VariantTimeToSystemTime([vtime, lpSystemTime]) => Integer
VarIdiv([pvarLeft, pvarRight, pvarResult]) => Integer
VarImp([pvarLeft, pvarRight, pvarResult]) => Integer
VarInt([pvarIn, pvarResult]) => Integer
VarMod([pvarLeft, pvarRight, pvarResult]) => Integer
VarMonthName([iMonth, fAbbrev, dwFlags, pbstrOut]) => Integer
VarMul([pvarLeft, pvarRight, pvarResult]) => Integer
VarNeg([pvarIn, pvarResult]) => Integer
VarNot([pvarIn, pvarResult]) => Integer
VarNumFromParseNum([pnumprs, rgbDig, dwVtBits, pvar]) => Integer
VarOr([pvarLeft, pvarRight, pvarResult]) => Integer
VarParseNumFromStr([strIn, lcid, dwFlags, pnumprs, rgbDig]) => Integer
VarPow([pvarLeft, pvarRight, pvarResult]) => Integer
VarR4CmpR8([fltLeft, dblRight]) => Integer
VarR4FromBool([boolIn, pfltOut]) => Integer
VarR4FromCy([cyIn, pfltOut]) => Integer
VarR4FromDate([dateIn, pfltOut]) => Integer
VarR4FromDec([pdecIn, pfltOut]) => Integer
VarR4FromDisp([pdispIn, lcid, pfltOut]) => Integer
VarR4FromI1([cIn, pfltOut]) => Integer
VarR4FromI2([sIn, pfltOut]) => Integer
VarR4FromI4([lIn, pfltOut]) => Integer
VarR4FromI8([i64In, pfltOut]) => Integer
VarR4FromR8([dblIn, pfltOut]) => Integer
VarR4FromStr([strIn, lcid, dwFlags, pfltOut]) => Integer
VarR4FromUI1([bIn, pfltOut]) => Integer
VarR4FromUI2([uiIn, pfltOut]) => Integer
VarR4FromUI4([ulIn, pfltOut]) => Integer
VarR4FromUI8([ui64In, pfltOut]) => Integer
VarR8FromBool([boolIn, pdblOut]) => Integer
VarR8FromCy([cyIn, pdblOut]) => Integer
VarR8FromDate([dateIn, pdblOut]) => Integer
VarR8FromDec([pdecIn, pdblOut]) => Integer
VarR8FromDisp([pdispIn, lcid, pdblOut]) => Integer
VarR8FromI1([cIn, pdblOut]) => Integer
VarR8FromI2([sIn, pdblOut]) => Integer
VarR8FromI4([lIn, pdblOut]) => Integer
VarR8FromI8([i64In, pdblOut]) => Integer
VarR8FromR4([fltIn, pdblOut]) => Integer
VarR8FromStr([strIn, lcid, dwFlags, pdblOut]) => Integer
VarR8FromUI1([bIn, pdblOut]) => Integer
VarR8FromUI2([uiIn, pdblOut]) => Integer
VarR8FromUI4([ulIn, pdblOut]) => Integer
VarR8FromUI8([ui64In, pdblOut]) => Integer
VarR8Pow([dblLeft, dblRight, pdblResult]) => Integer
VarR8Round([dblIn, cDecimals, pdblResult]) => Integer
VarRound([pvarIn, cDecimals, pvarResult]) => Integer
VarSub([pvarLeft, pvarRight, pvarResult]) => Integer
VarTokenizeFormatString([pstrFormat, rgbTok, cbTok, iFirstDay, iFirstWeek, lcid, pcbActual]) => Integer
VarUdateFromDate([dateIn, dwFlags, pudateOut]) => Integer
VarUI1FromBool([boolIn, pbOut]) => Integer
VarUI1FromCy([cyIn, pbOut]) => Integer
VarUI1FromDate([dateIn, pbOut]) => Integer
VarUI1FromDec([pdecIn, pbOut]) => Integer
VarUI1FromDisp([pdispIn, lcid, pbOut]) => Integer
VarUI1FromI1([cIn, pbOut]) => Integer
VarUI1FromI2([sIn, pbOut]) => Integer
VarUI1FromI4([lIn, pbOut]) => Integer
VarUI1FromI8([i64In, pbOut]) => Integer
VarUI1FromR4([fltIn, pbOut]) => Integer
VarUI1FromR8([dblIn, pbOut]) => Integer
VarUI1FromStr([strIn, lcid, dwFlags, pbOut]) => Integer
VarUI1FromUI2([uiIn, pbOut]) => Integer
VarUI1FromUI4([ulIn, pbOut]) => Integer
VarUI1FromUI8([ui64In, pbOut]) => Integer
VarUI2FromBool([boolIn, puiOut]) => Integer
VarUI2FromCy([cyIn, puiOut]) => Integer
VarUI2FromDate([dateIn, puiOut]) => Integer
VarUI2FromDec([pdecIn, puiOut]) => Integer
VarUI2FromDisp([pdispIn, lcid, puiOut]) => Integer
VarUI2FromI1([cIn, puiOut]) => Integer
VarUI2FromI2([uiIn, puiOut]) => Integer
VarUI2FromI4([lIn, puiOut]) => Integer
VarUI2FromI8([i64In, puiOut]) => Integer
VarUI2FromR4([fltIn, puiOut]) => Integer
VarUI2FromR8([dblIn, puiOut]) => Integer
VarUI2FromStr([strIn, lcid, dwFlags, puiOut]) => Integer
VarUI2FromUI1([bIn, puiOut]) => Integer
VarUI2FromUI4([ulIn, puiOut]) => Integer
VarUI2FromUI8([i64In, puiOut]) => Integer
VarUI4FromBool([boolIn, pulOut]) => Integer
VarUI4FromCy([cyIn, pulOut]) => Integer
VarUI4FromDate([dateIn, pulOut]) => Integer
VarUI4FromDec([pdecIn, pulOut]) => Integer
VarUI4FromDisp([pdispIn, lcid, pulOut]) => Integer
VarUI4FromI1([cIn, pulOut]) => Integer
VarUI4FromI2([uiIn, pulOut]) => Integer
VarUI4FromI4([lIn, pulOut]) => Integer
VarUI4FromI8([i64In, plOut]) => Integer
VarUI4FromR4([fltIn, pulOut]) => Integer
VarUI4FromR8([dblIn, pulOut]) => Integer
VarUI4FromStr([strIn, lcid, dwFlags, pulOut]) => Integer
VarUI4FromUI1([bIn, pulOut]) => Integer
VarUI4FromUI2([uiIn, pulOut]) => Integer
VarUI4FromUI8([ui64In, plOut]) => Integer
VarUI8FromBool([boolIn, pi64Out]) => Integer
VarUI8FromCy([cyIn, pi64Out]) => Integer
VarUI8FromDate([dateIn, pi64Out]) => Integer
VarUI8FromDec([pdecIn, pi64Out]) => Integer
VarUI8FromDisp([pdispIn, lcid, pi64Out]) => Integer
VarUI8FromI1([cIn, pi64Out]) => Integer
VarUI8FromI2([sIn, pi64Out]) => Integer
VarUI8FromI8([ui64In, pi64Out]) => Integer
VarUI8FromR4([fltIn, pi64Out]) => Integer
VarUI8FromR8([dblIn, pi64Out]) => Integer
VarUI8FromStr([strIn, lcid, dwFlags, pi64Out]) => Integer
VarUI8FromUI1([bIn, pi64Out]) => Integer
VarUI8FromUI2([uiIn, pi64Out]) => Integer
VarUI8FromUI4([ulIn, pi64Out]) => Integer
VarWeekdayName([iWeekday, fAbbrev, iFirstDay, dwFlags, pbstrOut]) => Integer
VarXor([pvarLeft, pvarRight, pvarResult]) => Integer
VectorFromBstr([bstr, ppsa]) => Integer
glAccum([op, value]) => void
glAlphaFunc([func, ref]) => void
glAreTexturesResident([n, textures, residences]) => Integer
glArrayElement([index]) => void
glBegin([mode]) => void
glBindTexture([target, texture]) => void
glBitmap([width, height, xorig, yorig, xmove, ymove, bitmap]) => void
glBlendFunc([sfactor, dfactor]) => void
glCallList([list]) => void
glCallLists([n, type, lists]) => void
glClear([mask]) => void
glClearAccum([red, green, blue, alpha]) => void
glClearColor([red, green, blue, alpha]) => void
glClearDepth([depth]) => void
glClearIndex([c]) => void
glClearStencil([s]) => void
glClipPlane([plane, equation]) => void
glColor3b([red, green, blue]) => void
glColor3bv([v]) => void
glColor3d([red, green, blue]) => void
glColor3dv([v]) => void
glColor3f([red, green, blue]) => void
glColor3fv([v]) => void
glColor3i([red, green, blue]) => void
glColor3iv([v]) => void
glColor3s([red, green, blue]) => void
glColor3sv([v]) => void
glColor3ub([red, green, blue]) => void
glColor3ubv([v]) => void
glColor3ui([red, green, blue]) => void
glColor3uiv([v]) => void
glColor3us([red, green, blue]) => void
glColor3usv([v]) => void
glColor4b([red, green, blue, alpha]) => void
glColor4bv([v]) => void
glColor4d([red, green, blue, alpha]) => void
glColor4dv([v]) => void
glColor4f([red, green, blue, alpha]) => void
glColor4fv([v]) => void
glColor4i([red, green, blue, alpha]) => void
glColor4iv([v]) => void
glColor4s([red, green, blue, alpha]) => void
glColor4sv([v]) => void
glColor4ub([red, green, blue, alpha]) => void
glColor4ubv([v]) => void
glColor4ui([red, green, blue, alpha]) => void
glColor4uiv([v]) => void
glColor4us([red, green, blue, alpha]) => void
glColor4usv([v]) => void
glColorMask([red, green, blue, alpha]) => void
glColorMaterial([face, mode]) => void
glColorPointer([size, type, stride, pointer]) => void
glCopyPixels([x, y, width, height, type]) => void
glCopyTexImage1D([target, level, internalFormat, x, y, width, border]) => void
glCopyTexImage2D([target, level, internalFormat, x, y, width, height, border]) => void
glCopyTexSubImage1D([target, level, xoffset, x, y, width]) => void
glCopyTexSubImage2D([target, level, xoffset, yoffset, x, y, width, height]) => void
glCullFace([mode]) => void
glDeleteLists([list, range]) => void
glDeleteTextures([n, textures]) => void
glDepthFunc([func]) => void
glDepthMask([flag]) => void
glDepthRange([zNear, zFar]) => void
glDisable([cap]) => void
glDisableClientState([array]) => void
glDrawArrays([mode, first, count]) => void
glDrawBuffer([mode]) => void
glDrawElements([mode, count, type, indices]) => void
glDrawPixels([width, height, format, type, pixels]) => void
glEdgeFlag([flag]) => void
glEdgeFlagPointer([stride, pointer]) => void
glEdgeFlagv([flag]) => void
glEnable([cap]) => void
glEnableClientState([array]) => void
glEnd() => Integer
glEndList() => Integer
glEvalCoord1d([u]) => void
glEvalCoord1dv([u]) => void
glEvalCoord1f([u]) => void
glEvalCoord1fv([u]) => void
glEvalCoord2d([u, v]) => void
glEvalCoord2dv([u]) => void
glEvalCoord2f([u, v]) => void
glEvalCoord2fv([u]) => void
glEvalMesh1([mode, i1, i2]) => void
glEvalMesh2([mode, i1, i2, j1, j2]) => void
glEvalPoint1([i]) => void
glEvalPoint2([i, j]) => void
glFeedbackBuffer([size, type, buffer]) => void
glFinish() => Integer
glFlush() => Integer
glFogf([pname, param]) => void
glFogfv([pname, params]) => void
glFogi([pname, param]) => void
glFogiv([pname, params]) => void
glFrontFace([mode]) => void
glFrustum([left, right, bottom, top, zNear, zFar]) => void
glGenLists([range]) => Integer
glGenTextures([n, textures]) => void
glGetBooleanv([pname, params]) => void
glGetClipPlane([plane, equation]) => void
glGetDoublev([pname, params]) => void
glGetError() => Integer
glGetFloatv([pname, params]) => void
glGetIntegerv([pname, params]) => void
glGetLightfv([light, pname, params]) => void
glGetLightiv([light, pname, params]) => void
glGetMapdv([target, query, v]) => void
glGetMapfv([target, query, v]) => void
glGetMapiv([target, query, v]) => void
glGetMaterialfv([face, pname, params]) => void
glGetMaterialiv([face, pname, params]) => void
glGetPixelMapfv([map, values]) => void
glGetPixelMapuiv([map, values]) => void
glGetPixelMapusv([map, values]) => void
glGetPointerv([pname, params]) => void
glGetPolygonStipple([mask]) => void
glGetString([name]) => Integer
glGetTexEnvfv([target, pname, params]) => void
glGetTexEnviv([target, pname, params]) => void
glGetTexGendv([coord, pname, params]) => void
glGetTexGenfv([coord, pname, params]) => void
glGetTexGeniv([coord, pname, params]) => void
glGetTexImage([target, level, format, type, pixels]) => void
glGetTexLevelParameterfv([target, level, pname, params]) => void
glGetTexLevelParameteriv([target, level, pname, params]) => void
glGetTexParameterfv([target, pname, params]) => void
glGetTexParameteriv([target, pname, params]) => void
glHint([target, mode]) => void
glIndexd([c]) => void
glIndexdv([c]) => void
glIndexf([c]) => void
glIndexfv([c]) => void
glIndexi([c]) => void
glIndexiv([c]) => void
glIndexMask([mask]) => void
glIndexPointer([type, stride, pointer]) => void
glIndexs([c]) => void
glIndexsv([c]) => void
glInitNames() => Integer
glInterleavedArrays([format, stride, pointer]) => void
glIsEnabled([cap]) => Integer
glIsList([list]) => Integer
glIsTexture([texture]) => Integer
glLightf([light, pname, param]) => void
glLightfv([light, pname, params]) => void
glLighti([light, pname, param]) => void
glLightiv([light, pname, params]) => void
glLightModelf([pname, param]) => void
glLightModelfv([pname, params]) => void
glLightModeli([pname, param]) => void
glLightModeliv([pname, params]) => void
glLineStipple([factor, pattern]) => void
glLineWidth([width]) => void
glListBase([base]) => void
glLoadIdentity() => Integer
glLoadMatrixd([m]) => void
glLoadMatrixf([m]) => void
glLoadName([name]) => void
glLogicOp([opcode]) => void
glMap1d([target, u1, u2, stride, order, points]) => void
glMap1f([target, u1, u2, stride, order, points]) => void
glMap2d([target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points]) => void
glMap2f([target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points]) => void
glMapGrid1d([un, u1, u2]) => void
glMapGrid1f([un, u1, u2]) => void
glMapGrid2d([un, u1, u2, vn, v1, v2]) => void
glMapGrid2f([un, u1, u2, vn, v1, v2]) => void
glMaterialf([face, pname, param]) => void
glMaterialfv([face, pname, params]) => void
glMateriali([face, pname, param]) => void
glMaterialiv([face, pname, params]) => void
glMatrixMode([mode]) => void
glMultMatrixd([m]) => void
glMultMatrixf([m]) => void
glNewList([list, mode]) => void
glNormal3b([nx, ny, nz]) => void
glNormal3bv([v]) => void
glNormal3d([nx, ny, nz]) => void
glNormal3dv([v]) => void
glNormal3f([nx, ny, nz]) => void
glNormal3fv([v]) => void
glNormal3i([nx, ny, nz]) => void
glNormal3iv([v]) => void
glNormal3s([nx, ny, nz]) => void
glNormal3sv([v]) => void
glNormalPointer([type, stride, pointer]) => void
glOrtho([left, right, bottom, top, zNear, zFar]) => void
glPassThrough([token]) => void
glPixelMapfv([map, mapsize, values]) => void
glPixelMapuiv([map, mapsize, values]) => void
glPixelMapusv([map, mapsize, values]) => void
glPixelStoref([pname, param]) => void
glPixelStorei([pname, param]) => void
glPixelTransferf([pname, param]) => void
glPixelTransferi([pname, param]) => void
glPixelZoom([xfactor, yfactor]) => void
glPointSize([size]) => void
glPolygonMode([face, mode]) => void
glPolygonOffset([factor, units]) => void
glPolygonStipple([mask]) => void
glPopAttrib() => Integer
glPopClientAttrib() => Integer
glPopMatrix() => Integer
glPopName() => Integer
glPrioritizeTextures([n, textures, priorities]) => void
glPushAttrib([mask]) => void
glPushClientAttrib([mask]) => void
glPushMatrix() => Integer
glPushName([name]) => void
glRasterPos2d([x, y]) => void
glRasterPos2dv([v]) => void
glRasterPos2f([x, y]) => void
glRasterPos2fv([v]) => void
glRasterPos2i([x, y]) => void
glRasterPos2iv([v]) => void
glRasterPos2s([x, y]) => void
glRasterPos2sv([v]) => void
glRasterPos3d([x, y, z]) => void
glRasterPos3dv([v]) => void
glRasterPos3f([x, y, z]) => void
glRasterPos3fv([v]) => void
glRasterPos3i([x, y, z]) => void
glRasterPos3iv([v]) => void
glRasterPos3s([x, y, z]) => void
glRasterPos3sv([v]) => void
glRasterPos4d([x, y, z, w]) => void
glRasterPos4dv([v]) => void
glRasterPos4f([x, y, z, w]) => void
glRasterPos4fv([v]) => void
glRasterPos4i([x, y, z, w]) => void
glRasterPos4iv([v]) => void
glRasterPos4s([x, y, z, w]) => void
glRasterPos4sv([v]) => void
glReadBuffer([mode]) => void
glReadPixels([x, y, width, height, format, type, pixels]) => void
glRectd([x1, y1, x2, y2]) => void
glRectdv([v1, v2]) => void
glRectf([x1, y1, x2, y2]) => void
glRectfv([v1, v2]) => void
glRecti([x1, y1, x2, y2]) => void
glRectiv([v1, v2]) => void
glRects([x1, y1, x2, y2]) => void
glRectsv([v1, v2]) => void
glRenderMode([mode]) => Integer
glRotated([angle, x, y, z]) => void
glRotatef([angle, x, y, z]) => void
glScaled([x, y, z]) => void
glScalef([x, y, z]) => void
glScissor([x, y, width, height]) => void
glSelectBuffer([size, buffer]) => void
glShadeModel([mode]) => void
glStencilFunc([func, ref, mask]) => void
glStencilMask([mask]) => void
glStencilOp([fail, zfail, zpass]) => void
glTexCoord1d([s]) => void
glTexCoord1dv([v]) => void
glTexCoord1f([s]) => void
glTexCoord1fv([v]) => void
glTexCoord1i([s]) => void
glTexCoord1iv([v]) => void
glTexCoord1s([s]) => void
glTexCoord1sv([v]) => void
glTexCoord2d([s, t]) => void
glTexCoord2dv([v]) => void
glTexCoord2fv([v]) => void
glTexCoord2i([s, t]) => void
glTexCoord2iv([v]) => void
glTexCoord2s([s, t]) => void
glTexCoord2sv([v]) => void
glTexCoord3d([s, t, r]) => void
glTexCoord3dv([v]) => void
glTexCoord3f([s, t, r]) => void
glTexCoord3fv([v]) => void
glTexCoord3i([s, t, r]) => void
glTexCoord3iv([v]) => void
glTexCoord3s([s, t, r]) => void
glTexCoord3sv([v]) => void
glTexCoord4d([s, t, r, q]) => void
glTexCoord4dv([v]) => void
glTexCoord4f([s, t, r, q]) => void
glTexCoord4fv([v]) => void
glTexCoord4i([s, t, r, q]) => void
glTexCoord4iv([v]) => void
glTexCoord4s([s, t, r, q]) => void
glTexCoord4sv([v]) => void
glTexCoordPointer([size, type, stride, pointer]) => void
glTexEnvf([target, pname, param]) => void
glTexEnvfv([target, pname, params]) => void
glTexEnvi([target, pname, param]) => void
glTexEnviv([target, pname, params]) => void
glTexGend([coord, pname, param]) => void
glTexGendv([coord, pname, params]) => void
glTexGenf([coord, pname, param]) => void
glTexGenfv([coord, pname, params]) => void
glTexGeni([coord, pname, param]) => void
glTexGeniv([coord, pname, params]) => void
glTexImage1D([target, level, internalformat, width, border, format, type, pixels]) => void
glTexImage2D([target, level, internalformat, width, height, border, format, type, pixels]) => void
glTexParameterf([target, pname, param]) => void
glTexParameterfv([target, pname, params]) => void
glTexParameteri([target, pname, param]) => void
glTexParameteriv([target, pname, params]) => void
glTexSubImage1D([target, level, xoffset, width, format, type, pixels]) => void
glTexSubImage2D([target, level, xoffset, yoffset, width, height, format, type, pixels]) => void
glTranslated([x, y, z]) => void
glTranslatef([x, y, z]) => void
glVertex2d([x, y]) => void
glVertex2dv([v]) => void
glVertex2f([x, y]) => void
glVertex2fv([v]) => void
glVertex2i([x, y]) => void
glVertex2iv([v]) => void
glVertex2s([x, y]) => void
glVertex2sv([v]) => void
glVertex3d([x, y, z]) => void
glVertex3dv([v]) => void
glVertex3f([x, y, z]) => void
glVertex3fv([v]) => void
glVertex3i([x, y, z]) => void
glVertex3iv([v]) => void
glVertex3s([x, y, z]) => void
glVertex3sv([v]) => void
glVertex4d([x, y, z, w]) => void
glVertex4dv([v]) => void
glVertex4f([x, y, z, w]) => void
glVertex4fv([v]) => void
glVertex4i([x, y, z, w]) => void
glVertex4iv([v]) => void
glVertex4s([x, y, z, w]) => void
glVertex4sv([v]) => void
glVertexPointer([size, type, stride, pointer]) => void
glViewport([x, y, width, height]) => void
wglCopyContext([hglrcSrc, hglrcDst, mask]) => Integer
wglCreateContext([hDC]) => Integer
wglCreateLayerContext([hdc, iLayerPlane]) => Integer
wglDeleteContext([hglrc]) => Integer
wglDescribeLayerPlane([hdc, iPixelFormat, iLayerPlane, nBytes, plpd]) => Integer
wglGetCurrentContext() => Integer
wglGetCurrentDC() => Integer
wglGetLayerPaletteEntries([hdc, iLayerPlane, iStart, cEntries, pcr]) => Integer
wglGetProcAddress([lpszProc]) => Integer
wglMakeCurrent([hdc, hglrc]) => Integer
wglRealizeLayerPalette([hdc, iLayerPlane, bRealize]) => Integer
wglSetLayerPaletteEntries([hdc, iLayerPlane, iStart, cEntries, pcr]) => Integer
wglShareLists([hglrc1, hglrc2]) => Integer
wglSwapLayerBuffers([hdc, fuPlanes]) => Integer
wglUseFontBitmaps([hdc, first, count, listBase]) => Integer
wglUseFontBitmapsA([hdc, first, count, listBase]) => Integer
wglUseFontBitmapsW([hdc, first, count, listBase]) => Integer
wglUseFontOutlines([hdc, first, count, listBase, deviation, extrusion, format, lpgmf]) => Integer
wglUseFontOutlinesA([hdc, first, count, listBase, deviation, extrusion, format, lpgmf]) => Integer
wglUseFontOutlinesW([hdc, first, count, listBase, deviation, extrusion, format, lpgmf]) => Integer
RasClearConnectionStatistics([hRasConn]) => Integer
RasClearLinkStatistics([hRasConn, dwSubEntry]) => Integer
RasConnectionNotification([hrasconn, hEvent, dwFlags]) => Integer
RasConnectionNotificationA([hrasconn, hEvent, dwFlags]) => Integer
RasConnectionNotificationW([hrasconn, hEvent, dwFlags]) => Integer
RasCreatePhonebookEntry([hwnd, lpszPhonebook]) => Integer
RasCreatePhonebookEntryA([hwnd, lpszPhonebook]) => Integer
RasCreatePhonebookEntryW([hwnd, lpszPhonebook]) => Integer
RasDeleteEntry([lpszPhonebook, lpszEntry]) => Integer
RasDeleteEntryA([lpszPhonebook, lpszEntry]) => Integer
RasDeleteEntryW([lpszPhonebook, lpszEntry]) => Integer
RasDeleteSubEntry([lpszPhonebook, lpszEntry, dwSubEntryId]) => Integer
RasDeleteSubEntryA([lpszPhonebook, lpszEntry, dwSubEntryId]) => Integer
RasDeleteSubEntryW([lpszPhonebook, lpszEntry, dwSubEntryId]) => Integer
RasDial([lpRasDialExtensions, lpszPhonebook, lpRasDialParams, dwNotifierType, lpvNotifier, lphRasConn]) => Integer
RasDialA([lpRasDialExtensions, lpszPhonebook, lpRasDialParams, dwNotifierType, lpvNotifier, lphRasConn]) => Integer
RasDialW([lpRasDialExtensions, lpszPhonebook, lpRasDialParams, dwNotifierType, lpvNotifier, lphRasConn]) => Integer
RasEditPhonebookEntry([hwnd, lpszPhonebook, lpszEntryName]) => Integer
RasEditPhonebookEntryA([hwnd, lpszPhonebook, lpszEntryName]) => Integer
RasEditPhonebookEntryW([hwnd, lpszPhonebook, lpszEntryName]) => Integer
RasEnumAutodialAddresses([lppAddresses, lpdwcbAddresses, lpdwcAddresses]) => Integer
RasEnumAutodialAddressesA([lppAddresses, lpdwcbAddresses, lpdwcAddresses]) => Integer
RasEnumAutodialAddressesW([lppAddresses, lpdwcbAddresses, lpdwcAddresses]) => Integer
RasEnumConnections([lprasconn, lpcb, lpcConnections]) => Integer
RasEnumConnectionsA([lprasconn, lpcb, lpcConnections]) => Integer
RasEnumConnectionsW([lprasconn, lpcb, lpcConnections]) => Integer
RasEnumDevices([lpRasDevInfo, lpcb, lpcDevices]) => Integer
RasEnumDevicesA([lpRasDevInfo, lpcb, lpcDevices]) => Integer
RasEnumDevicesW([lpRasDevInfo, lpcb, lpcDevices]) => Integer
RasEnumEntries([reserved, lpszPhonebook, lprasentryname, lpcb, lpcEntries]) => Integer
RasEnumEntriesA([reserved, lpszPhonebook, lprasentryname, lpcb, lpcEntries]) => Integer
RasEnumEntriesW([reserved, lpszPhonebook, lprasentryname, lpcb, lpcEntries]) => Integer
RasFreeEapUserIdentity([pRasEapUserIdentity]) => void
RasFreeEapUserIdentityA([pRasEapUserIdentity]) => void
RasFreeEapUserIdentityW([pRasEapUserIdentity]) => void
RasGetAutodialAddress([lpszAddress, lpdwReserved, lpAutoDialEntries, lpdwcbAutoDialEntries, lpdwcAutoDialEntries]) => Integer
RasGetAutodialAddressA([lpszAddress, lpdwReserved, lpAutoDialEntries, lpdwcbAutoDialEntries, lpdwcAutoDialEntries]) => Integer
RasGetAutodialAddressW([lpszAddress, lpdwReserved, lpAutoDialEntries, lpdwcbAutoDialEntries, lpdwcAutoDialEntries]) => Integer
RasGetAutodialEnable([dwDialingLocation, lpfEnabled]) => Integer
RasGetAutodialEnableA([dwDialingLocation, lpfEnabled]) => Integer
RasGetAutodialEnableW([dwDialingLocation, lpfEnabled]) => Integer
RasGetAutodialParam([dwKey, lpvValue, lpdwcbValue]) => Integer
RasGetAutodialParamA([dwKey, lpvValue, lpdwcbValue]) => Integer
RasGetAutodialParamW([dwKey, lpvValue, lpdwcbValue]) => Integer
RasGetConnectionStatistics([hRasConn, lpStatistics]) => Integer
RasGetConnectStatus([hrasconn, lprasconnstatus]) => Integer
RasGetConnectStatusA([hrasconn, lprasconnstatus]) => Integer
RasGetConnectStatusW([hrasconn, lprasconnstatus]) => Integer
RasGetCountryInfo([lpRasCtryInfo, lpdwSize]) => Integer
RasGetCountryInfoA([lpRasCtryInfo, lpdwSize]) => Integer
RasGetCountryInfoW([lpRasCtryInfo, lpdwSize]) => Integer
RasGetCredentials([lpszPhonebook, lpszEntry, lpCredentials]) => Integer
RasGetCredentialsA([lpszPhonebook, lpszEntry, lpCredentials]) => Integer
RasGetCredentialsW([lpszPhonebook, lpszEntry, lpCredentials]) => Integer
RasGetCustomAuthData([pszPhonebook, pszEntry, pbCustomAuthData, pdwSizeofCustomAuthData]) => Integer
RasGetCustomAuthDataA([pszPhonebook, pszEntry, pbCustomAuthData, pdwSizeofCustomAuthData]) => Integer
RasGetCustomAuthDataW([pszPhonebook, pszEntry, pbCustomAuthData, pdwSizeofCustomAuthData]) => Integer
RasGetEapUserData([hToken, pszPhonebook, pszEntry, pbEapData, pdwSizeofEapData]) => Integer
RasGetEapUserDataA([hToken, pszPhonebook, pszEntry, pbEapData, pdwSizeofEapData]) => Integer
RasGetEapUserDataW([hToken, pszPhonebook, pszEntry, pbEapData, pdwSizeofEapData]) => Integer
RasGetEapUserIdentity([pszPhonebook, pszEntry, dwFlags, hwnd, ppRasEapUserIdentity]) => Integer
RasGetEapUserIdentityA([pszPhonebook, pszEntry, dwFlags, hwnd, ppRasEapUserIdentity]) => Integer
RasGetEapUserIdentityW([pszPhonebook, pszEntry, dwFlags, hwnd, ppRasEapUserIdentity]) => Integer
RasGetEntryDialParams([lpszPhonebook, lprasdialparams, lpfPassword]) => Integer
RasGetEntryDialParamsA([lpszPhonebook, lprasdialparams, lpfPassword]) => Integer
RasGetEntryDialParamsW([lpszPhonebook, lprasdialparams, lpfPassword]) => Integer
RasGetEntryProperties([lpszPhonebook, lpszEntry, lpRasEntry, lpdwEntryInfoSize, lpbDeviceInfo, lpdwDeviceInfoSize]) => Integer
RasGetEntryPropertiesA([lpszPhonebook, lpszEntry, lpRasEntry, lpdwEntryInfoSize, lpbDeviceInfo, lpdwDeviceInfoSize]) => Integer
RasGetEntryPropertiesW([lpszPhonebook, lpszEntry, lpRasEntry, lpdwEntryInfoSize, lpbDeviceInfo, lpdwDeviceInfoSize]) => Integer
RasGetErrorString([uErrorValue, lpszErrorString, cBufSize]) => Integer
RasGetErrorStringA([uErrorValue, lpszErrorString, cBufSize]) => Integer
RasGetErrorStringW([uErrorValue, lpszErrorString, cBufSize]) => Integer
RasGetLinkStatistics([hRasConn, dwSubEntry, lpStatistics]) => Integer
rasgetnapstatus([hRasConn, pNapState]) => Integer
RasGetProjectionInfo([hrasconn, rasprojection, lpprojection, lpcb]) => Integer
RasGetProjectionInfoA([hrasconn, rasprojection, lpprojection, lpcb]) => Integer
RasGetProjectionInfoEx([Hrasconn, pRasProjection, lpdwSize]) => Integer
RasGetProjectionInfoW([hrasconn, rasprojection, lpprojection, lpcb]) => Integer
RasGetSubEntryHandle([hRasConn, dwSubEntry, lphRasConn]) => Integer
RasGetSubEntryHandleA([hRasConn, dwSubEntry, lphRasConn]) => Integer
RasGetSubEntryHandleW([hRasConn, dwSubEntry, lphRasConn]) => Integer
RasGetSubEntryProperties([lpszPhonebook, lpszEntry, dwSubEntry, lpRasSubEntry, lpdwcb, lpbDeviceConfig, lpcbDeviceConfig]) => Integer
RasGetSubEntryPropertiesA([lpszPhonebook, lpszEntry, dwSubEntry, lpRasSubEntry, lpdwcb, lpbDeviceConfig, lpcbDeviceConfig]) => Integer
RasGetSubEntryPropertiesW([lpszPhonebook, lpszEntry, dwSubEntry, lpRasSubEntry, lpdwcb, lpbDeviceConfig, lpcbDeviceConfig]) => Integer
RasHangUp([hRasConn]) => Integer
RasHangUpA([hRasConn]) => Integer
RasHangUpW([hRasConn]) => Integer
RasInvokeEapUI([hRasConn, dwSubEntry, lpExtensions, hwnd]) => Integer
RasRenameEntry([lpszPhonebook, lpszOldEntry, lpszNewEntry]) => Integer
RasRenameEntryA([lpszPhonebook, lpszOldEntry, lpszNewEntry]) => Integer
RasRenameEntryW([lpszPhonebook, lpszOldEntry, lpszNewEntry]) => Integer
RasSetAutodialAddress([lpszAddress, dwReserved, lpAutoDialEntries, dwcbAutoDialEntries, dwcAutoDialEntries]) => Integer
RasSetAutodialAddressA([lpszAddress, dwReserved, lpAutoDialEntries, dwcbAutoDialEntries, dwcAutoDialEntries]) => Integer
RasSetAutodialAddressW([lpszAddress, dwReserved, lpAutoDialEntries, dwcbAutoDialEntries, dwcAutoDialEntries]) => Integer
RasSetAutodialEnable([dwDialingLocation, fEnabled]) => Integer
RasSetAutodialEnableA([dwDialingLocation, fEnabled]) => Integer
RasSetAutodialEnableW([dwDialingLocation, fEnabled]) => Integer
RasSetAutodialParam([dwKey, lpvValue, dwcbValue]) => Integer
RasSetAutodialParamA([dwKey, lpvValue, dwcbValue]) => Integer
RasSetAutodialParamW([dwKey, lpvValue, dwcbValue]) => Integer
RasSetCredentials([lpszPhonebook, lpszEntry, lpCredentials, fClearCredentials]) => Integer
RasSetCredentialsA([lpszPhonebook, lpszEntry, lpCredentials, fClearCredentials]) => Integer
RasSetCredentialsW([lpszPhonebook, lpszEntry, lpCredentials, fClearCredentials]) => Integer
RasSetCustomAuthData([pszPhonebook, pszEntry, pbCustomAuthData, dwSizeofCustomAuthData]) => Integer
RasSetCustomAuthDataA([pszPhonebook, pszEntry, pbCustomAuthData, dwSizeofCustomAuthData]) => Integer
RasSetCustomAuthDataW([pszPhonebook, pszEntry, pbCustomAuthData, dwSizeofCustomAuthData]) => Integer
RasSetEapUserData([hToken, pszPhonebook, pszEntry, pbEapData, dwSizeofEapData]) => Integer
RasSetEapUserDataA([hToken, pszPhonebook, pszEntry, pbEapData, dwSizeofEapData]) => Integer
RasSetEapUserDataW([hToken, pszPhonebook, pszEntry, pbEapData, dwSizeofEapData]) => Integer
RasSetEntryDialParams([lpszPhonebook, lprasdialparams, fRemovePassword]) => Integer
RasSetEntryDialParamsA([lpszPhonebook, lprasdialparams, fRemovePassword]) => Integer
RasSetEntryDialParamsW([lpszPhonebook, lprasdialparams, fRemovePassword]) => Integer
RasSetEntryProperties([lpszPhonebook, lpszEntry, lpRasEntry, dwEntryInfoSize, lpbDeviceInfo, dwDeviceInfoSize]) => Integer
RasSetEntryPropertiesA([lpszPhonebook, lpszEntry, lpRasEntry, dwEntryInfoSize, lpbDeviceInfo, dwDeviceInfoSize]) => Integer
RasSetEntryPropertiesW([lpszPhonebook, lpszEntry, lpRasEntry, dwEntryInfoSize, lpbDeviceInfo, dwDeviceInfoSize]) => Integer
RasSetSubEntryProperties([lpszPhonebook, lpszEntry, dwSubEntry, lpRasSubEntry, dwcbRasSubEntry, lpbDeviceConfig, dwcbDeviceConfig]) => Integer
RasSetSubEntryPropertiesA([lpszPhonebook, lpszEntry, dwSubEntry, lpRasSubEntry, dwcbRasSubEntry, lpbDeviceConfig, dwcbDeviceConfig]) => Integer
RasSetSubEntryPropertiesW([lpszPhonebook, lpszEntry, dwSubEntry, lpRasSubEntry, dwcbRasSubEntry, lpbDeviceConfig, dwcbDeviceConfig]) => Integer
RasUpdateConnection([hrasconn, lprasupdateconn]) => Integer
RasValidateEntryName([lpszPhonebook, lpszEntry]) => Integer
RasValidateEntryNameA([lpszPhonebook, lpszEntry]) => Integer
RasValidateEntryNameW([lpszPhonebook, lpszEntry]) => Integer
RasDialDlg([lpszPhonebook, lpszEntry, lpszPhoneNumber, lpInfo]) => Integer
RasDialDlgA([lpszPhonebook, lpszEntry, lpszPhoneNumber, lpInfo]) => Integer
RasDialDlgW([lpszPhonebook, lpszEntry, lpszPhoneNumber, lpInfo]) => Integer
RasEntryDlg([lpszPhonebook, lpszEntry, lpInfo]) => Integer
RasEntryDlgA([lpszPhonebook, lpszEntry, lpInfo]) => Integer
RasEntryDlgW([lpszPhonebook, lpszEntry, lpInfo]) => Integer
RasPhonebookDlg([lpszPhonebook, lpszEntry, lpInfo]) => Integer
RasPhonebookDlgA([lpszPhonebook, lpszEntry, lpInfo]) => Integer
RasPhonebookDlgW([lpszPhonebook, lpszEntry, lpInfo]) => Integer
RasSecurityDialogGetInfo([hPort, pBuffer]) => Integer
RasSecurityDialogReceive([hPort, pBuffer, pBufferLength, Timeout, hEvent]) => Integer
RasSecurityDialogSend([hPort, pBuffer, BufferLength]) => Integer
AssocCreateForClasses([rgClasses, cClasses, riid, ppv]) => Integer
AssocGetDetailsOfPropKey([psf, pidl, pkey, pv, pfFoundPropKey]) => Integer
CDefFolderMenu_Create2([pidlFolder, hwnd, cidl, apidl, psf, lpfn, nKeys, ahkeys, ppcm]) => Integer
CIDLData_CreateFromIDArray([pidlFolder, cidl, apidl, ppdtobj]) => Integer
CommandLineToArgvW([lpCmdLine, pNumArgs]) => Integer
DAD_AutoScroll([hwnd, pad, pptNow]) => Integer
DAD_DragEnterEx([hwndTarget, ptStart]) => Integer
DAD_DragEnterEx2([hwndTarget, ptStart, pdtObject]) => Integer
DAD_DragLeave() => Integer
DAD_DragMove([pt]) => Integer
DAD_SetDragImage([him, pptOffset]) => Integer
DAD_ShowDragImage([fShow]) => Integer
DllGetVersion([pdvi]) => Integer
DoEnvironmentSubst([pszSrc, cchSrc]) => Integer
DoEnvironmentSubstA([pszSrc, cchSrc]) => Integer
DoEnvironmentSubstW([pszSrc, cchSrc]) => Integer
DragAcceptFiles([hWnd, fAccept]) => void
DragFinish([hDrop]) => void
DragQueryFile([hDrop, iFile, lpszFile, cch]) => Integer
DragQueryFileA([hDrop, iFile, lpszFile, cch]) => Integer
DragQueryFileW([hDrop, iFile, lpszFile, cch]) => Integer
DragQueryPoint([hDrop, lppt]) => Integer
DriveType([iDrive]) => Integer
DuplicateIcon([hInst, hIcon]) => Integer
ExtractAssociatedIcon([hInst, lpIconPath, lpiIcon]) => Integer
ExtractAssociatedIconA([hInst, lpIconPath, lpiIcon]) => Integer
ExtractAssociatedIconEx([hInst, lpIconPath, lpiIconIndex, lpiIconId]) => Integer
ExtractAssociatedIconExA([hInst, lpIconPath, lpiIconIndex, lpiIconId]) => Integer
ExtractAssociatedIconExW([hInst, lpIconPath, lpiIconIndex, lpiIconId]) => Integer
ExtractAssociatedIconW([hInst, lpIconPath, lpiIcon]) => Integer
ExtractIcon([hInst, lpszExeFileName, nIconIndex]) => Integer
ExtractIconA([hInst, lpszExeFileName, nIconIndex]) => Integer
ExtractIconEx([lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons]) => Integer
ExtractIconExA([lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons]) => Integer
ExtractIconExW([lpszFile, nIconIndex, phiconLarge, phiconSmall, nIcons]) => Integer
ExtractIconW([hInst, lpszExeFileName, nIconIndex]) => Integer
FindExecutable([lpFile, lpDirectory, lpResult]) => Integer
FindExecutableA([lpFile, lpDirectory, lpResult]) => Integer
FindExecutableW([lpFile, lpDirectory, lpResult]) => Integer
GetCurrentProcessExplicitAppUserModelID([AppID]) => Integer
GetFileNameFromBrowse([hwnd, pszFilePath, cchFilePath, pszWorkingDir, pszDefExt, pszFilters, szTitle]) => Integer
ILAppendID([pidl, pmkid, fAppend]) => Integer
ILClone([pidl]) => Integer
ILCloneFirst([pidl]) => Integer
ILCombine([pidl1, pidl2]) => Integer
ILCreateFromPath([pszPath]) => Integer
ILCreateFromPathA([pszPath]) => Integer
ILCreateFromPathW([pszPath]) => Integer
ILFindChild([pidlParent, pidlChild]) => Integer
ILFindLastID([pidl]) => Integer
ILFree([pidl]) => void
ILGetNext([pidl]) => Integer
ILGetSize([pidl]) => Integer
ILIsEqual([pidl1, pidl2]) => Integer
ILIsParent([pidl1, pidl2, fImmediate]) => Integer
ILLoadFromStreamEx([pstm, pidl]) => Integer
ILRemoveLastID([pidl]) => Integer
ILSaveToStream([pstm, pidl]) => Integer
InitNetworkAddressControl() => Integer
IsNetDrive([iDrive]) => Integer
IsUserAnAdmin() => Integer
OpenRegStream([hkey, pszSubkey, pszValue, grfMode]) => Integer
PathCleanupSpec([pszDir, pszSpec]) => Integer
PathGetShortPath([pszLongPath]) => void
PathIsExe([szfile]) => Integer
PathIsSlow([pszFile, dwFileAttr]) => Integer
PathIsSlowA([pszFile, dwFileAttr]) => Integer
PathIsSlowW([pszFile, dwFileAttr]) => Integer
PathMakeUniqueName([pszUniqueName, cchMax, pszTemplate, pszLongPlate, pszDir]) => Integer
PathResolve([pszPath, dirs, fFlags]) => Integer
PathYetAnotherMakeUniqueName([pszUniqueName, pszPath, pszShort, pszFileSpec]) => Integer
PickIconDlg([hwnd, pszIconPath, cchIconPath, piIconIndex]) => Integer
PifMgr_CloseProperties([hProps, flOpt]) => Integer
PifMgr_GetProperties([hProps, pszGroup, lpProps, cbProps, flOpt]) => Integer
PifMgr_OpenProperties([pszApp, lpszPIF, hInf, flOpt]) => Integer
PifMgr_SetProperties([hProps, pszGroup, lpProps, cbProps, flOpt]) => Integer
ReadCabinetState([pcs, cLength]) => Integer
RealDriveType([iDrive, fOKToHitNet]) => Integer
RestartDialog([hParent, pszPrompt, dwFlags]) => Integer
RestartDialogEx([hParent, pszPrompt, dwFlags, dwReasonCode]) => Integer
SetCurrentProcessExplicitAppUserModelID([AppID]) => Integer
SHAddDefaultPropertiesByExt([pszExt, pPropStore]) => Integer
SHAddFromPropSheetExtArray([hpsxa, lpfnAddPage, lParam]) => Integer
SHAddToRecentDocs([uFlags, pv]) => void
SHAlloc([cb]) => Integer
SHAppBarMessage([dwMessage, pData]) => Integer
SHAssocEnumHandlers([pszExtra, afFilter, ppEnumHandler]) => Integer
SHAssocEnumHandlersForProtocolByApplication([protocol, riid, enumHandlers]) => Integer
SHBindToFolderIDListParent([psfRoot, pidl, riid, ppv, ppidlLast]) => Integer
SHBindToFolderIDListParentEx([psfRoot, pidl, ppbc, riid, ppv, ppidlLast]) => Integer
SHBindToObject([psf, pidl, pbc, riid, ppv]) => Integer
SHBindToParent([pidl, riid, ppv, ppidlLast]) => Integer
SHBrowseForFolder([lpbi]) => Integer
SHBrowseForFolderA([lpbi]) => Integer
SHBrowseForFolderW([lpbi]) => Integer
SHChangeNotification_Lock([hChange, dwProcId, pppidl, plEvent]) => Integer
SHChangeNotification_Unlock([hLock]) => Integer
SHChangeNotify([wEventId, uFlags, dwItem1, dwItem2]) => void
SHChangeNotifyDeregister([ulID]) => Integer
SHChangeNotifyRegister([hwnd, fSources, fEvents, wMsg, cEntries, pshcne]) => Integer
SHChangeNotifyRegisterThread([status]) => void
SHCloneSpecialIDList([hwndOwner, csidl, fCreate]) => Integer
SHCLSIDFromString([psz, pcClsid]) => Integer
SHCoCreateInstance([pszCLSID, pclsid, pUnkOuter, riid, ppv]) => Integer
SHCreateAssociationRegistration([riid, ppv]) => Integer
SHCreateDataObject([pidlFolder, cidl, apidl, pdtInner, riid, ppv]) => Integer
SHCreateDefaultContextMenu([pdcm, riid, ppv]) => Integer
SHCreateDefaultExtractIcon([riid, ppv]) => Integer
SHCreateDefaultPropertiesOp([psi, ppFileOp]) => Integer
SHCreateDirectory([hwnd, pszPath]) => Integer
SHCreateDirectoryEx([hwnd, pszPath, psa]) => Integer
SHCreateDirectoryExA([hwnd, pszPath, psa]) => Integer
SHCreateDirectoryExW([hwnd, pszPath, psa]) => Integer
SHCreateFileExtractIcon([pszFile, dwFileAttributes, riid, ppv]) => Integer
SHCreateFileExtractIconW([pszFile, dwFileAttributes, riid, ppv]) => Integer
SHCreateItemFromIDList([pidl, riid, ppv]) => Integer
SHCreateItemFromParsingName([pszPath, pbc, riid, ppv]) => Integer
SHCreateItemFromRelativeName([psiParent, pszName, pbc, riid, ppv]) => Integer
SHCreateItemInKnownFolder([kfid, dwKFFlags, pszItem, riid, ppv]) => Integer
SHCreateItemWithParent([pidlParent, psfParent, pidl, riid, ppvItem]) => Integer
SHCreateProcessAsUserW([pscpi]) => Integer
SHCreatePropSheetExtArray([hkey, pszSubkey, max_iface]) => Integer
SHCreateQueryCancelAutoPlayMoniker([ppmoniker]) => Integer
SHCreateShellFolderView([pcsfv, ppsv]) => Integer
SHCreateShellFolderViewEx([pcsfv, ppsv]) => Integer
SHCreateShellItem([pidlParent, psfParent, pidl, ppsi]) => Integer
SHCreateShellItemArray([pidlParent, psf, cidl, ppidl, ppsiItemArray]) => Integer
SHCreateShellItemArrayFromDataObject([pdo, riid, ppv]) => Integer
SHCreateShellItemArrayFromIDLists([cidl, rgpidl, ppsiItemArray]) => Integer
SHCreateShellItemArrayFromShellItem([psi, riid, ppv]) => Integer
SHCreateStdEnumFmtEtc([cfmt, afmt, ppenumFormatEtc]) => Integer
SHDefExtractIcon([pszIconFile, iIndex, uFlags, phiconLarge, phiconSmall, nIconSize]) => Integer
SHDefExtractIconA([pszIconFile, iIndex, uFlags, phiconLarge, phiconSmall, nIconSize]) => Integer
SHDefExtractIconW([pszIconFile, iIndex, uFlags, phiconLarge, phiconSmall, nIconSize]) => Integer
SHDestroyPropSheetExtArray([hpsxa]) => void
SHDoDragDrop([hwnd, pdtobj, pdsrc, dwEffect, pdwEffect]) => Integer
Shell_GetCachedImageIndex([pwszIconPath, iIconIndex, uIconFlags]) => Integer
Shell_GetCachedImageIndexA([pwszIconPath, iIconIndex, uIconFlags]) => Integer
Shell_GetCachedImageIndexW([pwszIconPath, iIconIndex, uIconFlags]) => Integer
Shell_GetImageLists([phiml, phimlSmall]) => Integer
Shell_MergeMenus([hmDst, hmSrc, uInsert, uIDAdjust, uIDAdjustMax, uFlags]) => Integer
Shell_NotifyIcon([dwMessage, lpdata]) => Integer
Shell_NotifyIconA([dwMessage, lpdata]) => Integer
Shell_NotifyIconGetRect([identifier, iconLocation]) => Integer
Shell_NotifyIconW([dwMessage, lpdata]) => Integer
ShellAbout([hWnd, szApp, szOtherStuff, hIcon]) => Integer
ShellAboutA([hWnd, szApp, szOtherStuff, hIcon]) => Integer
ShellAboutW([hWnd, szApp, szOtherStuff, hIcon]) => Integer
ShellExecute([hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd]) => Integer
ShellExecuteA([hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd]) => Integer
ShellExecuteEx([pExecInfo]) => Integer
ShellExecuteExA([pExecInfo]) => Integer
ShellExecuteExW([pExecInfo]) => Integer
ShellExecuteW([hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd]) => Integer
SHEmptyRecycleBin([hwnd, pszRootPath, dwFlags]) => Integer
SHEmptyRecycleBinA([hwnd, pszRootPath, dwFlags]) => Integer
SHEmptyRecycleBinW([hwnd, pszRootPath, dwFlags]) => Integer
SHEnumerateUnreadMailAccounts([hKeyUser, dwIndex, pszMailAddress, cchMailAddress]) => Integer
SHEnumerateUnreadMailAccountsW([hKeyUser, dwIndex, pszMailAddress, cchMailAddress]) => Integer
SHEvaluateSystemCommandTemplate([pszCmdTemplate, ppszApplication, ppszCommandLine, ppszParameters]) => Integer
SHExtractIconsW([pszFileName, nIconIndex, cxIcon, cyIcon, phIcon, pIconId, nIcons, flags]) => Integer
SHFileOperation([lpFileOp]) => Integer
SHFileOperationA([lpFileOp]) => Integer
SHFileOperationW([lpFileOp]) => Integer
SHFind_InitMenuPopup([hmenu, hwnd, idCmdFirst, idCmdLast]) => Integer
SHFindFiles([pidlFolder, pidlSaveFile]) => Integer
SHFlushSFCache() => Integer
SHFormatDrive([hwnd, drive, fmtID, options]) => Integer
SHFree([pv]) => void
SHFreeNameMappings([hNameMappings]) => void
SHGetAttributesFromDataObject([pdo, dwAttributeMask, pdwAttributes, pcItems]) => Integer
SHGetDataFromIDList([psf, pidl, nFormat, pv, cb]) => Integer
SHGetDataFromIDListA([psf, pidl, nFormat, pv, cb]) => Integer
SHGetDataFromIDListW([psf, pidl, nFormat, pv, cb]) => Integer
SHGetDesktopFolder([ppshf]) => Integer
SHGetDiskFreeSpace([pszVolume, pqwFreeCaller, pqwTot, pqwFree]) => Integer
SHGetDiskFreeSpaceA([pszVolume, pqwFreeCaller, pqwTot, pqwFree]) => Integer
SHGetDiskFreeSpaceEx([pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes]) => Integer
SHGetDiskFreeSpaceExA([pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes]) => Integer
SHGetDiskFreeSpaceExW([pszDirectoryName, pulFreeBytesAvailableToCaller, pulTotalNumberOfBytes, pulTotalNumberOfFreeBytes]) => Integer
SHGetDriveMedia([pszDrive, pdwMediaContent]) => Integer
SHGetFileInfo([pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags]) => Integer
SHGetFileInfoA([pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags]) => Integer
SHGetFileInfoW([pszPath, dwFileAttributes, psfi, cbFileInfo, uFlags]) => Integer
SHGetFolderLocation([hwndOwner, nFolder, hToken, dwReserved, ppidl]) => Integer
SHGetFolderPath([hwndOwner, nFolder, hToken, dwFlags, pszPath]) => Integer
SHGetFolderPathA([hwndOwner, nFolder, hToken, dwFlags, pszPath]) => Integer
SHGetFolderPathAndSubDir([hwnd, csidl, hToken, dwFlags, pszSubDir, pszPath]) => Integer
SHGetFolderPathAndSubDirA([hwnd, csidl, hToken, dwFlags, pszSubDir, pszPath]) => Integer
SHGetFolderPathAndSubDirW([hwnd, csidl, hToken, dwFlags, pszSubDir, pszPath]) => Integer
SHGetFolderPathW([hwndOwner, nFolder, hToken, dwFlags, pszPath]) => Integer
SHGetIconOverlayIndex([pszIconPath, iIconIndex]) => Integer
SHGetIconOverlayIndexA([pszIconPath, iIconIndex]) => Integer
SHGetIconOverlayIndexW([pszIconPath, iIconIndex]) => Integer
SHGetIDListFromObject([punk, ppidl]) => Integer
SHGetImageList([iImageList, riid, ppv]) => Integer
SHGetInstanceExplorer([ppunk]) => Integer
SHGetItemFromDataObject([pdtobj, dwFlags, riid, ppv]) => Integer
SHGetItemFromObject([punk, riid, ppv]) => Integer
SHGetKnownFolderIDList([rfid, dwFlags, hToken, ppidl]) => Integer
SHGetKnownFolderItem([rfid, dwFlags, hToken, riid, ppv]) => Integer
SHGetKnownFolderPath([rfid, dwFlags, hToken, ppszPath]) => Integer
SHGetLocalizedName([pszPath, pszResModule, cch, pidsRes]) => Integer
SHGetMalloc([ppMalloc]) => Integer
SHGetNameFromIDList([pidl, sigdnName, ppszName]) => Integer
SHGetNewLinkInfo([pszLinkTo, pszDir, pszName, pfMustCopy, uFlags]) => Integer
SHGetNewLinkInfoA([pszLinkTo, pszDir, pszName, pfMustCopy, uFlags]) => Integer
SHGetNewLinkInfoW([pszLinkTo, pszDir, pszName, pfMustCopy, uFlags]) => Integer
SHGetPathFromIDList([pidl, pszPath]) => Integer
SHGetPathFromIDListA([pidl, pszPath]) => Integer
SHGetPathFromIDListEx([pidl, pszPath, cchPath, uOpts]) => Integer
SHGetPathFromIDListW([pidl, pszPath]) => Integer
SHGetPropertyStoreForWindow([hwnd, riid, ppv]) => Integer
SHGetPropertyStoreFromIDList([pidl, flags, riid, ppv]) => Integer
SHGetPropertyStoreFromParsingName([pszPath, pbc, flags, riid, ppv]) => Integer
SHGetRealIDL([psf, pidlSimple, ppidlReal]) => Integer
SHGetSetFolderCustomSettings([pfcs, pszPath, dwReadWrite]) => Integer
SHGetSetSettings([lpss, dwMask, bSet]) => void
SHGetSettings([lpsfs, dwMask]) => void
SHGetSpecialFolderLocation([hwndOwner, nFolder, ppidl]) => Integer
SHGetSpecialFolderPath([hwndOwner, lpszPath, csidl, fCreate]) => Integer
SHGetSpecialFolderPathA([hwndOwner, lpszPath, csidl, fCreate]) => Integer
SHGetSpecialFolderPathW([hwndOwner, lpszPath, csidl, fCreate]) => Integer
SHGetStockIconInfo([siid, uFlags, psii]) => Integer
SHGetTemporaryPropertyForItem([psi, pk, ppropvarInk]) => Integer
SHGetUnreadMailCount([hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand]) => Integer
SHGetUnreadMailCountW([hKeyUser, pszMailAddress, pdwCount, pFileTime, pszShellExecuteCommand, cchShellExecuteCommand]) => Integer
SHHandleUpdateImage([pidlExtra]) => Integer
SHILCreateFromPath([pszPath, ppidl, rgflnOut]) => Integer
SHInvokePrinterCommand([hwnd, uAction, lpBuf1, lpBuf2, fModal]) => Integer
SHInvokePrinterCommandA([hwnd, uAction, lpBuf1, lpBuf2, fModal]) => Integer
SHInvokePrinterCommandW([hwnd, uAction, lpBuf1, lpBuf2, fModal]) => Integer
SHIsFileAvailableOffline([pszPath, pdwStatus]) => Integer
SHLimitInputEdit([hwndEdit, psf]) => Integer
SHLoadInProc([rclsid]) => Integer
SHLoadNonloadedIconOverlayIdentifiers() => Integer
SHMapPIDLToSystemImageListIndex([psf, pidl, piIndex]) => Integer
SHMultiFileProperties([pdtobj, dwFlags]) => Integer
SHObjectProperties([hwnd, shopObjectType, pszObjectName, pszPropertyPage]) => Integer
SHOpenFolderAndSelectItems([pidlFolder, cidl, apidl, dwFlags]) => Integer
SHOpenPropSheet([pszCaption, ahkeys, ckeys, pclsidDef, pdtobj, psb, pStartPage]) => Integer
SHOpenPropSheetW([pszCaption, ahkeys, ckeys, pclsidDef, pdtobj, psb, pStartPage]) => Integer
SHOpenWithDialog([hwndParent, poainfo]) => Integer
SHParseDisplayName([pszName, pbc, ppidl, sfgaoIn, psfgaoOut]) => Integer
SHPathPrepareForWrite([hwnd, punkEnableModless, pszPath, SHPPFW_DEFAULT]) => Integer
SHPathPrepareForWriteA([hwnd, punkEnableModless, pszPath, SHPPFW_DEFAULT]) => Integer
SHPathPrepareForWriteW([hwnd, punkEnableModless, pszPath, SHPPFW_DEFAULT]) => Integer
SHPropStgCreate([psstg, fmtid, pclsid, grfFlags, grfMode, dwDisposition, ppstg, puCodePage]) => Integer
SHPropStgReadMultiple([pps, uCodePage, cpspec, rgpspec, rgvar]) => Integer
SHPropStgWriteMultiple([pps, uCodePage, cpspec, rgpspec, rgvar, propidNameFirst]) => Integer
SHQueryRecycleBin([pszRootPath, pSHQueryRBInfo]) => Integer
SHQueryRecycleBinA([pszRootPath, pSHQueryRBInfo]) => Integer
SHQueryRecycleBinW([pszRootPath, pSHQueryRBInfo]) => Integer
SHQueryUserNotificationState([pquns]) => Integer
SHRemoveLocalizedName([pszPath]) => Integer
SHReplaceFromPropSheetExtArray([hpsxa, uPageID, lpfnReplaceWith, lParam]) => Integer
SHResolveLibrary([psiLibrary]) => Integer
SHRestricted([rest]) => Integer
SHSetDefaultProperties([hwnd, psi, dwFileOpFlags, pfops]) => Integer
SHSetFolderPath([csidl, hToken, dwFlags, pszPath]) => Integer
SHSetFolderPathA([csidl, hToken, dwFlags, pszPath]) => Integer
SHSetFolderPathW([csidl, hToken, dwFlags, pszPath]) => Integer
SHSetInstanceExplorer([pUnk]) => void
SHSetKnownFolderPath([rfid, dwFlags, hToken, pszPath]) => Integer
SHSetLocalizedName([pszPath, pszResModule, idsRes]) => Integer
SHSetTemporaryPropertyForItem([psi, propkey, propvar]) => Integer
SHSetUnreadMailCount([pszMailAddress, dwCount, pszShellExecuteCommand]) => Integer
SHSetUnreadMailCountW([pszMailAddress, dwCount, pszShellExecuteCommand]) => Integer
SHShellFolderView_Message([hwndMain, uMsg, lParam]) => Integer
SHShowManageLibraryUI([psiLibrary, hwndOwner, pszTitle, pszInstruction, lmdOptions]) => Integer
SHSimpleIDListFromPath([pszPath]) => Integer
SHStartNetConnectionDialog([hwnd, pszRemoteName, dwType]) => Integer
SHStartNetConnectionDialogW([hwnd, pszRemoteName, dwType]) => Integer
SHTestTokenMembership([hToken, ulRID]) => Integer
SHUpdateImage([pszHashItem, iIndex, uFlags, iImageIndex]) => void
SHUpdateImageA([pszHashItem, iIndex, uFlags, iImageIndex]) => void
SHUpdateImageW([pszHashItem, iIndex, uFlags, iImageIndex]) => void
SHValidateUNC([hwndOwner, pszFile, fConnect]) => Integer
SignalFileOpen([pidl]) => Integer
StgMakeUniqueName([pstgParent, pszFileSpec, grfMode, riid, ppv]) => Integer
Win32DeleteFile([pszFileName]) => Integer
WOWShellExecute([hwnd, lpOperation, lpFile, lpParameters, lpDirectory, nShowCmd, lpfnCBWinExec]) => Integer
WriteCabinetState([pcs]) => Integer
AssocCreate([clsid, riid, ppv]) => Integer
AssocGetPerceivedType([pszExt, ptype, pflag, ppszType]) => Integer
AssocIsDangerous([pszAssoc]) => Integer
AssocQueryKey([flags, key, pszAssoc, pszExtra, phkeyOut]) => Integer
AssocQueryKeyA([flags, key, pszAssoc, pszExtra, phkeyOut]) => Integer
AssocQueryKeyW([flags, key, pszAssoc, pszExtra, phkeyOut]) => Integer
AssocQueryString([flags, str, pszAssoc, pszExtra, pszOut, pcchOut]) => Integer
AssocQueryStringA([flags, str, pszAssoc, pszExtra, pszOut, pcchOut]) => Integer
AssocQueryStringByKey([flags, str, hkAssoc, pszExtra, pszOut, pcchOut]) => Integer
AssocQueryStringByKeyA([flags, str, hkAssoc, pszExtra, pszOut, pcchOut]) => Integer
AssocQueryStringByKeyW([flags, str, hkAssoc, pszExtra, pszOut, pcchOut]) => Integer
AssocQueryStringW([flags, str, pszAssoc, pszExtra, pszOut, pcchOut]) => Integer
ChrCmpI([w1, w2]) => Integer
ChrCmpIA([w1, w2]) => Integer
ChrCmpIW([w1, w2]) => Integer
ColorAdjustLuma([clrRGB, n, fScale]) => Integer
ColorHLSToRGB([wHue, wLuminance, wSaturation]) => Integer
ColorRGBToHLS([clrRGB, pwHue, pwLuminance, pwSaturation]) => void
ConnectToConnectionPoint([punk, riidEvent, fConnect, punkTarget, pdwCookie, ppcpOut]) => Integer
DllInstall([bInstall, pszCmdLine]) => Integer
GetAcceptLanguages([pszLanguages, pcchLanguages]) => Integer
GetAcceptLanguagesA([pszLanguages, pcchLanguages]) => Integer
GetAcceptLanguagesW([pszLanguages, pcchLanguages]) => Integer
GetMenuPosFromID([hmenu, id]) => Integer
HashData([pbData, cbData, pbHash, cbHash]) => Integer
IntlStrEqWorker([fCaseSens, pszStr1, pszStr2, nChar]) => Integer
IntlStrEqWorkerA([fCaseSens, pszStr1, pszStr2, nChar]) => Integer
IntlStrEqWorkerW([fCaseSens, pszStr1, pszStr2, nChar]) => Integer
IsCharSpace([wch]) => Integer
IsCharSpaceA([wch]) => Integer
IsCharSpaceW([wch]) => Integer
IsInternetESCEnabled() => Integer
IsOS([dwOS]) => Integer
IStream_Copy([pstmFrom, pstmTo, cb]) => Integer
IStream_Read([pstm, pv, cb]) => Integer
IStream_ReadPidl([pstm, ppidlOut]) => Integer
IStream_ReadStr([pstm, ppsz]) => Integer
IStream_Reset([pstm]) => Integer
IStream_Size([pstm, pui]) => Integer
IStream_Write([pstm, pv, cb]) => Integer
IStream_WritePidl([pstm, pidlWrite]) => Integer
IStream_WriteStr([pstm, psz]) => Integer
IUnknown_AtomicRelease([ppunk]) => void
IUnknown_GetSite([punk, riid, ppvSite]) => Integer
IUnknown_GetWindow([punk, phwnd]) => Integer
IUnknown_QueryService([punk, guidService, riid, ppvOut]) => Integer
IUnknown_Set([ppunk, punk]) => void
IUnknown_SetSite([punk, punkSite]) => Integer
MLFreeLibrary([hModule]) => Integer
MLLoadLibrary([lpszLibFileName, hModule, dwCrossCodePage]) => Integer
MLLoadLibraryA([lpszLibFileName, hModule, dwCrossCodePage]) => Integer
MLLoadLibraryW([lpszLibFileName, hModule, dwCrossCodePage]) => Integer
ParseURL([pcszUrl, ppu]) => Integer
ParseURLA([pcszUrl, ppu]) => Integer
ParseURLW([pcszUrl, ppu]) => Integer
PathAddBackslash([lpszPath]) => String
PathAddBackslashA([lpszPath]) => String
PathAddBackslashW([lpszPath]) => String
PathAddExtension([pszPath, pszExtension]) => Integer
PathAddExtensionA([pszPath, pszExtension]) => Integer
PathAddExtensionW([pszPath, pszExtension]) => Integer
PathAppend([pszPath, pszMore]) => Integer
PathAppendA([pszPath, pszMore]) => Integer
PathAppendW([pszPath, pszMore]) => Integer
PathBuildRoot([szRoot, iDrive]) => String
PathBuildRootA([szRoot, iDrive]) => String
PathBuildRootW([szRoot, iDrive]) => String
PathCanonicalize([lpszDst, lpszSrc]) => Integer
PathCanonicalizeA([lpszDst, lpszSrc]) => Integer
PathCanonicalizeW([lpszDst, lpszSrc]) => Integer
PathCombine([pszPathOut, pszPathIn, pszMore]) => String
PathCombineA([pszPathOut, pszPathIn, pszMore]) => String
PathCombineW([pszPathOut, pszPathIn, pszMore]) => String
PathCommonPrefix([pszFile1, pszFile2, pszPath]) => Integer
PathCommonPrefixA([pszFile1, pszFile2, pszPath]) => Integer
PathCommonPrefixW([pszFile1, pszFile2, pszPath]) => Integer
PathCompactPath([hDC, lpszPath, dx]) => Integer
PathCompactPathA([hDC, lpszPath, dx]) => Integer
PathCompactPathEx([pszOut, pszSrc, cchMax, dwFlags]) => Integer
PathCompactPathExA([pszOut, pszSrc, cchMax, dwFlags]) => Integer
PathCompactPathExW([pszOut, pszSrc, cchMax, dwFlags]) => Integer
PathCompactPathW([hDC, lpszPath, dx]) => Integer
PathCreateFromUrl([pszUrl, pszPath, pcchPath, dwFlags]) => Integer
PathCreateFromUrlA([pszUrl, pszPath, pcchPath, dwFlags]) => Integer
PathCreateFromUrlAlloc([pszIn, ppszOut, dwFlags]) => Integer
PathCreateFromUrlW([pszUrl, pszPath, pcchPath, dwFlags]) => Integer
PathFileExists([pszPath]) => Integer
PathFileExistsA([pszPath]) => Integer
PathFileExistsW([pszPath]) => Integer
PathFindExtension([pszPath]) => String
PathFindExtensionA([pszPath]) => String
PathFindExtensionW([pszPath]) => String
PathFindFileName([pPath]) => String
PathFindFileNameA([pPath]) => String
PathFindFileNameW([pPath]) => String
PathFindNextComponent([pszPath]) => String
PathFindNextComponentA([pszPath]) => String
PathFindNextComponentW([pszPath]) => String
PathFindOnPath([pszFile, ppszOtherDirs]) => Integer
PathFindOnPathA([pszFile, ppszOtherDirs]) => Integer
PathFindOnPathW([pszFile, ppszOtherDirs]) => Integer
PathFindSuffixArray([pszPath, apszSuffix, iArraySize]) => String
PathFindSuffixArrayA([pszPath, apszSuffix, iArraySize]) => String
PathFindSuffixArrayW([pszPath, apszSuffix, iArraySize]) => String
PathGetArgs([pszPath]) => String
PathGetArgsA([pszPath]) => String
PathGetArgsW([pszPath]) => String
PathGetCharType([ch]) => Integer
PathGetCharTypeA([ch]) => Integer
PathGetCharTypeW([ch]) => Integer
PathGetDriveNumber([lpsz]) => Integer
PathGetDriveNumberA([lpsz]) => Integer
PathGetDriveNumberW([lpsz]) => Integer
PathIsContentType([pszPath, pszContentType]) => Integer
PathIsContentTypeA([pszPath, pszContentType]) => Integer
PathIsContentTypeW([pszPath, pszContentType]) => Integer
PathIsDirectory([pszPath]) => Integer
PathIsDirectoryA([pszPath]) => Integer
PathIsDirectoryEmpty([pszPath]) => Integer
PathIsDirectoryEmptyA([pszPath]) => Integer
PathIsDirectoryEmptyW([pszPath]) => Integer
PathIsDirectoryW([pszPath]) => Integer
PathIsFileSpec([lpszPath]) => Integer
PathIsFileSpecA([lpszPath]) => Integer
PathIsFileSpecW([lpszPath]) => Integer
PathIsLFNFileSpec([pszName]) => Integer
PathIsLFNFileSpecA([pszName]) => Integer
PathIsLFNFileSpecW([pszName]) => Integer
PathIsNetworkPath([pszPath]) => Integer
PathIsNetworkPathA([pszPath]) => Integer
PathIsNetworkPathW([pszPath]) => Integer
PathIsPrefix([pszPrefix, pszPath]) => Integer
PathIsPrefixA([pszPrefix, pszPath]) => Integer
PathIsPrefixW([pszPrefix, pszPath]) => Integer
PathIsRelative([lpszPath]) => Integer
PathIsRelativeA([lpszPath]) => Integer
PathIsRelativeW([lpszPath]) => Integer
PathIsRoot([pPath]) => Integer
PathIsRootA([pPath]) => Integer
PathIsRootW([pPath]) => Integer
PathIsSameRoot([pszPath1, pszPath2]) => Integer
PathIsSameRootA([pszPath1, pszPath2]) => Integer
PathIsSameRootW([pszPath1, pszPath2]) => Integer
PathIsSystemFolder([pszPath, dwAttrb]) => Integer
PathIsSystemFolderA([pszPath, dwAttrb]) => Integer
PathIsSystemFolderW([pszPath, dwAttrb]) => Integer
PathIsUNC([pszPath]) => Integer
PathIsUNCA([pszPath]) => Integer
PathIsUNCServer([pszPath]) => Integer
PathIsUNCServerA([pszPath]) => Integer
PathIsUNCServerShare([pszPath]) => Integer
PathIsUNCServerShareA([pszPath]) => Integer
PathIsUNCServerShareW([pszPath]) => Integer
PathIsUNCServerW([pszPath]) => Integer
PathIsUNCW([pszPath]) => Integer
PathIsURL([pszPath]) => Integer
PathIsURLA([pszPath]) => Integer
PathIsURLW([pszPath]) => Integer
PathMakePretty([lpPath]) => Integer
PathMakePrettyA([lpPath]) => Integer
PathMakePrettyW([lpPath]) => Integer
PathMakeSystemFolder([pszPath]) => Integer
PathMakeSystemFolderA([pszPath]) => Integer
PathMakeSystemFolderW([pszPath]) => Integer
PathMatchSpec([pszFile, pszSpec]) => Integer
PathMatchSpecA([pszFile, pszSpec]) => Integer
PathMatchSpecEx([pszFile, pszSpec, dwFlags]) => Integer
PathMatchSpecExA([pszFile, pszSpec, dwFlags]) => Integer
PathMatchSpecExW([pszFile, pszSpec, dwFlags]) => Integer
PathMatchSpecW([pszFile, pszSpec]) => Integer
PathParseIconLocation([pszIconFile]) => Integer
PathParseIconLocationA([pszIconFile]) => Integer
PathParseIconLocationW([pszIconFile]) => Integer
PathQuoteSpaces([lpsz]) => Integer
PathQuoteSpacesA([lpsz]) => Integer
PathQuoteSpacesW([lpsz]) => Integer
PathRelativePathTo([pszPath, pszFrom, dwAttrFrom, pszTo, dwAttrTo]) => Integer
PathRelativePathToA([pszPath, pszFrom, dwAttrFrom, pszTo, dwAttrTo]) => Integer
PathRelativePathToW([pszPath, pszFrom, dwAttrFrom, pszTo, dwAttrTo]) => Integer
PathRemoveArgs([pszPath]) => void
PathRemoveArgsA([pszPath]) => void
PathRemoveArgsW([pszPath]) => void
PathRemoveBackslash([lpszPath]) => String
PathRemoveBackslashA([lpszPath]) => String
PathRemoveBackslashW([lpszPath]) => String
PathRemoveBlanks([lpszString]) => void
PathRemoveBlanksA([lpszString]) => void
PathRemoveBlanksW([lpszString]) => void
PathRemoveExtension([pszPath]) => void
PathRemoveExtensionA([pszPath]) => void
PathRemoveExtensionW([pszPath]) => void
PathRemoveFileSpec([pszPath]) => Integer
PathRemoveFileSpecA([pszPath]) => Integer
PathRemoveFileSpecW([pszPath]) => Integer
PathRenameExtension([pszPath, pszExt]) => Integer
PathRenameExtensionA([pszPath, pszExt]) => Integer
PathRenameExtensionW([pszPath, pszExt]) => Integer
PathSearchAndQualify([pcszPath, pszFullyQualifiedPath, cchFullyQualifiedPath]) => Integer
PathSearchAndQualifyA([pcszPath, pszFullyQualifiedPath, cchFullyQualifiedPath]) => Integer
PathSearchAndQualifyW([pcszPath, pszFullyQualifiedPath, cchFullyQualifiedPath]) => Integer
PathSetDlgItemPath([hDlg, id, pszPath]) => void
PathSetDlgItemPathA([hDlg, id, pszPath]) => void
PathSetDlgItemPathW([hDlg, id, pszPath]) => void
PathSkipRoot([pszPath]) => String
PathSkipRootA([pszPath]) => String
PathSkipRootW([pszPath]) => String
PathStripPath([pszPath]) => void
PathStripPathA([pszPath]) => void
PathStripPathW([pszPath]) => void
PathStripToRoot([szRoot]) => Integer
PathStripToRootA([szRoot]) => Integer
PathStripToRootW([szRoot]) => Integer
PathUndecorate([pszPath]) => void
PathUndecorateA([pszPath]) => void
PathUndecorateW([pszPath]) => void
PathUnExpandEnvStrings([pszPath, pszBuf, cchBuf]) => Integer
PathUnExpandEnvStringsA([pszPath, pszBuf, cchBuf]) => Integer
PathUnExpandEnvStringsW([pszPath, pszBuf, cchBuf]) => Integer
PathUnmakeSystemFolder([pszPath]) => Integer
PathUnmakeSystemFolderA([pszPath]) => Integer
PathUnmakeSystemFolderW([pszPath]) => Integer
PathUnquoteSpaces([lpsz]) => void
PathUnquoteSpacesA([lpsz]) => void
PathUnquoteSpacesW([lpsz]) => void
QISearch([that, pqit, riid, ppv]) => Integer
SHAllocShared([pvData, dwSize, dwDestinationProcessId]) => Integer
SHAnsiToAnsi([pszSrc, pszDst, cchBuf]) => Integer
SHAnsiToUnicode([pszSrc, pwszDst, cwchBuf]) => Integer
SHAutoComplete([hwndEdit, dwFlags]) => Integer
SHCopyKey([hkeySrc, pszSrcSubKey, hkeyDest, fReserved]) => Integer
SHCopyKeyA([hkeySrc, pszSrcSubKey, hkeyDest, fReserved]) => Integer
SHCopyKeyW([hkeySrc, pszSrcSubKey, hkeyDest, fReserved]) => Integer
SHCreateMemStream([pInit, cbInit]) => Integer
SHCreateShellPalette([hdc]) => Integer
SHCreateStreamOnFile([pszFile, grfMode, ppstm]) => Integer
SHCreateStreamOnFileA([pszFile, grfMode, ppstm]) => Integer
SHCreateStreamOnFileEx([pszFile, grfMode, dwAttributes, fCreate, pstmTemplate, ppstm]) => Integer
SHCreateStreamOnFileW([pszFile, grfMode, ppstm]) => Integer
SHCreateThread([pfnThreadProc, pData, dwFlags, pfnCallback]) => Integer
SHCreateThreadRef([pcRef, ppunk]) => Integer
SHCreateThreadWithHandle([pfnThreadProc, pData, flags, pfnCallback, pHandle]) => Integer
SHDeleteEmptyKey([hkey, pszSubKey]) => Integer
SHDeleteEmptyKeyA([hkey, pszSubKey]) => Integer
SHDeleteEmptyKeyW([hkey, pszSubKey]) => Integer
SHDeleteKey([hkey, pszSubKey]) => Integer
SHDeleteKeyA([hkey, pszSubKey]) => Integer
SHDeleteKeyW([hkey, pszSubKey]) => Integer
SHDeleteValue([hkey, pszSubKey, pszValue]) => Integer
SHDeleteValueA([hkey, pszSubKey, pszValue]) => Integer
SHDeleteValueW([hkey, pszSubKey, pszValue]) => Integer
ShellMessageBox([hInst, hWnd, pszMsg, pszTitle, fuStyle,  _In_ *]) => Integer
ShellMessageBoxA([hInst, hWnd, pszMsg, pszTitle, fuStyle,  _In_ *]) => Integer
ShellMessageBoxW([hInst, hWnd, pszMsg, pszTitle, fuStyle,  _In_ *]) => Integer
SHEnumKeyEx([hkey, dwIndex, pszName, pcchName]) => Integer
SHEnumKeyExA([hkey, dwIndex, pszName, pcchName]) => Integer
SHEnumKeyExW([hkey, dwIndex, pszName, pcchName]) => Integer
SHEnumValue([hkey, dwIndex, pszValueName, pcchValueName, pdwType, pvData, pcbData]) => Integer
SHEnumValueA([hkey, dwIndex, pszValueName, pcchValueName, pdwType, pvData, pcbData]) => Integer
SHEnumValueW([hkey, dwIndex, pszValueName, pcchValueName, pdwType, pvData, pcbData]) => Integer
SHFormatDateTime([pft, pdwFlags, pszBuf, cchBuf]) => Integer
SHFormatDateTimeA([pft, pdwFlags, pszBuf, cchBuf]) => Integer
SHFormatDateTimeW([pft, pdwFlags, pszBuf, cchBuf]) => Integer
SHFreeShared([hData, dwProcessId]) => Integer
SHGetInverseCMAP([pbMap, cbMap]) => Integer
SHGetThreadRef([ppunk]) => Integer
SHGetValue([hkey, pszSubKey, pszValue, pdwType, pvData, pcbData]) => Integer
SHGetValueA([hkey, pszSubKey, pszValue, pdwType, pvData, pcbData]) => Integer
SHGetValueW([hkey, pszSubKey, pszValue, pdwType, pvData, pcbData]) => Integer
SHGetViewStatePropertyBag([pidl, pszBagName, dwFlags, riid, ppv]) => Integer
SHIsChildOrSelf([hWndParent, hWnd]) => Integer
SHLoadIndirectString([pszSource, pszOutBuf, cchOutBuf, ppvReserved]) => Integer
SHLockShared([hData, dwProcessId]) => Integer
SHMessageBoxCheck([hwnd, pszText, pszCaption, uType, iDefault, pszRegVal]) => Integer
SHMessageBoxCheckA([hwnd, pszText, pszCaption, uType, iDefault, pszRegVal]) => Integer
SHMessageBoxCheckW([hwnd, pszText, pszCaption, uType, iDefault, pszRegVal]) => Integer
SHOpenRegStream([hkey, pszSubkey, pszValue, grfMode]) => Integer
SHOpenRegStream2([hkey, pszSubkey, pszValue, grfMode]) => Integer
SHOpenRegStream2A([hkey, pszSubkey, pszValue, grfMode]) => Integer
SHOpenRegStream2W([hkey, pszSubkey, pszValue, grfMode]) => Integer
SHOpenRegStreamA([hkey, pszSubkey, pszValue, grfMode]) => Integer
SHOpenRegStreamW([hkey, pszSubkey, pszValue, grfMode]) => Integer
SHQueryInfoKey([hkey, pcSubKeys, pcchMaxSubKeyLen, pcValues, pcchMaxValueNameLen]) => Integer
SHQueryInfoKeyA([hkey, pcSubKeys, pcchMaxSubKeyLen, pcValues, pcchMaxValueNameLen]) => Integer
SHQueryInfoKeyW([hkey, pcSubKeys, pcchMaxSubKeyLen, pcValues, pcchMaxValueNameLen]) => Integer
SHQueryValueEx([hkey, pszValue, pdwReserved, pdwType, pvData, pcbData]) => Integer
SHQueryValueExA([hkey, pszValue, pdwReserved, pdwType, pvData, pcbData]) => Integer
SHQueryValueExW([hkey, pszValue, pdwReserved, pdwType, pvData, pcbData]) => Integer
SHRegCloseUSKey([hUSKey]) => Integer
SHRegCreateUSKey([pszPath, samDesired, hRelativeUSKey, phNewUSKey, dwFlags]) => Integer
SHRegCreateUSKeyA([pszPath, samDesired, hRelativeUSKey, phNewUSKey, dwFlags]) => Integer
SHRegCreateUSKeyW([pszPath, samDesired, hRelativeUSKey, phNewUSKey, dwFlags]) => Integer
SHRegDeleteEmptyUSKey([hUSKey, pszValue, delRegFlags]) => Integer
SHRegDeleteEmptyUSKeyA([hUSKey, pszValue, delRegFlags]) => Integer
SHRegDeleteEmptyUSKeyW([hUSKey, pszValue, delRegFlags]) => Integer
SHRegDeleteUSValue([hUSKey, pszValue, delRegFlags]) => Integer
SHRegDeleteUSValueA([hUSKey, pszValue, delRegFlags]) => Integer
SHRegDeleteUSValueW([hUSKey, pszValue, delRegFlags]) => Integer
SHRegDuplicateHKey([hKey]) => Integer
SHRegEnumUSKey([hUSKey, dwIndex, pszName, pcchName, enumRegFlags]) => Integer
SHRegEnumUSKeyA([hUSKey, dwIndex, pszName, pcchName, enumRegFlags]) => Integer
SHRegEnumUSKeyW([hUSKey, dwIndex, pszName, pcchName, enumRegFlags]) => Integer
SHRegEnumUSValue([hUSKey, dwIndex, pszValueName, pcchValueNameLen, pdwType, pvData, pcbData, enumRegFlags]) => Integer
SHRegEnumUSValueA([hUSKey, dwIndex, pszValueName, pcchValueNameLen, pdwType, pvData, pcbData, enumRegFlags]) => Integer
SHRegEnumUSValueW([hUSKey, dwIndex, pszValueName, pcchValueNameLen, pdwType, pvData, pcbData, enumRegFlags]) => Integer
SHRegGetBoolUSValue([pszSubKey, pszValue, fIgnoreHKCU, fDefault]) => Integer
SHRegGetBoolUSValueA([pszSubKey, pszValue, fIgnoreHKCU, fDefault]) => Integer
SHRegGetBoolUSValueW([pszSubKey, pszValue, fIgnoreHKCU, fDefault]) => Integer
SHRegGetIntW([hk, szKey, nDefault]) => Integer
SHRegGetPath([hkey, pszSubkey, pszValue, pszPath, dwFlags]) => Integer
SHRegGetPathA([hkey, pszSubkey, pszValue, pszPath, dwFlags]) => Integer
SHRegGetPathW([hkey, pszSubkey, pszValue, pszPath, dwFlags]) => Integer
SHRegGetUSValue([pszSubKey, pszValue, pdwType, pvData, pcbData, fIgnoreHKCU, pvDefaultData, dwDefaultDataSize]) => Integer
SHRegGetUSValueA([pszSubKey, pszValue, pdwType, pvData, pcbData, fIgnoreHKCU, pvDefaultData, dwDefaultDataSize]) => Integer
SHRegGetUSValueW([pszSubKey, pszValue, pdwType, pvData, pcbData, fIgnoreHKCU, pvDefaultData, dwDefaultDataSize]) => Integer
SHRegGetValue([hkey, pszSubKey, pszValue, srrfFlags, pdwType, pvData, pcbData]) => Integer
SHRegGetValueA([hkey, pszSubKey, pszValue, srrfFlags, pdwType, pvData, pcbData]) => Integer
SHRegGetValueW([hkey, pszSubKey, pszValue, srrfFlags, pdwType, pvData, pcbData]) => Integer
SHRegOpenUSKey([pszPath, samDesired, hRelativeUSKey, phNewUSKey, fIgnoreHKCU]) => Integer
SHRegOpenUSKeyA([pszPath, samDesired, hRelativeUSKey, phNewUSKey, fIgnoreHKCU]) => Integer
SHRegOpenUSKeyW([pszPath, samDesired, hRelativeUSKey, phNewUSKey, fIgnoreHKCU]) => Integer
SHRegQueryInfoUSKey([hUSKey, pcSubKeys, pcchMaxSubKeyLen, pcValues, pcchMaxValueNameLen, enumRegFlags]) => Integer
SHRegQueryInfoUSKeyA([hUSKey, pcSubKeys, pcchMaxSubKeyLen, pcValues, pcchMaxValueNameLen, enumRegFlags]) => Integer
SHRegQueryInfoUSKeyW([hUSKey, pcSubKeys, pcchMaxSubKeyLen, pcValues, pcchMaxValueNameLen, enumRegFlags]) => Integer
SHRegQueryUSValue([hUSKey, pszValue, pdwType, pvData, pcbData, fIgnoreHKCU, pvDefaultData, dwDefaultDataSize]) => Integer
SHRegQueryUSValueA([hUSKey, pszValue, pdwType, pvData, pcbData, fIgnoreHKCU, pvDefaultData, dwDefaultDataSize]) => Integer
SHRegQueryUSValueW([hUSKey, pszValue, pdwType, pvData, pcbData, fIgnoreHKCU, pvDefaultData, dwDefaultDataSize]) => Integer
SHRegSetPath([hkey, pszSubkey, pszValue, pszPath, dwFlags]) => Integer
SHRegSetPathA([hkey, pszSubkey, pszValue, pszPath, dwFlags]) => Integer
SHRegSetPathW([hkey, pszSubkey, pszValue, pszPath, dwFlags]) => Integer
SHRegSetUSValue([pszSubKey, pszValue, dwType, pvData, cbData, dwFlags]) => Integer
SHRegSetUSValueA([pszSubKey, pszValue, dwType, pvData, cbData, dwFlags]) => Integer
SHRegSetUSValueW([pszSubKey, pszValue, dwType, pvData, cbData, dwFlags]) => Integer
SHRegWriteUSValue([hUSKey, pszValue, dwType, pvData, cbData, dwFlags]) => Integer
SHRegWriteUSValueA([hUSKey, pszValue, dwType, pvData, cbData, dwFlags]) => Integer
SHRegWriteUSValueW([hUSKey, pszValue, dwType, pvData, cbData, dwFlags]) => Integer
SHReleaseThreadRef() => Integer
SHSendMessageBroadcast([uMsg, wParam, lParam]) => Integer
SHSendMessageBroadcastA([uMsg, wParam, lParam]) => Integer
SHSendMessageBroadcastW([uMsg, wParam, lParam]) => Integer
SHSetThreadRef([pUnk]) => Integer
SHSetValue([hkey, pszSubKey, pszValue, dwType, pvData, cbData]) => Integer
SHSetValueA([hkey, pszSubKey, pszValue, dwType, pvData, cbData]) => Integer
SHSetValueW([hkey, pszSubKey, pszValue, dwType, pvData, cbData]) => Integer
SHSkipJunction([pbc, pclsid]) => Integer
SHStrDup([pszSource, ppwsz]) => Integer
SHStrDupA([pszSource, ppwsz]) => Integer
SHStrDupW([pszSource, ppwsz]) => Integer
SHStripMneumonic([pszMenu]) => Integer
SHStripMneumonicA([pszMenu]) => Integer
SHStripMneumonicW([pszMenu]) => Integer
SHUnicodeToAnsi([pwszSrc, pszDst, cchBuf]) => Integer
SHUnicodeToUnicode([pwzSrc, pwzDst, cwchBuf]) => Integer
SHUnlockShared([pvData]) => Integer
StrCat([psz1, psz2]) => String
StrCatBuff([pszDest, pszSrc, cchDestBuffSize]) => String
StrCatBuffA([pszDest, pszSrc, cchDestBuffSize]) => String
StrCatBuffW([pszDest, pszSrc, cchDestBuffSize]) => String
StrCatChainW([pszDst, cchDst, ichAt, pszSrc]) => Integer
StrCatW([psz1, psz2]) => String
StrChr([pszStart, wMatch]) => String
StrChrA([pszStart, wMatch]) => String
StrChrI([pszStart, wMatch]) => String
StrChrIA([pszStart, wMatch]) => String
StrChrIW([pszStart, wMatch]) => String
StrChrNIW([pszStart, wMatch, cchMax]) => Integer
StrChrNW([pszStart, wMatch, cchMax]) => Integer
StrChrW([pszStart, wMatch]) => String
StrCmp([psz1, psz2]) => Integer
StrCmpC([lpStr1, lpStr2]) => Integer
StrCmpCA([lpStr1, lpStr2]) => Integer
StrCmpCW([lpStr1, lpStr2]) => Integer
StrCmpI([psz1, psz2]) => Integer
StrCmpIC([lpStr1, lpStr2]) => Integer
StrCmpICA([lpStr1, lpStr2]) => Integer
StrCmpICW([lpStr1, lpStr2]) => Integer
StrCmpIW([psz1, psz2]) => Integer
StrCmpLogicalW([psz1, psz2]) => Integer
StrCmpN([psz1, psz2, nChar]) => Integer
StrCmpNA([psz1, psz2, nChar]) => Integer
StrCmpNC([pszStr1, pszStr2, nChar]) => Integer
StrCmpNCA([pszStr1, pszStr2, nChar]) => Integer
StrCmpNCW([pszStr1, pszStr2, nChar]) => Integer
StrCmpNI([psz1, psz2, nChar]) => Integer
StrCmpNIA([psz1, psz2, nChar]) => Integer
StrCmpNIC([pszStr1, pszStr2, nChar]) => Integer
StrCmpNICA([pszStr1, pszStr2, nChar]) => Integer
StrCmpNICW([pszStr1, pszStr2, nChar]) => Integer
StrCmpNIW([psz1, psz2, nChar]) => Integer
StrCmpNW([psz1, psz2, nChar]) => Integer
StrCmpW([psz1, psz2]) => Integer
StrCpy([psz1, psz2]) => String
StrCpyN([pszDst, pszSrc, cchMax]) => String
StrCpyNW([pszDst, pszSrc, cchMax]) => String
StrCpyW([psz1, psz2]) => String
StrCSpn([pszStr, pszSet]) => Integer
StrCSpnA([pszStr, pszSet]) => Integer
StrCSpnI([pszStr, pszSet]) => Integer
StrCSpnIA([pszStr, pszSet]) => Integer
StrCSpnIW([pszStr, pszSet]) => Integer
StrCSpnW([pszStr, pszSet]) => Integer
StrDup([pszSrch]) => String
StrDupA([pszSrch]) => String
StrDupW([pszSrch]) => String
StrFormatByteSize64([qdw, pszBuf, cchBuf]) => String
StrFormatByteSize64A([qdw, pszBuf, cchBuf]) => String
StrFormatByteSizeA([dw, pszBuf, cchBuf]) => String
StrFormatByteSizeEx([ull, flags, pszBuf, cchBuf]) => Integer
StrFormatByteSizeW([qdw, pszBuf, cchBuf]) => Integer
StrFormatKBSize([qdw, pszBuf, cchBuf]) => String
StrFormatKBSizeA([qdw, pszBuf, cchBuf]) => String
StrFormatKBSizeW([qdw, pszBuf, cchBuf]) => String
StrFromTimeInterval([pszOut, cchMax, dwTimeMS, digits]) => Integer
StrFromTimeIntervalA([pszOut, cchMax, dwTimeMS, digits]) => Integer
StrFromTimeIntervalW([pszOut, cchMax, dwTimeMS, digits]) => Integer
StrIsIntlEqual([fCaseSens, pszString1, pszString2, nChar]) => Integer
StrIsIntlEqualA([fCaseSens, pszString1, pszString2, nChar]) => Integer
StrIsIntlEqualW([fCaseSens, pszString1, pszString2, nChar]) => Integer
StrNCat([psz1, psz2, cchMax]) => String
StrNCatA([psz1, psz2, cchMax]) => String
StrNCatW([psz1, psz2, cchMax]) => String
StrPBrk([psz, pszSet]) => String
StrPBrkA([psz, pszSet]) => String
StrPBrkW([psz, pszSet]) => String
StrRChr([pszStart, pszEnd, wMatch]) => String
StrRChrA([pszStart, pszEnd, wMatch]) => String
StrRChrI([pszStart, pszEnd, wMatch]) => String
StrRChrIA([pszStart, pszEnd, wMatch]) => String
StrRChrIW([pszStart, pszEnd, wMatch]) => String
StrRChrW([pszStart, pszEnd, wMatch]) => String
StrRetToBSTR([pstr, pidl, pbstr]) => Integer
StrRetToBuf([pstr, pidl, pszBuf, cchBuf]) => Integer
StrRetToBufA([pstr, pidl, pszBuf, cchBuf]) => Integer
StrRetToBufW([pstr, pidl, pszBuf, cchBuf]) => Integer
StrRetToStr([pstr, pidl, ppszName]) => Integer
StrRetToStrA([pstr, pidl, ppszName]) => Integer
StrRetToStrW([pstr, pidl, ppszName]) => Integer
StrRStrI([pszSource, pszLast, pszSrch]) => String
StrRStrIA([pszSource, pszLast, pszSrch]) => String
StrRStrIW([pszSource, pszLast, pszSrch]) => String
StrSpn([psz, pszSet]) => Integer
StrSpnA([psz, pszSet]) => Integer
StrSpnW([psz, pszSet]) => Integer
StrStr([pszFirst, pszSrch]) => String
StrStrA([pszFirst, pszSrch]) => String
StrStrI([pszFirst, pszSrch]) => String
StrStrIA([pszFirst, pszSrch]) => String
StrStrIW([pszFirst, pszSrch]) => String
StrStrNIW([pszFirst, pszSrch, cchMax]) => Integer
StrStrNW([pszFirst, pszSrch, cchMax]) => Integer
StrStrW([pszFirst, pszSrch]) => String
StrToInt([pszSrc]) => Integer
StrToInt64Ex([pszString, dwFlags, pllRet]) => Integer
StrToInt64ExA([pszString, dwFlags, pllRet]) => Integer
StrToInt64ExW([pszString, dwFlags, pllRet]) => Integer
StrToIntA([pszSrc]) => Integer
StrToIntEx([pszString, dwFlags, piRet]) => Integer
StrToIntExA([pszString, dwFlags, piRet]) => Integer
StrToIntExW([pszString, dwFlags, piRet]) => Integer
StrToIntW([pszSrc]) => Integer
StrTrim([psz, pszTrimChars]) => Integer
StrTrimA([psz, pszTrimChars]) => Integer
StrTrimW([psz, pszTrimChars]) => Integer
UrlApplyScheme([pszIn, pszOut, pcchOut, dwFlags]) => Integer
UrlApplySchemeA([pszIn, pszOut, pcchOut, dwFlags]) => Integer
UrlApplySchemeW([pszIn, pszOut, pcchOut, dwFlags]) => Integer
UrlCanonicalize([pszUrl, pszCanonicalized, pcchCanonicalized, dwFlags]) => Integer
UrlCanonicalizeA([pszUrl, pszCanonicalized, pcchCanonicalized, dwFlags]) => Integer
UrlCanonicalizeW([pszUrl, pszCanonicalized, pcchCanonicalized, dwFlags]) => Integer
UrlCombine([pszBase, pszRelative, pszCombined, pcchCombined, dwFlags]) => Integer
UrlCombineA([pszBase, pszRelative, pszCombined, pcchCombined, dwFlags]) => Integer
UrlCombineW([pszBase, pszRelative, pszCombined, pcchCombined, dwFlags]) => Integer
UrlCompare([psz1, psz2, fIgnoreSlash]) => Integer
UrlCompareA([psz1, psz2, fIgnoreSlash]) => Integer
UrlCompareW([psz1, psz2, fIgnoreSlash]) => Integer
UrlCreateFromPath([pszPath, pszUrl, pcchUrl, dwFlags]) => Integer
UrlCreateFromPathA([pszPath, pszUrl, pcchUrl, dwFlags]) => Integer
UrlCreateFromPathW([pszPath, pszUrl, pcchUrl, dwFlags]) => Integer
UrlEscape([pszURL, pszEscaped, pcchEscaped, dwFlags]) => Integer
UrlEscapeA([pszURL, pszEscaped, pcchEscaped, dwFlags]) => Integer
UrlEscapeW([pszURL, pszEscaped, pcchEscaped, dwFlags]) => Integer
UrlFixupW([pcszUrl, pszTranslatedUrl, cchMax]) => Integer
UrlGetLocation([pszURL]) => String
UrlGetLocationA([pszURL]) => String
UrlGetLocationW([pszURL]) => String
UrlGetPart([pszIn, pszOut, pcchOut, dwPart, dwFlags]) => Integer
UrlGetPartA([pszIn, pszOut, pcchOut, dwPart, dwFlags]) => Integer
UrlGetPartW([pszIn, pszOut, pcchOut, dwPart, dwFlags]) => Integer
UrlHash([pszURL, pbHash, cbHash]) => Integer
UrlHashA([pszURL, pbHash, cbHash]) => Integer
UrlHashW([pszURL, pbHash, cbHash]) => Integer
UrlIs([pszUrl, UrlIs]) => Integer
UrlIsA([pszUrl, UrlIs]) => Integer
UrlIsNoHistory([pszURL]) => Integer
UrlIsNoHistoryA([pszURL]) => Integer
UrlIsNoHistoryW([pszURL]) => Integer
UrlIsOpaque([pszURL]) => Integer
UrlIsOpaqueA([pszURL]) => Integer
UrlIsOpaqueW([pszURL]) => Integer
UrlIsW([pszUrl, UrlIs]) => Integer
UrlUnescape([pszURL, pszUnescaped, pcchUnescaped, dwFlags]) => Integer
UrlUnescapeA([pszURL, pszUnescaped, pcchUnescaped, dwFlags]) => Integer
UrlUnescapeW([pszURL, pszUnescaped, pcchUnescaped, dwFlags]) => Integer
WhichPlatform() => Integer
wnsprintf([pszDest, cchDest, pszFmt,  _In_ *]) => Integer
wnsprintfA([pszDest, cchDest, pszFmt,  _In_ *]) => Integer
wnsprintfW([pszDest, cchDest, pszFmt,  _In_ *]) => Integer
wvnsprintf([pszDest, cchDest, pszFmt, arglist]) => Integer
wvnsprintfA([pszDest, cchDest, pszFmt, arglist]) => Integer
wvnsprintfW([pszDest, cchDest, pszFmt, arglist]) => Integer
lineAccept([hCall, lpsUserUserInfo, dwSize]) => Integer
lineAddProvider([lpszProviderFilename, hwndOwner, lpdwPermanentProviderID]) => Integer
lineAddProviderA([lpszProviderFilename, hwndOwner, lpdwPermanentProviderID]) => Integer
lineAddProviderW([lpszProviderFilename, hwndOwner, lpdwPermanentProviderID]) => Integer
lineAddToConference([hConfCall, hConsultCall]) => Integer
lineAgentSpecific([hLine, dwAddressID, dwAgentExtensionIDIndex, lpParams, dwSize]) => Integer
lineAnswer([hCall, lpsUserUserInfo, dwSize]) => Integer
lineBlindTransfer([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineBlindTransferA([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineBlindTransferW([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineClose([hLine]) => Integer
lineCompleteCall([hCall, lpdwCompletionID, dwCompletionMode, dwMessageID]) => Integer
lineCompleteTransfer([hCall, hConsultCall, lphConfCall, dwTransferMode]) => Integer
lineConfigDialog([dwDeviceID, hwndOwner, lpszDeviceClass]) => Integer
lineConfigDialogA([dwDeviceID, hwndOwner, lpszDeviceClass]) => Integer
lineConfigDialogEdit([dwDeviceID, hwndOwner, lpszDeviceClass, lpDeviceConfigIn, dwSize, lpDeviceConfigOut]) => Integer
lineConfigDialogEditA([dwDeviceID, hwndOwner, lpszDeviceClass, lpDeviceConfigIn, dwSize, lpDeviceConfigOut]) => Integer
lineConfigDialogEditW([dwDeviceID, hwndOwner, lpszDeviceClass, lpDeviceConfigIn, dwSize, lpDeviceConfigOut]) => Integer
lineConfigDialogW([dwDeviceID, hwndOwner, lpszDeviceClass]) => Integer
lineConfigProvider([hwndOwner, dwPermanentProviderID]) => Integer
lineCreateAgent([hLine, lpszAgentID, lpszAgentPIN, lphAgent]) => Integer
lineCreateAgentA([hLine, lpszAgentID, lpszAgentPIN, lphAgent]) => Integer
lineCreateAgentSession([hLine, hAgent, lpszAgentPIN, dwWorkingAddressID, lpGroupID, lphAgentSession]) => Integer
lineCreateAgentSessionA([hLine, hAgent, lpszAgentPIN, dwWorkingAddressID, lpGroupID, lphAgentSession]) => Integer
lineCreateAgentSessionW([hLine, hAgent, lpszAgentPIN, dwWorkingAddressID, lpGroupID, lphAgentSession]) => Integer
lineCreateAgentW([hLine, lpszAgentID, lpszAgentPIN, lphAgent]) => Integer
lineDeallocateCall([hCall]) => Integer
lineDevSpecific([hLine, dwAddressID, hCall, lpParams, dwSize]) => Integer
lineDevSpecificFeature([hLine, dwFeature, lpParams, dwSize]) => Integer
lineDial([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineDialA([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineDialW([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineDrop([hCall, lpsUserUserInfo, dwSize]) => Integer
lineForward([hLine, bAllAddresses, dwAddressID, lpForwardList, dwNumRingsNoAnswer, lphConsultCall, lpCallParams]) => Integer
lineForwardA([hLine, bAllAddresses, dwAddressID, lpForwardList, dwNumRingsNoAnswer, lphConsultCall, lpCallParams]) => Integer
lineForwardW([hLine, bAllAddresses, dwAddressID, lpForwardList, dwNumRingsNoAnswer, lphConsultCall, lpCallParams]) => Integer
lineGatherDigits([hCall, dwDigitModes, lpsDigits, dwNumDigits, lpszTerminationDigits, dwFirstDigitTimeout, dwInterDigitTimeout]) => Integer
lineGatherDigitsA([hCall, dwDigitModes, lpsDigits, dwNumDigits, lpszTerminationDigits, dwFirstDigitTimeout, dwInterDigitTimeout]) => Integer
lineGatherDigitsW([hCall, dwDigitModes, lpsDigits, dwNumDigits, lpszTerminationDigits, dwFirstDigitTimeout, dwInterDigitTimeout]) => Integer
lineGenerateDigits([hCall, dwDigitMode, lpszDigits, dwDuration]) => Integer
lineGenerateDigitsA([hCall, dwDigitMode, lpszDigits, dwDuration]) => Integer
lineGenerateDigitsW([hCall, dwDigitMode, lpszDigits, dwDuration]) => Integer
lineGenerateTone([hCall, dwToneMode, dwDuration, dwNumTones, lpTones]) => Integer
lineGetAddressCaps([hLineApp, dwDeviceID, dwAddressID, dwAPIVersion, dwExtVersion, lpAddressCaps]) => Integer
lineGetAddressCapsA([hLineApp, dwDeviceID, dwAddressID, dwAPIVersion, dwExtVersion, lpAddressCaps]) => Integer
lineGetAddressCapsW([hLineApp, dwDeviceID, dwAddressID, dwAPIVersion, dwExtVersion, lpAddressCaps]) => Integer
lineGetAddressID([hLine, lpdwAddressID, dwAddressMode, lpsAddress, dwSize]) => Integer
lineGetAddressIDA([hLine, lpdwAddressID, dwAddressMode, lpsAddress, dwSize]) => Integer
lineGetAddressIDW([hLine, lpdwAddressID, dwAddressMode, lpsAddress, dwSize]) => Integer
lineGetAddressStatus([hLine, dwAddressID, lpAddressStatus]) => Integer
lineGetAddressStatusA([hLine, dwAddressID, lpAddressStatus]) => Integer
lineGetAddressStatusW([hLine, dwAddressID, lpAddressStatus]) => Integer
lineGetAgentActivityList([hLine, dwAddressID, lpAgentActivityList]) => Integer
lineGetAgentActivityListA([hLine, dwAddressID, lpAgentActivityList]) => Integer
lineGetAgentActivityListW([hLine, dwAddressID, lpAgentActivityList]) => Integer
lineGetAgentCaps([hLineApp, dwDeviceID, dwAddressID, dwAppAPIVersion, lpAgentCaps]) => Integer
lineGetAgentCapsA([hLineApp, dwDeviceID, dwAddressID, dwAppAPIVersion, lpAgentCaps]) => Integer
lineGetAgentCapsW([hLineApp, dwDeviceID, dwAddressID, dwAppAPIVersion, lpAgentCaps]) => Integer
lineGetAgentGroupList([hLine, dwAddressID, lpAgentGroupList]) => Integer
lineGetAgentGroupListA([hLine, dwAddressID, lpAgentGroupList]) => Integer
lineGetAgentGroupListW([hLine, dwAddressID, lpAgentGroupList]) => Integer
lineGetAgentInfo([hLine, hAgent, lpAgentInfo]) => Integer
lineGetAgentSessionInfo([hLine, hAgentSession, lpAgentSessionInfo]) => Integer
lineGetAgentSessionList([hLine, hAgent, lpAgentSessionList]) => Integer
lineGetAgentStatus([hLine, dwAddressID, lpAgentStatus]) => Integer
lineGetAgentStatusA([hLine, dwAddressID, lpAgentStatus]) => Integer
lineGetAgentStatusW([hLine, dwAddressID, lpAgentStatus]) => Integer
lineGetAppPriority([lpszAppFilename, dwMediaMode, lpExtensionID, dwRequestMode, lpExtensionName, lpdwPriority]) => Integer
lineGetAppPriorityA([lpszAppFilename, dwMediaMode, lpExtensionID, dwRequestMode, lpExtensionName, lpdwPriority]) => Integer
lineGetAppPriorityW([lpszAppFilename, dwMediaMode, lpExtensionID, dwRequestMode, lpExtensionName, lpdwPriority]) => Integer
lineGetCallInfo([hCall, lpCallInfo]) => Integer
lineGetCallInfoA([hCall, lpCallInfo]) => Integer
lineGetCallInfoW([hCall, lpCallInfo]) => Integer
lineGetCallStatus([hCall, lpCallStatus]) => Integer
lineGetConfRelatedCalls([hCall, lpCallList]) => Integer
lineGetCountry([dwCountryID, dwAPIVersion, lpLineCountryList]) => Integer
lineGetCountryA([dwCountryID, dwAPIVersion, lpLineCountryList]) => Integer
lineGetCountryW([dwCountryID, dwAPIVersion, lpLineCountryList]) => Integer
lineGetDevCaps([hLineApp, dwDeviceID, dwAPIVersion, dwExtVersion, lpLineDevCaps]) => Integer
lineGetDevCapsA([hLineApp, dwDeviceID, dwAPIVersion, dwExtVersion, lpLineDevCaps]) => Integer
lineGetDevCapsW([hLineApp, dwDeviceID, dwAPIVersion, dwExtVersion, lpLineDevCaps]) => Integer
lineGetDevConfig([dwDeviceID, lpDeviceConfig, lpszDeviceClass]) => Integer
lineGetDevConfigA([dwDeviceID, lpDeviceConfig, lpszDeviceClass]) => Integer
lineGetDevConfigW([dwDeviceID, lpDeviceConfig, lpszDeviceClass]) => Integer
lineGetGroupList([hLine, lpGroupList]) => Integer
lineGetGroupListA([hLine, lpGroupList]) => Integer
lineGetGroupListW([hLine, lpGroupList]) => Integer
lineGetIcon([dwDeviceID, lpszDeviceClass, lphIcon]) => Integer
lineGetIconA([dwDeviceID, lpszDeviceClass, lphIcon]) => Integer
lineGetIconW([dwDeviceID, lpszDeviceClass, lphIcon]) => Integer
lineGetID([hLine, dwAddressID, hCall, dwSelect, lpDeviceID, lpszDeviceClass]) => Integer
lineGetIDA([hLine, dwAddressID, hCall, dwSelect, lpDeviceID, lpszDeviceClass]) => Integer
lineGetIDW([hLine, dwAddressID, hCall, dwSelect, lpDeviceID, lpszDeviceClass]) => Integer
lineGetLineDevStatus([hLine, lpLineDevStatus]) => Integer
lineGetLineDevStatusA([hLine, lpLineDevStatus]) => Integer
lineGetLineDevStatusW([hLine, lpLineDevStatus]) => Integer
lineGetMessage([hLineApp, lpMessage, dwTimeout]) => Integer
lineGetNewCalls([hLine, dwAddressID, dwSelect, lpCallList]) => Integer
lineGetNumRings([hLine, dwAddressID, lpdwNumRings]) => Integer
lineGetProviderList([dwAPIVersion, lpProviderList]) => Integer
lineGetProviderListA([dwAPIVersion, lpProviderList]) => Integer
lineGetProviderListW([dwAPIVersion, lpProviderList]) => Integer
lineGetProxyStatus([hLineApp, dwDeviceID, dwAppAPIVersion, lpLineProxyRequestList]) => Integer
lineGetQueueInfo([hLine, dwQueueID, lpLineQueueInfo]) => Integer
lineGetQueueList([hLine, lpGroupID, lpQueueList]) => Integer
lineGetQueueListA([hLine, lpGroupID, lpQueueList]) => Integer
lineGetQueueListW([hLine, lpGroupID, lpQueueList]) => Integer
lineGetRequest([hLineApp, dwRequestMode, lpRequestBuffer]) => Integer
lineGetRequestA([hLineApp, dwRequestMode, lpRequestBuffer]) => Integer
lineGetRequestW([hLineApp, dwRequestMode, lpRequestBuffer]) => Integer
lineGetStatusMessages([hLine, lpdwLineStates, lpdwAddressStates]) => Integer
lineGetTranslateCaps([hLineApp, dwAPIVersion, lpTranslateCaps]) => Integer
lineGetTranslateCapsA([hLineApp, dwAPIVersion, lpTranslateCaps]) => Integer
lineGetTranslateCapsW([hLineApp, dwAPIVersion, lpTranslateCaps]) => Integer
lineHandoff([hCall, lpszFileName, dwMediaMode]) => Integer
lineHandoffA([hCall, lpszFileName, dwMediaMode]) => Integer
lineHandoffW([hCall, lpszFileName, dwMediaMode]) => Integer
lineHold([hCall]) => Integer
lineInitialize([lphLineApp, hInstance, lpfnCallback, lpszAppName, lpdwNumDevs]) => Integer
lineInitializeEx([lphLineApp, hInstance, lpfnCallback, lpszFriendlyAppName, lpdwNumDevs, lpdwAPIVersion, lpLineInitializeExParams]) => Integer
lineInitializeExA([lphLineApp, hInstance, lpfnCallback, lpszFriendlyAppName, lpdwNumDevs, lpdwAPIVersion, lpLineInitializeExParams]) => Integer
lineInitializeExW([lphLineApp, hInstance, lpfnCallback, lpszFriendlyAppName, lpdwNumDevs, lpdwAPIVersion, lpLineInitializeExParams]) => Integer
lineMakeCall([hLine, lphCall, lpszDestAddress, dwCountryCode, lpCallParams]) => Integer
lineMakeCallA([hLine, lphCall, lpszDestAddress, dwCountryCode, lpCallParams]) => Integer
lineMakeCallW([hLine, lphCall, lpszDestAddress, dwCountryCode, lpCallParams]) => Integer
lineMonitorDigits([hCall, dwDigitModes]) => Integer
lineMonitorMedia([hCall, dwMediaModes]) => Integer
lineMonitorTones([hCall, lpToneList, dwNumEntries]) => Integer
lineNegotiateAPIVersion([hLineApp, dwDeviceID, dwAPILowVersion, dwAPIHighVersion, lpdwAPIVersion, lpExtensionID]) => Integer
lineNegotiateExtVersion([hLineApp, dwDeviceID, dwAPIVersion, dwExtLowVersion, dwExtHighVersion, lpdwExtVersion]) => Integer
lineOpen([hLineApp, dwDeviceID, lphLine, dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivileges, dwMediaModes, lpCallParams]) => Integer
lineOpenA([hLineApp, dwDeviceID, lphLine, dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivileges, dwMediaModes, lpCallParams]) => Integer
lineOpenW([hLineApp, dwDeviceID, lphLine, dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivileges, dwMediaModes, lpCallParams]) => Integer
linePark([hCall, dwParkMode, lpszDirAddress, lpNonDirAddress]) => Integer
lineParkA([hCall, dwParkMode, lpszDirAddress, lpNonDirAddress]) => Integer
lineParkW([hCall, dwParkMode, lpszDirAddress, lpNonDirAddress]) => Integer
linePickup([hLine, dwAddressID, lphCall, lpszDestAddress, lpszGroupID]) => Integer
linePickupA([hLine, dwAddressID, lphCall, lpszDestAddress, lpszGroupID]) => Integer
linePickupW([hLine, dwAddressID, lphCall, lpszDestAddress, lpszGroupID]) => Integer
linePrepareAddToConference([hConfCall, lphConsultCall, lpCallParams]) => Integer
linePrepareAddToConferenceA([hConfCall, lphConsultCall, lpCallParams]) => Integer
linePrepareAddToConferenceW([hConfCall, lphConsultCall, lpCallParams]) => Integer
lineProxyMessage([hLine, hCall, dwMsg, dwParam1, dwParam2, dwParam3]) => Integer
lineProxyResponse([hLine, lpProxyRequest, dwResult]) => Integer
lineRedirect([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineRedirectA([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineRedirectW([hCall, lpszDestAddress, dwCountryCode]) => Integer
lineRegisterRequestRecipient([hLineApp, dwRegistrationInstance, dwRequestMode, bEnable]) => Integer
lineReleaseUserUserInfo([hCall]) => Integer
lineRemoveFromConference([hCall]) => Integer
lineRemoveProvider([dwPermanentProviderID, hwndOwner]) => Integer
lineSecureCall([hCall]) => Integer
lineSendUserUserInfo([hCall, lpsUserUserInfo, dwSize]) => Integer
lineSetAgentActivity([hLine, dwAddressID, dwActivityID]) => Integer
lineSetAgentGroup([hLine, dwAddressID, lpAgentGroupList]) => Integer
lineSetAgentMeasurementPeriod([hLine, hAgent, dwMeasurementPeriod]) => Integer
lineSetAgentSessionState([hLine, hAgentSession, dwAgentSessionState, dwNextAgentSessionState]) => Integer
lineSetAgentState([hLine, dwAddressID, dwAgentState, dwNextAgentState]) => Integer
lineSetAgentStateEx([hLine, hAgent, dwAgentState, dwNextAgentState]) => Integer
lineSetAppPriority([lpszAppFilename, dwMediaMode, lpExtensionID, dwRequestMode, lpszExtensionName, dwPriority]) => Integer
lineSetAppPriorityA([lpszAppFilename, dwMediaMode, lpExtensionID, dwRequestMode, lpszExtensionName, dwPriority]) => Integer
lineSetAppPriorityW([lpszAppFilename, dwMediaMode, lpExtensionID, dwRequestMode, lpszExtensionName, dwPriority]) => Integer
lineSetAppSpecific([hCall, dwAppSpecific]) => Integer
lineSetCallData([hCall, lpCallData, dwSize]) => Integer
lineSetCallParams([hCall, dwBearerMode, dwMinRate, dwMaxRate, lpDialParams]) => Integer
lineSetCallPrivilege([hCall, dwCallPrivilege]) => Integer
lineSetCallQualityOfService([hCall, lpSendingFlowspec, dwSendingFlowspecSize, lpReceivingFlowspec, dwReceivingFlowspecSize]) => Integer
lineSetCallTreatment([hCall, dwTreatment]) => Integer
lineSetCurrentLocation([hLineApp, dwLocation]) => Integer
lineSetDevConfig([dwDeviceID, lpDeviceConfig, dwSize, lpszDeviceClass]) => Integer
lineSetDevConfigA([dwDeviceID, lpDeviceConfig, dwSize, lpszDeviceClass]) => Integer
lineSetDevConfigW([dwDeviceID, lpDeviceConfig, dwSize, lpszDeviceClass]) => Integer
lineSetLineDevStatus([hLine, dwStatusToChange, fStatus]) => Integer
lineSetMediaControl([hLine, dwAddressID, hCall, dwSelect, lpDigitList, dwDigitNumEntries, lpMediaList, dwMediaNumEntries, lpToneList, dwToneNumEntries, lpCallStateList, dwCallStateNumEntries]) => Integer
lineSetMediaMode([hCall, dwMediaModes]) => Integer
lineSetNumRings([hLine, dwAddressID, dwNumRings]) => Integer
lineSetQueueMeasurementPeriod([hLine, dwQueueID, dwMeasurementPeriod]) => Integer
lineSetStatusMessages([hLine, dwLineStates, dwAddressStates]) => Integer
lineSetTerminal([hLine, dwAddressID, hCall, dwSelect, dwTerminalModes, dwTerminalID, bEnable]) => Integer
lineSetTollList([hLineApp, dwDeviceID, lpszAddressIn, dwTollListOption]) => Integer
lineSetTollListA([hLineApp, dwDeviceID, lpszAddressIn, dwTollListOption]) => Integer
lineSetTollListW([hLineApp, dwDeviceID, lpszAddressIn, dwTollListOption]) => Integer
lineSetupConference([hCall, hLine, lphConfCall, lphConsultCall, dwNumParties, lpCallParams]) => Integer
lineSetupConferenceA([hCall, hLine, lphConfCall, lphConsultCall, dwNumParties, lpCallParams]) => Integer
lineSetupConferenceW([hCall, hLine, lphConfCall, lphConsultCall, dwNumParties, lpCallParams]) => Integer
lineSetupTransfer([hCall, lphConsultCall, lpCallParams]) => Integer
lineSetupTransferA([hCall, lphConsultCall, lpCallParams]) => Integer
lineSetupTransferW([hCall, lphConsultCall, lpCallParams]) => Integer
lineShutdown([hLineApp]) => Integer
lineSwapHold([hActiveCall, hHeldCall]) => Integer
lineTranslateAddress([hLineApp, dwDeviceID, dwAPIVersion, lpszAddressIn, dwCard, dwTranslateOptions, lpTranslateOutput]) => Integer
lineTranslateAddressA([hLineApp, dwDeviceID, dwAPIVersion, lpszAddressIn, dwCard, dwTranslateOptions, lpTranslateOutput]) => Integer
lineTranslateAddressW([hLineApp, dwDeviceID, dwAPIVersion, lpszAddressIn, dwCard, dwTranslateOptions, lpTranslateOutput]) => Integer
lineTranslateDialog([hLineApp, dwDeviceID, dwAPIVersion, hwndOwner, lpszAddressIn]) => Integer
lineTranslateDialogA([hLineApp, dwDeviceID, dwAPIVersion, hwndOwner, lpszAddressIn]) => Integer
lineTranslateDialogW([hLineApp, dwDeviceID, dwAPIVersion, hwndOwner, lpszAddressIn]) => Integer
lineUncompleteCall([hLine, dwCompletionID]) => Integer
lineUnhold([hCall]) => Integer
lineUnpark([hLine, dwAddressID, lphCall, lpszDestAddress]) => Integer
lineUnparkA([hLine, dwAddressID, lphCall, lpszDestAddress]) => Integer
lineUnparkW([hLine, dwAddressID, lphCall, lpszDestAddress]) => Integer
phoneClose([hPhone]) => Integer
phoneConfigDialog([dwDeviceID, hwndOwner, lpszDeviceClass]) => Integer
phoneConfigDialogA([dwDeviceID, hwndOwner, lpszDeviceClass]) => Integer
phoneConfigDialogW([dwDeviceID, hwndOwner, lpszDeviceClass]) => Integer
phoneDevSpecific([hPhone, lpParams, dwSize]) => Integer
phoneGetButtonInfo([hPhone, dwButtonLampID, lpButtonInfo]) => Integer
phoneGetButtonInfoA([hPhone, dwButtonLampID, lpButtonInfo]) => Integer
phoneGetButtonInfoW([hPhone, dwButtonLampID, lpButtonInfo]) => Integer
phoneGetData([hPhone, dwDataID, lpData, dwSize]) => Integer
phoneGetDevCaps([hPhoneApp, dwDeviceID, dwAPIVersion, dwExtVersion, lpPhoneCaps]) => Integer
phoneGetDevCapsA([hPhoneApp, dwDeviceID, dwAPIVersion, dwExtVersion, lpPhoneCaps]) => Integer
phoneGetDevCapsW([hPhoneApp, dwDeviceID, dwAPIVersion, dwExtVersion, lpPhoneCaps]) => Integer
phoneGetDisplay([hPhone, lpDisplay]) => Integer
phoneGetGain([hPhone, dwHookSwitchDev, lpdwGain]) => Integer
phoneGetHookSwitch([hPhone, lpdwHookSwitchDevs]) => Integer
phoneGetIcon([dwDeviceID, lpszDeviceClass, lphIcon]) => Integer
phoneGetIconA([dwDeviceID, lpszDeviceClass, lphIcon]) => Integer
phoneGetIconW([dwDeviceID, lpszDeviceClass, lphIcon]) => Integer
phoneGetID([hPhone, lpDeviceID, lpszDeviceClass]) => Integer
phoneGetIDA([hPhone, lpDeviceID, lpszDeviceClass]) => Integer
phoneGetIDW([hPhone, lpDeviceID, lpszDeviceClass]) => Integer
phoneGetLamp([hPhone, dwButtonLampID, lpdwLampMode]) => Integer
phoneGetMessage([hPhoneApp, lpMessage, dwTimeout]) => Integer
phoneGetRing([hPhone, lpdwRingMode, lpdwVolume]) => Integer
phoneGetStatus([hPhone, lpPhoneStatus]) => Integer
phoneGetStatusA([hPhone, lpPhoneStatus]) => Integer
phoneGetStatusMessages([hPhone, lpdwPhoneStates, lpdwButtonModes, lpdwButtonStates]) => Integer
phoneGetStatusW([hPhone, lpPhoneStatus]) => Integer
phoneGetVolume([hPhone, dwHookSwitchDev, lpdwVolume]) => Integer
phoneInitialize([lphPhoneApp, hInstance, lpfnCallback, lpszAppName, lpdwNumDevs]) => Integer
phoneInitializeEx([lphPhoneApp, hInstance, lpfnCallback, lpszFriendlyAppName, lpdwNumDevs, lpdwAPIVersion, lpPhoneInitializeExParams]) => Integer
phoneInitializeExA([lphPhoneApp, hInstance, lpfnCallback, lpszFriendlyAppName, lpdwNumDevs, lpdwAPIVersion, lpPhoneInitializeExParams]) => Integer
phoneInitializeExW([lphPhoneApp, hInstance, lpfnCallback, lpszFriendlyAppName, lpdwNumDevs, lpdwAPIVersion, lpPhoneInitializeExParams]) => Integer
phoneNegotiateAPIVersion([hPhoneApp, dwDeviceID, dwAPILowVersion, dwAPIHighVersion, lpdwAPIVersion, lpExtensionID]) => Integer
phoneNegotiateExtVersion([hPhoneApp, dwDeviceID, dwAPIVersion, dwExtLowVersion, dwExtHighVersion, lpdwExtVersion]) => Integer
phoneOpen([hPhoneApp, dwDeviceID, lphPhone, dwAPIVersion, dwExtVersion, dwCallbackInstance, dwPrivilege]) => Integer
phoneSetButtonInfo([hPhone, dwButtonLampID, lpButtonInfo]) => Integer
phoneSetButtonInfoA([hPhone, dwButtonLampID, lpButtonInfo]) => Integer
phoneSetButtonInfoW([hPhone, dwButtonLampID, lpButtonInfo]) => Integer
phoneSetData([hPhone, dwDataID, lpData, dwSize]) => Integer
phoneSetDisplay([hPhone, dwRow, dwColumn, lpsDisplay, dwSize]) => Integer
phoneSetGain([hPhone, dwHookSwitchDev, dwGain]) => Integer
phoneSetHookSwitch([hPhone, dwHookSwitchDevs, dwHookSwitchMode]) => Integer
phoneSetLamp([hPhone, dwButtonLampID, dwLampMode]) => Integer
phoneSetRing([hPhone, dwRingMode, dwVolume]) => Integer
phoneSetStatusMessages([hPhone, dwPhoneStates, dwButtonModes, dwButtonStates]) => Integer
phoneSetVolume([hPhone, dwHookSwitchDev, dwVolume]) => Integer
phoneShutdown([hPhoneApp]) => Integer
tapiGetLocationInfo([lpszCountryCode, lpszCityCode]) => Integer
tapiGetLocationInfoA([lpszCountryCode, lpszCityCode]) => Integer
tapiGetLocationInfoW([lpszCountryCode, lpszCityCode]) => Integer
tapiRequestDrop([hWnd, wRequestID]) => Integer
tapiRequestMakeCall([lpszDestAddress, lpszAppName, lpszCalledParty, lpszComment]) => Integer
tapiRequestMakeCallA([lpszDestAddress, lpszAppName, lpszCalledParty, lpszComment]) => Integer
tapiRequestMakeCallW([lpszDestAddress, lpszAppName, lpszCalledParty, lpszComment]) => Integer
ActivateKeyboardLayout([hkl, Flags]) => Integer
AddClipboardFormatListener([hwnd]) => Integer
AdjustWindowRect([lpRect, dwStyle, bMenu]) => Integer
AdjustWindowRectEx([lpRect, dwStyle, bMenu, dwExStyle]) => Integer
AllowSetForegroundWindow([dwProcessId]) => Integer
AnimateWindow([hwnd, dwTime, dwFlags]) => Integer
AnyPopup() => Integer
AppendMenu([hMenu, uFlags, uIDNewItem, lpNewItem]) => Integer
AppendMenuA([hMenu, uFlags, uIDNewItem, lpNewItem]) => Integer
AppendMenuW([hMenu, uFlags, uIDNewItem, lpNewItem]) => Integer
ArrangeIconicWindows([hwnd]) => Integer
AttachThreadInput([idAttach, idAttachTo, fAttach]) => Integer
BeginDeferWindowPos([nNumWindows]) => Integer
BeginPaint([hwnd, lpPaint]) => Integer
BlockInput_([fBlockIt]) => Integer
BringWindowToTop([hwnd]) => Integer
BroadcastSystemMessage([dwFlags, lpdwRecipients, uiMessage, wParam, lParam]) => Integer
BroadcastSystemMessageA([dwFlags, lpdwRecipients, uiMessage, wParam, lParam]) => Integer
BroadcastSystemMessageEx([dwFlags, lpdwRecipients, uiMessage, wParam, lParam, pBSMInfo]) => Integer
BroadcastSystemMessageExA([dwFlags, lpdwRecipients, uiMessage, wParam, lParam, pBSMInfo]) => Integer
BroadcastSystemMessageExW([dwFlags, lpdwRecipients, uiMessage, wParam, lParam, pBSMInfo]) => Integer
BroadcastSystemMessageW([dwFlags, lpdwRecipients, uiMessage, wParam, lParam]) => Integer
CalculatePopupWindowPosition([anchorPoint, windowSize, flags, excludeRect, popupWindowPosition]) => Integer
CallMsgFilter([lpMsg, nCode]) => Integer
CallMsgFilterA([lpMsg, nCode]) => Integer
CallMsgFilterW([lpMsg, nCode]) => Integer
CallNextHookEx([hhk, nCode, wParam, lParam]) => Integer
CallWindowProc([lpPrevWndFunc, hWnd, Msg, wParam, lParam]) => Integer
CallWindowProcA([lpPrevWndFunc, hWnd, Msg, wParam, lParam]) => Integer
CallWindowProcW([lpPrevWndFunc, hWnd, Msg, wParam, lParam]) => Integer
CascadeWindows([hwndParent, wHow, lpRect, cKids, lpKids]) => Integer
ChangeClipboardChain([hWndRemove, hWndNewNext]) => Integer
ChangeDisplaySettings([lpDevMode, dwflags]) => Integer
ChangeDisplaySettingsA([lpDevMode, dwflags]) => Integer
ChangeDisplaySettingsEx([lpszDeviceName, lpDevMode, hwnd, dwflags, lParam]) => Integer
ChangeDisplaySettingsExA([lpszDeviceName, lpDevMode, hwnd, dwflags, lParam]) => Integer
ChangeDisplaySettingsExW([lpszDeviceName, lpDevMode, hwnd, dwflags, lParam]) => Integer
ChangeDisplaySettingsW([lpDevMode, dwflags]) => Integer
ChangeWindowMessageFilter([message, dwFlag]) => Integer
ChangeWindowMessageFilterEx([hWnd, message, action, pChangeFilterStruct]) => Integer
CharLower([lpsz]) => String
CharLowerA([lpsz]) => String
CharLowerBuff([lpsz, cchLength]) => Integer
CharLowerBuffA([lpsz, cchLength]) => Integer
CharLowerBuffW([lpsz, cchLength]) => Integer
CharLowerW([lpsz]) => String
CharNext([lpsz]) => String
CharNextA([lpsz]) => String
CharNextExA([CodePage, lpCurrentChar, dwFlags]) => String
CharNextW([lpsz]) => String
CharPrev([lpszStart, lpszCurrent]) => String
CharPrevA([lpszStart, lpszCurrent]) => String
CharPrevExA([CodePage, lpStart, lpCurrentChar, dwFlags]) => String
CharPrevW([lpszStart, lpszCurrent]) => String
CharToOem([lpszSrc, lpszDst]) => Integer
CharToOemA([lpszSrc, lpszDst]) => Integer
CharToOemBuff([lpszSrc, lpszDst, cchDstLength]) => Integer
CharToOemBuffA([lpszSrc, lpszDst, cchDstLength]) => Integer
CharToOemBuffW([lpszSrc, lpszDst, cchDstLength]) => Integer
CharToOemW([lpszSrc, lpszDst]) => Integer
CharUpper([lpsz]) => String
CharUpperA([lpsz]) => String
CharUpperBuff([lpsz, cchLength]) => Integer
CharUpperBuffA([lpsz, cchLength]) => Integer
CharUpperBuffW([lpsz, cchLength]) => Integer
CharUpperW([lpsz]) => String
CheckDlgButton([hDlg, nIDButton, uCheck]) => Integer
CheckMenuItem([hmenu, uIDCheckItem, uCheck]) => Integer
CheckMenuRadioItem([hmenu, idFirst, idLast, idCheck, uFlags]) => Integer
CheckRadioButton([hDlg, nIDFirstButton, nIDLastButton, nIDCheckButton]) => Integer
ChildWindowFromPoint([hWndParent, Point]) => Integer
ChildWindowFromPointEx([hwndParent, pt, uFlags]) => Integer
ClientToScreen([hWnd, lpPoint]) => Integer
ClipCursor([lpRect]) => Integer
CloseClipboard() => Integer
CloseDesktop([hDesktop]) => Integer
CloseGestureInfoHandle([hGestureInfo]) => Integer
CloseTouchInputHandle([hTouchInput]) => Integer
CloseWindow([hwnd]) => Integer
CloseWindowStation([hWinSta]) => Integer
CopyAcceleratorTable([hAccelSrc, lpAccelDst, cAccelEntries]) => Integer
CopyAcceleratorTableA([hAccelSrc, lpAccelDst, cAccelEntries]) => Integer
CopyAcceleratorTableW([hAccelSrc, lpAccelDst, cAccelEntries]) => Integer
CopyIcon([hIcon]) => Integer
CopyImage([hImage, uType, cxDesired, cyDesired, fuFlags]) => Integer
CopyRect([lprcDst, lprcSrc]) => Integer
CountClipboardFormats() => Integer
CreateAcceleratorTable([lpaccl, cEntries]) => Integer
CreateAcceleratorTableA([lpaccl, cEntries]) => Integer
CreateAcceleratorTableW([lpaccl, cEntries]) => Integer
CreateCaret([hWnd, hBitmap, nWidth, nHeight]) => Integer
CreateCursor([hInst, xHotSpot, yHotSpot, nWidth, nHeight, pvANDPlane, pvXORPlane]) => Integer
CreateDesktop([lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa]) => Integer
CreateDesktopA([lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa]) => Integer
CreateDesktopEx([lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid]) => Integer
CreateDesktopExA([lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid]) => Integer
CreateDesktopExW([lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa, ulHeapSize, pvoid]) => Integer
CreateDesktopW([lpszDesktop, lpszDevice, pDevmode, dwFlags, dwDesiredAccess, lpsa]) => Integer
CreateDialogIndirectParam([hInstance, lpTemplate, hWndParent, lpDialogFunc, lParamInit]) => Integer
CreateDialogIndirectParamA([hInstance, lpTemplate, hWndParent, lpDialogFunc, lParamInit]) => Integer
CreateDialogIndirectParamW([hInstance, lpTemplate, hWndParent, lpDialogFunc, lParamInit]) => Integer
CreateDialogParam([hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam]) => Integer
CreateDialogParamA([hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam]) => Integer
CreateDialogParamW([hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam]) => Integer
CreateIcon([hInstance, nWidth, nHeight, cPlanes, cBitsPixel, lpbANDbits, lpbXORbits]) => Integer
CreateIconFromResource([presbits, dwResSize, fIcon, dwVer]) => Integer
CreateIconFromResourceEx([pbIconBits, cbIconBits, fIcon, dwVersion, cxDesired, cyDesired, uFlags]) => Integer
CreateIconIndirect([piconinfo]) => Integer
CreateMDIWindow([lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hInstance, lParam]) => Integer
CreateMDIWindowA([lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hInstance, lParam]) => Integer
CreateMDIWindowW([lpClassName, lpWindowName, dwStyle, X, Y, nWidth, nHeight, hWndParent, hInstance, lParam]) => Integer
CreateMenu() => Integer
CreatePopupMenu() => Integer
CreateWindowEx([dwExStyle, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam]) => Integer
CreateWindowExA([dwExStyle, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam]) => Integer
CreateWindowExW([dwExStyle, lpClassName, lpWindowName, dwStyle, x, y, nWidth, nHeight, hWndParent, hMenu, hInstance, lpParam]) => Integer
CreateWindowStation([lpwinsta, dwFlags, dwDesiredAccess, lpsa]) => Integer
CreateWindowStationA([lpwinsta, dwFlags, dwDesiredAccess, lpsa]) => Integer
CreateWindowStationW([lpwinsta, dwFlags, dwDesiredAccess, lpsa]) => Integer
DdeAbandonTransaction([idInst, hConv, idTransaction]) => Integer
DdeAccessData([hData, pcbDataSize]) => Integer
DdeAddData([hData, pSrc, cb, cbOff]) => Integer
DdeClientTransaction([pData, cbData, hConv, hszItem, wFmt, wType, dwTimeout, pdwResult]) => Integer
DdeCmpStringHandles([hsz1, hsz2]) => Integer
DdeConnect([idInst, hszService, hszTopic, pCC]) => Integer
DdeConnectList([idInst, hszService, hszTopic, hConvList, pCC]) => Integer
DdeCreateDataHandle([idInst, pSrc, cb, cbOff, hszItem, wFmt, afCmd]) => Integer
DdeCreateStringHandle([idInst, psz, iCodePage]) => Integer
DdeCreateStringHandleA([idInst, psz, iCodePage]) => Integer
DdeCreateStringHandleW([idInst, psz, iCodePage]) => Integer
DdeDisconnect([hConv]) => Integer
DdeDisconnectList([hConvList]) => Integer
DdeEnableCallback([idInst, hConv, wCmd]) => Integer
DdeFreeDataHandle([hData]) => Integer
DdeFreeStringHandle([idInst, hsz]) => Integer
DdeGetData([hData, pDst, cbMax, cbOff]) => Integer
DdeGetLastError([idInst]) => Integer
DdeImpersonateClient([hConv]) => Integer
DdeInitialize([pidInst, pfnCallback, afCmd, ulRes]) => Integer
DdeInitializeA([pidInst, pfnCallback, afCmd, ulRes]) => Integer
DdeInitializeW([pidInst, pfnCallback, afCmd, ulRes]) => Integer
DdeKeepStringHandle([idInst, hsz]) => Integer
DdeNameService([idInst, hsz1, hsz2, afCmd]) => Integer
DdePostAdvise([idInst, hszTopic, hszItem]) => Integer
DdeQueryConvInfo([hConv, idTransaction, pConvInfo]) => Integer
DdeQueryNextServer([hConvList, hConvPrev]) => Integer
DdeQueryString([idInst, hsz, psz, cchMax, iCodePage]) => Integer
DdeQueryStringA([idInst, hsz, psz, cchMax, iCodePage]) => Integer
DdeQueryStringW([idInst, hsz, psz, cchMax, iCodePage]) => Integer
DdeReconnect([hConv]) => Integer
DdeSetQualityOfService([hwndClient, pqosNew, pqosPrev]) => Integer
DdeSetUserHandle([hConv, id, hUser]) => Integer
DdeUnaccessData([hData]) => Integer
DdeUninitialize([idInst]) => Integer
DefDlgProc([hDlg, Msg, wParam, lParam]) => Integer
DefDlgProcA([hDlg, Msg, wParam, lParam]) => Integer
DefDlgProcW([hDlg, Msg, wParam, lParam]) => Integer
DeferWindowPos([hWinPosInfo, hWnd, hWndInsertAfter, x, y, cx, cy, uFlags]) => Integer
DefFrameProc([hWnd, hWndMDIClient, uMsg, wParam, lParam]) => Integer
DefFrameProcA([hWnd, hWndMDIClient, uMsg, wParam, lParam]) => Integer
DefFrameProcW([hWnd, hWndMDIClient, uMsg, wParam, lParam]) => Integer
DefMDIChildProc([hWnd, uMsg, wParam, lParam]) => Integer
DefMDIChildProcA([hWnd, uMsg, wParam, lParam]) => Integer
DefMDIChildProcW([hWnd, uMsg, wParam, lParam]) => Integer
DefRawInputProc([paRawInput, nInput, cbSizeHeader]) => Integer
DefWindowProc([hWnd, Msg, wParam, lParam]) => Integer
DefWindowProcA([hWnd, Msg, wParam, lParam]) => Integer
DefWindowProcW([hWnd, Msg, wParam, lParam]) => Integer
DeleteMenu([hMenu, uPosition, uFlags]) => Integer
DeregisterShellHookWindow([hwnd]) => Integer
DestroyAcceleratorTable([hAccel]) => Integer
DestroyCaret() => Integer
DestroyCursor([hCursor]) => Integer
DestroyIcon([hIcon]) => Integer
DestroyMenu([hMenu]) => Integer
DestroyWindow([hwnd]) => Integer
DialogBoxIndirectParam([hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam]) => Integer
DialogBoxIndirectParamA([hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam]) => Integer
DialogBoxIndirectParamW([hInstance, hDialogTemplate, hWndParent, lpDialogFunc, dwInitParam]) => Integer
DialogBoxParam([hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam]) => Integer
DialogBoxParamA([hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam]) => Integer
DialogBoxParamW([hInstance, lpTemplateName, hWndParent, lpDialogFunc, dwInitParam]) => Integer
DispatchMessage([lpmsg]) => Integer
DispatchMessageA([lpmsg]) => Integer
DispatchMessageW([lpmsg]) => Integer
DlgDirList([hDlg, lpPathSpec, nIDListBox, nIDStaticPath, uFileType]) => Integer
DlgDirListA([hDlg, lpPathSpec, nIDListBox, nIDStaticPath, uFileType]) => Integer
DlgDirListComboBox([hDlg, lpPathSpec, nIDComboBox, nIDStaticPath, uFiletype]) => Integer
DlgDirListComboBoxA([hDlg, lpPathSpec, nIDComboBox, nIDStaticPath, uFiletype]) => Integer
DlgDirListComboBoxW([hDlg, lpPathSpec, nIDComboBox, nIDStaticPath, uFiletype]) => Integer
DlgDirListW([hDlg, lpPathSpec, nIDListBox, nIDStaticPath, uFileType]) => Integer
DlgDirSelectComboBoxEx([hDlg, lpString, nCount, nIDComboBox]) => Integer
DlgDirSelectComboBoxExA([hDlg, lpString, nCount, nIDComboBox]) => Integer
DlgDirSelectComboBoxExW([hDlg, lpString, nCount, nIDComboBox]) => Integer
DlgDirSelectEx([hDlg, lpString, nCount, nIDListBox]) => Integer
DlgDirSelectExA([hDlg, lpString, nCount, nIDListBox]) => Integer
DlgDirSelectExW([hDlg, lpString, nCount, nIDListBox]) => Integer
DragDetect([hwnd, pt]) => Integer
DrawAnimatedRects([hwnd, idAni, lprcFrom, lprcTo]) => Integer
DrawCaption([hwnd, hdc, lprc, uFlags]) => Integer
DrawEdge([hdc, qrc, edge, grfFlags]) => Integer
DrawFocusRect([hDC, lprc]) => Integer
DrawFrameControl([hdc, lprc, uType, uState]) => Integer
DrawIcon([hDC, X, Y, hIcon]) => Integer
DrawIconEx([hdc, xLeft, yTop, hIcon, cxWidth, cyWidth, istepIfAniCur, hbrFlickerFreeDraw, diFlags]) => Integer
DrawMenuBar([hwnd]) => Integer
DrawState([hdc, hbr, lpOutputFunc, lData, wData, x, y, cx, cy, fuFlags]) => Integer
DrawStateA([hdc, hbr, lpOutputFunc, lData, wData, x, y, cx, cy, fuFlags]) => Integer
DrawStateW([hdc, hbr, lpOutputFunc, lData, wData, x, y, cx, cy, fuFlags]) => Integer
DrawText([hDC, lpchText, nCount, lpRect, uFormat]) => Integer
DrawTextA([hDC, lpchText, nCount, lpRect, uFormat]) => Integer
DrawTextEx([hdc, lpchText, cchText, lprc, dwDTFormat, lpDTParams]) => Integer
DrawTextExA([hdc, lpchText, cchText, lprc, dwDTFormat, lpDTParams]) => Integer
DrawTextExW([hdc, lpchText, cchText, lprc, dwDTFormat, lpDTParams]) => Integer
DrawTextW([hDC, lpchText, nCount, lpRect, uFormat]) => Integer
EmptyClipboard() => Integer
EnableMenuItem([hMenu, uIDEnableItem, uEnable]) => Integer
EnableScrollBar([hWnd, wSBflags, wArrows]) => Integer
EnableWindow([hWnd, bEnable]) => Integer
EndDeferWindowPos([hWinPosInfo]) => Integer
EndDialog([hDlg, nResult]) => Integer
EndMenu() => Integer
EndPaint([hWnd, lpPaint]) => Integer
EndTask([hWnd, fShutDown, fForce]) => Integer
EnumChildWindows([hWndParent, lpEnumFunc, lParam]) => Integer
EnumClipboardFormats([format]) => Integer
EnumDesktops([hwinsta, lpEnumFunc, lParam]) => Integer
EnumDesktopsA([hwinsta, lpEnumFunc, lParam]) => Integer
EnumDesktopsW([hwinsta, lpEnumFunc, lParam]) => Integer
EnumDesktopWindows([hDesktop, lpfn, lParam]) => Integer
EnumDisplayDevices([lpDevice, iDevNum, lpDisplayDevice, dwFlags]) => Integer
EnumDisplayDevicesA([lpDevice, iDevNum, lpDisplayDevice, dwFlags]) => Integer
EnumDisplayDevicesW([lpDevice, iDevNum, lpDisplayDevice, dwFlags]) => Integer
EnumDisplayMonitors([hdc, lprcClip, lpfnEnum, dwData]) => Integer
EnumDisplaySettings([lpszDeviceName, iModeNum, lpDevMode]) => Integer
EnumDisplaySettingsA([lpszDeviceName, iModeNum, lpDevMode]) => Integer
EnumDisplaySettingsEx([lpszDeviceName, iModeNum, lpDevMode, dwFlags]) => Integer
EnumDisplaySettingsExA([lpszDeviceName, iModeNum, lpDevMode, dwFlags]) => Integer
EnumDisplaySettingsExW([lpszDeviceName, iModeNum, lpDevMode, dwFlags]) => Integer
EnumDisplaySettingsW([lpszDeviceName, iModeNum, lpDevMode]) => Integer
EnumProps([hWnd, lpEnumFunc]) => Integer
EnumPropsA([hWnd, lpEnumFunc]) => Integer
EnumPropsEx([hWnd, lpEnumFunc, lParam]) => Integer
EnumPropsExA([hWnd, lpEnumFunc, lParam]) => Integer
EnumPropsExW([hWnd, lpEnumFunc, lParam]) => Integer
EnumPropsW([hWnd, lpEnumFunc]) => Integer
EnumThreadWindows([dwThreadId, lpfn, lParam]) => Integer
EnumWindows([lpEnumFunc, lParam]) => Integer
EnumWindowStations([lpEnumFunc, lParam]) => Integer
EnumWindowStationsA([lpEnumFunc, lParam]) => Integer
EnumWindowStationsW([lpEnumFunc, lParam]) => Integer
EqualRect([lprc1, lprc2]) => Integer
ExcludeUpdateRgn([hDC, hWnd]) => Integer
ExitWindowsEx([uFlags, dwReason]) => Integer
FillRect([hDC, lprc, hbr]) => Integer
FindWindow([lpClassName, lpWindowName]) => Integer
FindWindowA([lpClassName, lpWindowName]) => Integer
FindWindowEx([hwndParent, hwndChildAfter, lpszClass, lpszWindow]) => Integer
FindWindowExA([hwndParent, hwndChildAfter, lpszClass, lpszWindow]) => Integer
FindWindowExW([hwndParent, hwndChildAfter, lpszClass, lpszWindow]) => Integer
FindWindowW([lpClassName, lpWindowName]) => Integer
FlashWindow([hWnd, bInvert]) => Integer
FlashWindowEx([pfwi]) => Integer
FrameRect([hDC, lprc, hbr]) => Integer
FreeDDElParam([msg, lParam]) => Integer
GetActiveWindow() => Integer
GetAltTabInfo([hwnd, iItem, pati, pszItemText, cchItemText]) => Integer
GetAltTabInfoA([hwnd, iItem, pati, pszItemText, cchItemText]) => Integer
GetAltTabInfoW([hwnd, iItem, pati, pszItemText, cchItemText]) => Integer
GetAncestor([hwnd, gaFlags]) => Integer
GetAsyncKeyState([vKey]) => Integer
GetCapture() => Integer
GetCaretBlinkTime() => Integer
GetCaretPos([lpPoint]) => Integer
GetClassInfo([hInstance, lpClassName, lpWndClass]) => Integer
GetClassInfoA([hInstance, lpClassName, lpWndClass]) => Integer
GetClassInfoEx([hinst, lpszClass, lpwcx]) => Integer
GetClassInfoExA([hinst, lpszClass, lpwcx]) => Integer
GetClassInfoExW([hinst, lpszClass, lpwcx]) => Integer
GetClassInfoW([hInstance, lpClassName, lpWndClass]) => Integer
GetClassLong([hWnd, nIndex]) => Integer
GetClassLongA([hWnd, nIndex]) => Integer
GetClassLongW([hWnd, nIndex]) => Integer
GetClassName([hWnd, lpClassName, nMaxCount]) => Integer
GetClassNameA([hWnd, lpClassName, nMaxCount]) => Integer
GetClassNameW([hWnd, lpClassName, nMaxCount]) => Integer
GetClassWord([hWnd, nIndex]) => Integer
GetClientRect([hWnd, lpRect]) => Integer
GetClipboardData([uFormat]) => Integer
GetClipboardFormatName([format, lpszFormatName, cchMaxCount]) => Integer
GetClipboardFormatNameA([format, lpszFormatName, cchMaxCount]) => Integer
GetClipboardFormatNameW([format, lpszFormatName, cchMaxCount]) => Integer
GetClipboardOwner() => Integer
GetClipboardSequenceNumber() => Integer
GetClipboardViewer() => Integer
GetClipCursor([lpRect]) => Integer
GetComboBoxInfo([hwndCombo, pcbi]) => Integer
GetCursor() => Integer
GetCursorInfo([pci]) => Integer
GetCursorPos([lpPoint]) => Integer
GetDC([hwnd]) => Integer
GetDCEx([hWnd, hrgnClip, flags]) => Integer
GetDesktopWindow() => Integer
GetDialogBaseUnits() => Integer
GetDlgCtrlID([hwndCtl]) => Integer
GetDlgItem([hDlg, nIDDlgItem]) => Integer
GetDlgItemInt([hDlg, nIDDlgItem, lpTranslated, bSigned]) => Integer
GetDlgItemText([hDlg, nIDDlgItem, lpString, nMaxCount]) => Integer
GetDlgItemTextA([hDlg, nIDDlgItem, lpString, nMaxCount]) => Integer
GetDlgItemTextW([hDlg, nIDDlgItem, lpString, nMaxCount]) => Integer
GetDoubleClickTime() => Integer
GetFocus() => Integer
GetForegroundWindow() => Integer
GetGestureConfig([hwnd, dwReserved, dwFlags, pcIDs, pGestureConfig, cbSize]) => Integer
GetGestureExtraArgs([hGestureInfo, cbExtraArgs, pExtraArgs]) => Integer
GetGestureInfo([hGestureInfo, pGestureInfo]) => Integer
GetGuiResources([hProcess, uiFlags]) => Integer
GetGUIThreadInfo([idThread, lpgui]) => Integer
GetIconInfo([hIcon, piconinfo]) => Integer
GetIconInfoEx([hIcon, piconinfoex]) => Integer
GetIconInfoExA([hIcon, piconinfoex]) => Integer
GetIconInfoExW([hIcon, piconinfoex]) => Integer
GetInputState() => Integer
GetKBCodePage() => Integer
GetKeyboardLayout([idThread]) => Integer
GetKeyboardLayoutList([nBuff, lpList]) => Integer
GetKeyboardLayoutName([pwszKLID]) => Integer
GetKeyboardLayoutNameA([pwszKLID]) => Integer
GetKeyboardLayoutNameW([pwszKLID]) => Integer
GetKeyboardState([lpKeyState]) => Integer
GetKeyboardType([nTypeFlag]) => Integer
GetKeyNameText([lParam, lpString, cchSize]) => Integer
GetKeyNameTextA([lParam, lpString, cchSize]) => Integer
GetKeyNameTextW([lParam, lpString, cchSize]) => Integer
GetKeyState_([nVirtKey]) => Integer
GetLastActivePopup([hwnd]) => Integer
GetLastInputInfo([plii]) => Integer
GetLayeredWindowAttributes([hwnd, pcrKey, pbAlpha, pdwFlags]) => Integer
GetListBoxInfo([hwnd]) => Integer
GetMenu([hwnd]) => Integer
GetMenuBarInfo([hwnd, idObject, idItem, pmbi]) => Integer
GetMenuCheckMarkDimensions() => Integer
GetMenuContextHelpId([hmenu]) => Integer
GetMenuDefaultItem([hMenu, fByPos, gmdiFlags]) => Integer
GetMenuInfo([hmenu, lpcmi]) => Integer
GetMenuItemCount([hMenu]) => Integer
GetMenuItemID([hMenu, nPos]) => Integer
GetMenuItemInfo([hMenu, uItem, fByPosition, lpmii]) => Integer
GetMenuItemInfoA([hMenu, uItem, fByPosition, lpmii]) => Integer
GetMenuItemInfoW([hMenu, uItem, fByPosition, lpmii]) => Integer
GetMenuItemRect([hWnd, hMenu, uItem, lprcItem]) => Integer
GetMenuState([hMenu, uId, uFlags]) => Integer
GetMenuString([hMenu, uIDItem, lpString, nMaxCount, uFlag]) => Integer
GetMenuStringA([hMenu, uIDItem, lpString, nMaxCount, uFlag]) => Integer
GetMenuStringW([hMenu, uIDItem, lpString, nMaxCount, uFlag]) => Integer
GetMessage([lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax]) => Integer
GetMessageA([lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax]) => Integer
GetMessageExtraInfo() => Integer
GetMessagePos() => Integer
GetMessageTime() => Integer
GetMessageW([lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax]) => Integer
GetMonitorInfo([hMonitor, lpmi]) => Integer
GetMonitorInfoA([hMonitor, lpmi]) => Integer
GetMonitorInfoW([hMonitor, lpmi]) => Integer
GetMouseMovePointsEx([cbSize, lppt, lpptBuf, nBufPoints, resolution]) => Integer
GetNextDlgGroupItem([hDlg, hCtl, bPrevious]) => Integer
GetNextDlgTabItem([hDlg, hCtl, bPrevious]) => Integer
GetOpenClipboardWindow() => Integer
GetParent([hwnd]) => Integer
GetPhysicalCursorPos([lpPoint]) => Integer
GetPriorityClipboardFormat([paFormatPriorityList, cFormats]) => Integer
GetProcessDefaultLayout([pdwDefaultLayout]) => Integer
GetProcessWindowStation() => Integer
GetProp([hWnd, lpString]) => Integer
GetPropA([hWnd, lpString]) => Integer
GetPropW([hWnd, lpString]) => Integer
GetQueueStatus([flags]) => Integer
GetRawInputBuffer([pData, pcbSize, cbSizeHeader]) => Integer
GetRawInputData([hRawInput, uiCommand, pData, pcbSize, cbSizeHeader]) => Integer
GetRawInputDeviceInfo([hDevice, uiCommand, pData, pcbSize]) => Integer
GetRawInputDeviceInfoA([hDevice, uiCommand, pData, pcbSize]) => Integer
GetRawInputDeviceInfoW([hDevice, uiCommand, pData, pcbSize]) => Integer
GetRawInputDeviceList([pRawInputDeviceList, puiNumDevices, cbSize]) => Integer
GetRegisteredRawInputDevices([pRawInputDevices, puiNumDevices, cbSize]) => Integer
GetScrollBarInfo([hwnd, idObject, psbi]) => Integer
GetScrollInfo([hwnd, fnBar, lpsi]) => Integer
GetScrollPos([hWnd, nBar]) => Integer
GetScrollRange([hWnd, nBar, lpMinPos, lpMaxPos]) => Integer
GetShellWindow() => Integer
GetSubMenu([hMenu, nPos]) => Integer
GetSysColor([nIndex]) => Integer
GetSysColorBrush([nIndex]) => Integer
GetSystemMenu([hWnd, bRevert]) => Integer
GetSystemMetrics([nIndex]) => Integer
GetTabbedTextExtent([hDC, lpString, nCount, nTabPositions, lpnTabStopPositions]) => Integer
GetTabbedTextExtentA([hDC, lpString, nCount, nTabPositions, lpnTabStopPositions]) => Integer
GetTabbedTextExtentW([hDC, lpString, nCount, nTabPositions, lpnTabStopPositions]) => Integer
GetThreadDesktop([dwThreadId]) => Integer
GetTitleBarInfo([hwnd, pti]) => Integer
GetTopWindow([hWnd]) => Integer
GetTouchInputInfo([hTouchInput, cInputs, pInputs, cbSize]) => Integer
GetUpdatedClipboardFormats([lpuiFormats, cFormats, pcFormatsOut]) => Integer
GetUpdateRect([hWnd, lpRect, bErase]) => Integer
GetUpdateRgn([hWnd, hRgn, bErase]) => Integer
GetUserObjectInformation([hObj, nIndex, pvInfo, nLength, lpnLengthNeeded]) => Integer
GetUserObjectInformationA([hObj, nIndex, pvInfo, nLength, lpnLengthNeeded]) => Integer
GetUserObjectInformationW([hObj, nIndex, pvInfo, nLength, lpnLengthNeeded]) => Integer
GetUserObjectSecurity([hObj, pSIRequested, pSD, nLength, lpnLengthNeeded]) => Integer
GetWindow([hWnd, uCmd]) => Integer
GetWindowContextHelpId([hwnd]) => Integer
GetWindowDC([hwnd]) => Integer
GetWindowDisplayAffinity([hWnd, dwAffinity]) => Integer
GetWindowInfo([hwnd, pwi]) => Integer
GetWindowLong([hWnd, nIndex]) => Integer
GetWindowLongA([hWnd, nIndex]) => Integer
GetWindowLongW([hWnd, nIndex]) => Integer
GetWindowModuleFileName([hwnd, lpszFileName, cchFileNameMax]) => Integer
GetWindowModuleFileNameA([hwnd, lpszFileName, cchFileNameMax]) => Integer
GetWindowModuleFileNameW([hwnd, lpszFileName, cchFileNameMax]) => Integer
GetWindowPlacement([hWnd, lpwndpl]) => Integer
GetWindowRect([hWnd, lpRect]) => Integer
GetWindowRgn([hWnd, hRgn]) => Integer
GetWindowRgnBox([hWnd, lprc]) => Integer
GetWindowText([hWnd, lpString, nMaxCount]) => Integer
GetWindowTextA([hWnd, lpString, nMaxCount]) => Integer
GetWindowTextLength([hwnd]) => Integer
GetWindowTextLengthA([hwnd]) => Integer
GetWindowTextLengthW([hwnd]) => Integer
GetWindowTextW([hWnd, lpString, nMaxCount]) => Integer
GetWindowThreadProcessId([hWnd, lpdwProcessId]) => Integer
GrayString([hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight]) => Integer
GrayStringA([hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight]) => Integer
GrayStringW([hDC, hBrush, lpOutputFunc, lpData, nCount, X, Y, nWidth, nHeight]) => Integer
HideCaret([hWnd]) => Integer
HiliteMenuItem([hwnd, hmenu, uItemHilite, uHilite]) => Integer
ImpersonateDdeClientWindow([hWndClient, hWndServer]) => Integer
InflateRect([lprc, dx, dy]) => Integer
InSendMessage() => Integer
InSendMessageEx([lpReserved]) => Integer
InsertMenu([hMenu, uPosition, uFlags, uIDNewItem, lpNewItem]) => Integer
InsertMenuA([hMenu, uPosition, uFlags, uIDNewItem, lpNewItem]) => Integer
InsertMenuItem([hMenu, uItem, fByPosition, lpmii]) => Integer
InsertMenuItemA([hMenu, uItem, fByPosition, lpmii]) => Integer
InsertMenuItemW([hMenu, uItem, fByPosition, lpmii]) => Integer
InsertMenuW([hMenu, uPosition, uFlags, uIDNewItem, lpNewItem]) => Integer
InternalGetWindowText([hWnd, lpString, nMaxCount]) => Integer
IntersectRect([lprcDst, lprcSrc1, lprcSrc2]) => Integer
InvalidateRect([hWnd, lpRect, bErase]) => Integer
InvalidateRgn([hWnd, hRgn, bErase]) => Integer
InvertRect([hDC, lprc]) => Integer
IsCharAlpha([ch]) => Integer
IsCharAlphaA([ch]) => Integer
IsCharAlphaNumeric([ch]) => Integer
IsCharAlphaNumericA([ch]) => Integer
IsCharAlphaNumericW([ch]) => Integer
IsCharAlphaW([ch]) => Integer
IsCharLower([ch]) => Integer
IsCharLowerA([ch]) => Integer
IsCharLowerW([ch]) => Integer
IsCharUpper([ch]) => Integer
IsCharUpperA([ch]) => Integer
IsCharUpperW([ch]) => Integer
IsChild([hWndParent, hWnd]) => Integer
IsClipboardFormatAvailable([format]) => Integer
IsDialogMessage([hDlg, lpMsg]) => Integer
IsDialogMessageA([hDlg, lpMsg]) => Integer
IsDialogMessageW([hDlg, lpMsg]) => Integer
IsDlgButtonChecked([hDlg, nIDButton]) => Integer
IsGUIThread([bConvert]) => Integer
IsHungAppWindow([hwnd]) => Integer
IsIconic([hwnd]) => Integer
IsMenu([hMenu]) => Integer
IsProcessDPIAware() => Integer
IsRectEmpty([lprc]) => Integer
IsTouchWindow([hWnd, pulFlags]) => Integer
IsWindow([hWnd]) => Integer
IsWindowEnabled([hwnd]) => Integer
IsWindowRedirectedForPrint([hwnd]) => Integer
IsWindowUnicode([hwnd]) => Integer
IsWindowVisible([hwnd]) => Integer
IsWinEventHookInstalled([event]) => Integer
IsWow64Message() => Integer
IsZoomed([hwnd]) => Integer
keybd_event([bVk, bScan, dwFlags, dwExtraInfo]) => void
KillTimer([hWnd, uIDEvent]) => Integer
LoadAccelerators([hInstance, lpTableName]) => Integer
LoadAcceleratorsA([hInstance, lpTableName]) => Integer
LoadAcceleratorsW([hInstance, lpTableName]) => Integer
LoadBitmap([hInstance, lpBitmapName]) => Integer
LoadBitmapA([hInstance, lpBitmapName]) => Integer
LoadBitmapW([hInstance, lpBitmapName]) => Integer
LoadCursor([hInstance, lpCursorName]) => Integer
LoadCursorA([hInstance, lpCursorName]) => Integer
LoadCursorFromFile([lpFileName]) => Integer
LoadCursorFromFileA([lpFileName]) => Integer
LoadCursorFromFileW([lpFileName]) => Integer
LoadCursorW([hInstance, lpCursorName]) => Integer
LoadIcon([hInstance, lpIconName]) => Integer
LoadIconA([hInstance, lpIconName]) => Integer
LoadIconW([hInstance, lpIconName]) => Integer
LoadImage([hinst, lpszName, uType, cxDesired, cyDesired, fuLoad]) => Integer
LoadImageA([hinst, lpszName, uType, cxDesired, cyDesired, fuLoad]) => Integer
LoadImageW([hinst, lpszName, uType, cxDesired, cyDesired, fuLoad]) => Integer
LoadKeyboardLayout([pwszKLID, Flags]) => Integer
LoadKeyboardLayoutA([pwszKLID, Flags]) => Integer
LoadKeyboardLayoutW([pwszKLID, Flags]) => Integer
LoadMenu([hInstance, lpMenuName]) => Integer
LoadMenuA([hInstance, lpMenuName]) => Integer
LoadMenuIndirect([lpMenuTemplate]) => Integer
LoadMenuIndirectA([lpMenuTemplate]) => Integer
LoadMenuIndirectW([lpMenuTemplate]) => Integer
LoadMenuW([hInstance, lpMenuName]) => Integer
LoadString([hInstance, uID, lpBuffer, nBufferMax]) => Integer
LoadStringA([hInstance, uID, lpBuffer, nBufferMax]) => Integer
LoadStringW([hInstance, uID, lpBuffer, nBufferMax]) => Integer
LockSetForegroundWindow([uLockCode]) => Integer
LockWindowUpdate([hWndLock]) => Integer
LockWorkStation() => Integer
LogicalToPhysicalPoint([hWnd, lpPoint]) => Integer
LookupIconIdFromDirectory([presbits, fIcon]) => Integer
LookupIconIdFromDirectoryEx([presbits, fIcon, cxDesired, cyDesired, Flags]) => Integer
MapDialogRect([hDlg, lpRect]) => Integer
MapVirtualKey([uCode, uMapType]) => Integer
MapVirtualKeyA([uCode, uMapType]) => Integer
MapVirtualKeyEx([uCode, uMapType, dwhkl]) => Integer
MapVirtualKeyExA([uCode, uMapType, dwhkl]) => Integer
MapVirtualKeyExW([uCode, uMapType, dwhkl]) => Integer
MapVirtualKeyW([uCode, uMapType]) => Integer
MapWindowPoints([hWndFrom, hWndTo, lpPoints, cPoints]) => Integer
MenuItemFromPoint([hWnd, hMenu, ptScreen]) => Integer
MessageBeep([uType]) => Integer
MessageBox([hWnd, lpText, lpCaption, uType]) => Integer
MessageBoxA([hWnd, lpText, lpCaption, uType]) => Integer
MessageBoxEx([hWnd, lpText, lpCaption, uType, wLanguageId]) => Integer
MessageBoxExA([hWnd, lpText, lpCaption, uType, wLanguageId]) => Integer
MessageBoxExW([hWnd, lpText, lpCaption, uType, wLanguageId]) => Integer
MessageBoxIndirect([lpMsgBoxParams]) => Integer
MessageBoxIndirectA([lpMsgBoxParams]) => Integer
MessageBoxIndirectW([lpMsgBoxParams]) => Integer
MessageBoxW([hWnd, lpText, lpCaption, uType]) => Integer
ModifyMenu([hMnu, uPosition, uFlags, uIDNewItem, lpNewItem]) => Integer
ModifyMenuA([hMnu, uPosition, uFlags, uIDNewItem, lpNewItem]) => Integer
ModifyMenuW([hMnu, uPosition, uFlags, uIDNewItem, lpNewItem]) => Integer
MonitorFromPoint([pt, dwFlags]) => Integer
MonitorFromRect([lprc, dwFlags]) => Integer
MonitorFromWindow([hwnd, dwFlags]) => Integer
mouse_event([dwFlags, dx, dy, dwData, dwExtraInfo]) => void
MoveWindow([hWnd, X, Y, nWidth, nHeight, bRepaint]) => Integer
MsgWaitForMultipleObjects([nCount, pHandles, bWaitAll, dwMilliseconds, dwWakeMask]) => Integer
MsgWaitForMultipleObjectsEx([nCount, pHandles, dwMilliseconds, dwWakeMask, dwFlags]) => Integer
NotifyWinEvent([event, hwnd, idObject, idChild]) => void
OemKeyScan([wOemChar]) => Integer
OemToChar([lpszSrc, lpszDst]) => Integer
OemToCharA([lpszSrc, lpszDst]) => Integer
OemToCharBuff([lpszSrc, lpszDst, cchDstLength]) => Integer
OemToCharBuffA([lpszSrc, lpszDst, cchDstLength]) => Integer
OemToCharBuffW([lpszSrc, lpszDst, cchDstLength]) => Integer
OemToCharW([lpszSrc, lpszDst]) => Integer
OffsetRect([lprc, dx, dy]) => Integer
OpenClipboard([hWndNewOwner]) => Integer
OpenDesktop([lpszDesktop, dwFlags, fInherit, dwDesiredAccess]) => Integer
OpenDesktopA([lpszDesktop, dwFlags, fInherit, dwDesiredAccess]) => Integer
OpenDesktopW([lpszDesktop, dwFlags, fInherit, dwDesiredAccess]) => Integer
OpenIcon([hwnd]) => Integer
OpenInputDesktop([dwFlags, fInherit, dwDesiredAccess]) => Integer
OpenWindowStation([lpszWinSta, fInherit, dwDesiredAccess]) => Integer
OpenWindowStationA([lpszWinSta, fInherit, dwDesiredAccess]) => Integer
OpenWindowStationW([lpszWinSta, fInherit, dwDesiredAccess]) => Integer
PackDDElParam([msg, uiLo, uiHi]) => Integer
PaintDesktop([hdc]) => Integer
PeekMessage([lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg]) => Integer
PeekMessageA([lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg]) => Integer
PeekMessageW([lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg]) => Integer
PhysicalToLogicalPoint([hWnd, lpPoint]) => Integer
PostMessage_([hWnd, Msg, wParam, lParam]) => Integer
PostMessageA([hWnd, Msg, wParam, lParam]) => Integer
PostMessageW([hWnd, Msg, wParam, lParam]) => Integer
PostQuitMessage([nExitCode]) => void
PostThreadMessage([idThread, Msg, wParam, lParam]) => Integer
PostThreadMessageA([idThread, Msg, wParam, lParam]) => Integer
PostThreadMessageW([idThread, Msg, wParam, lParam]) => Integer
PrintWindow([hwnd, hdcBlt, nFlags]) => Integer
PrivateExtractIcons([lpszFile, nIconIndex, cxIcon, cyIcon, phicon, piconid, nIcons, flags]) => Integer
PrivateExtractIconsA([lpszFile, nIconIndex, cxIcon, cyIcon, phicon, piconid, nIcons, flags]) => Integer
PrivateExtractIconsW([lpszFile, nIconIndex, cxIcon, cyIcon, phicon, piconid, nIcons, flags]) => Integer
PtInRect([lprc, pt]) => Integer
RealChildWindowFromPoint([hwndParent, ptParentClientCoords]) => Integer
RealGetWindowClass([hwnd, pszType, cchType]) => Integer
RealGetWindowClassA([hwnd, pszType, cchType]) => Integer
RealGetWindowClassW([hwnd, pszType, cchType]) => Integer
RedrawWindow([hWnd, lprcUpdate, hrgnUpdate, flags]) => Integer
RegisterClass([lpWndClass]) => Integer
RegisterClassA([lpWndClass]) => Integer
RegisterClassEx([lpwcx]) => Integer
RegisterClassExA([lpwcx]) => Integer
RegisterClassExW([lpwcx]) => Integer
RegisterClassW([lpWndClass]) => Integer
RegisterClipboardFormat([lpszFormat]) => Integer
RegisterClipboardFormatA([lpszFormat]) => Integer
RegisterClipboardFormatW([lpszFormat]) => Integer
RegisterDeviceNotification([hRecipient, NotificationFilter, Flags]) => Integer
RegisterDeviceNotificationA([hRecipient, NotificationFilter, Flags]) => Integer
RegisterDeviceNotificationW([hRecipient, NotificationFilter, Flags]) => Integer
RegisterHotKey([hWnd, id, fsModifiers, vk]) => Integer
RegisterPowerSettingNotification([hRecipient, PowerSettingGuid, Flags]) => Integer
RegisterRawInputDevices([pRawInputDevices, uiNumDevices, cbSize]) => Integer
RegisterShellHookWindow([hwnd]) => Integer
RegisterTouchWindow([hWnd, ulFlags]) => Integer
RegisterWindowMessage([lpString]) => Integer
RegisterWindowMessageA([lpString]) => Integer
RegisterWindowMessageW([lpString]) => Integer
ReleaseCapture() => Integer
ReleaseDC([hWnd, hDC]) => Integer
RemoveClipboardFormatListener([hwnd]) => Integer
RemoveMenu([hMenu, uPosition, uFlags]) => Integer
RemoveProp([hWnd, lpString]) => Integer
RemovePropA([hWnd, lpString]) => Integer
RemovePropW([hWnd, lpString]) => Integer
ReplyMessage([lResult]) => Integer
ReuseDDElParam([lParam, msgIn, msgOut, uiLo, uiHi]) => Integer
ScreenToClient([hWnd, lpPoint]) => Integer
ScrollDC([hDC, dx, dy, lprcScroll, lprcClip, hrgnUpdate, lprcUpdate]) => Integer
ScrollWindow([hWnd, XAmount, YAmount, lpRect, lpClipRect]) => Integer
ScrollWindowEx([hWnd, dx, dy, prcScroll, prcClip, hrgnUpdate, prcUpdate, flags]) => Integer
SendDlgItemMessage([hDlg, nIDDlgItem, Msg, wParam, lParam]) => Integer
SendDlgItemMessageA([hDlg, nIDDlgItem, Msg, wParam, lParam]) => Integer
SendDlgItemMessageW([hDlg, nIDDlgItem, Msg, wParam, lParam]) => Integer
SendInput_([nInputs, pInputs, cbSize]) => Integer
SendMessage_([hWnd, Msg, wParam, lParam]) => Integer
SendMessageA([hWnd, Msg, wParam, lParam]) => Integer
SendMessageCallback([hWnd, Msg, wParam, lParam, lpCallBack, dwData]) => Integer
SendMessageCallbackA([hWnd, Msg, wParam, lParam, lpCallBack, dwData]) => Integer
SendMessageCallbackW([hWnd, Msg, wParam, lParam, lpCallBack, dwData]) => Integer
SendMessageTimeout([hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult]) => Integer
SendMessageTimeoutA([hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult]) => Integer
SendMessageTimeoutW([hWnd, Msg, wParam, lParam, fuFlags, uTimeout, lpdwResult]) => Integer
SendMessageW([hWnd, Msg, wParam, lParam]) => Integer
SendNotifyMessage([hWnd, Msg, wParam, lParam]) => Integer
SendNotifyMessageA([hWnd, Msg, wParam, lParam]) => Integer
SendNotifyMessageW([hWnd, Msg, wParam, lParam]) => Integer
SetActiveWindow([hwnd]) => Integer
SetCapture([hwnd]) => Integer
SetCaretBlinkTime([uMSeconds]) => Integer
SetCaretPos([X, Y]) => Integer
SetClassLong([hWnd, nIndex, dwNewLong]) => Integer
SetClassLongA([hWnd, nIndex, dwNewLong]) => Integer
SetClassLongW([hWnd, nIndex, dwNewLong]) => Integer
SetClassWord([hWnd, nIndex, wNewWord]) => Integer
SetClipboardData([uFormat, hMem]) => Integer
SetClipboardViewer([hWndNewViewer]) => Integer
SetCursor([hCursor]) => Integer
SetCursorPos([X, Y]) => Integer
SetDlgItemInt([hDlg, nIDDlgItem, uValue, bSigned]) => Integer
SetDlgItemText([hDlg, nIDDlgItem, lpString]) => Integer
SetDlgItemTextA([hDlg, nIDDlgItem, lpString]) => Integer
SetDlgItemTextW([hDlg, nIDDlgItem, lpString]) => Integer
SetDoubleClickTime([uInterval]) => Integer
SetFocus([hWnd]) => Integer
SetForegroundWindow([hwnd]) => Integer
SetGestureConfig([hwnd, dwReserved, cIDs, pGestureConfig, cbSize]) => Integer
SetKeyboardState([lpKeyState]) => Integer
SetLastErrorEx([dwErrCode, dwType]) => void
SetLayeredWindowAttributes([hwnd, crKey, bAlpha, dwFlags]) => Integer
SetMenu([hWnd, hMenu]) => Integer
SetMenuContextHelpId([hmenu, dwContextHelpId]) => Integer
SetMenuDefaultItem([hMenu, uItem, fByPos]) => Integer
SetMenuInfo([hmenu, lpcmi]) => Integer
SetMenuItemBitmaps([hMenu, uPosition, uFlags, hBitmapUnchecked, hBitmapChecked]) => Integer
SetMenuItemInfo([hMenu, uItem, fByPosition, lpmii]) => Integer
SetMenuItemInfoA([hMenu, uItem, fByPosition, lpmii]) => Integer
SetMenuItemInfoW([hMenu, uItem, fByPosition, lpmii]) => Integer
SetMessageExtraInfo([lParam]) => Integer
SetParent([hWndChild, hWndNewParent]) => Integer
SetPhysicalCursorPos([X, Y]) => Integer
SetProcessDefaultLayout([dwDefaultLayout]) => Integer
SetProcessDPIAware() => Integer
SetProcessWindowStation([hWinSta]) => Integer
SetProp([hWnd, lpString, hData]) => Integer
SetPropA([hWnd, lpString, hData]) => Integer
SetPropW([hWnd, lpString, hData]) => Integer
SetRect([lprc, xLeft, yTop, xRight, yBottom]) => Integer
SetRectEmpty([lprc]) => Integer
SetScrollInfo([hwnd, fnBar, lpsi, fRedraw]) => Integer
SetScrollPos([hWnd, nBar, nPos, bRedraw]) => Integer
SetScrollRange([hWnd, nBar, nMinPos, nMaxPos, bRedraw]) => Integer
SetSysColors([cElements, lpaElements, lpaRgbValues]) => Integer
SetSystemCursor([hcur, id]) => Integer
SetThreadDesktop([hDesktop]) => Integer
SetTimer_([hWnd, nIDEvent, uElapse, lpTimerFunc]) => Integer
SetUserObjectInformation([hObj, nIndex, pvInfo, nLength]) => Integer
SetUserObjectInformationA([hObj, nIndex, pvInfo, nLength]) => Integer
SetUserObjectInformationW([hObj, nIndex, pvInfo, nLength]) => Integer
SetUserObjectSecurity([hObj, pSIRequested, pSID]) => Integer
SetWindowContextHelpId([hwnd, dwContextHelpId]) => Integer
SetWindowDisplayAffinity([hWnd, dwAffinity]) => Integer
SetWindowLong([hWnd, nIndex, dwNewLong]) => Integer
SetWindowLongA([hWnd, nIndex, dwNewLong]) => Integer
SetWindowLongW([hWnd, nIndex, dwNewLong]) => Integer
SetWindowPlacement([hWnd, lpwndpl]) => Integer
SetWindowPos([hWnd, hWndInsertAfter, X, Y, cx, cy, uFlags]) => Integer
SetWindowRgn([hWnd, hRgn, bRedraw]) => Integer
SetWindowsHookEx([idHook, lpfn, hMod, dwThreadId]) => Integer
SetWindowsHookExA([idHook, lpfn, hMod, dwThreadId]) => Integer
SetWindowsHookExW([idHook, lpfn, hMod, dwThreadId]) => Integer
SetWindowText([hWnd, lpString]) => Integer
SetWindowTextA([hWnd, lpString]) => Integer
SetWindowTextW([hWnd, lpString]) => Integer
SetWinEventHook([eventMin, eventMax, hmodWinEventProc, lpfnWinEventProc, idProcess, idThread, dwflags]) => Integer
ShowCaret([hWnd]) => Integer
ShowCursor([bShow]) => Integer
ShowOwnedPopups([hWnd, fShow]) => Integer
ShowScrollBar([hWnd, wBar, bShow]) => Integer
ShowWindow([hWnd, nCmdShow]) => Integer
ShowWindowAsync([hWnd, nCmdShow]) => Integer
ShutdownBlockReasonCreate([hWnd, pwszReason]) => Integer
ShutdownBlockReasonDestroy([hwnd]) => Integer
ShutdownBlockReasonQuery([hWnd, pwszBuff, pcchBuff]) => Integer
SoundSentry() => Integer
SubtractRect([lprcDst, lprcSrc1, lprcSrc2]) => Integer
SwapMouseButton([fSwap]) => Integer
SwitchDesktop([hDesktop]) => Integer
SwitchToThisWindow([hWnd, fAltTab]) => void
SystemParametersInfo([uiAction, uiParam, pvParam, fWinIni]) => Integer
SystemParametersInfoA([uiAction, uiParam, pvParam, fWinIni]) => Integer
SystemParametersInfoW([uiAction, uiParam, pvParam, fWinIni]) => Integer
TabbedTextOut([hDC, X, Y, lpString, nCount, nTabPositions, lpnTabStopPositions, nTabOrigin]) => Integer
TabbedTextOutA([hDC, X, Y, lpString, nCount, nTabPositions, lpnTabStopPositions, nTabOrigin]) => Integer
TabbedTextOutW([hDC, X, Y, lpString, nCount, nTabPositions, lpnTabStopPositions, nTabOrigin]) => Integer
TileWindows([hwndParent, wHow, lpRect, cKids, lpKids]) => Integer
ToAscii([uVirtKey, uScanCode, lpKeyState, lpChar, uFlags]) => Integer
ToAsciiEx([uVirtKey, uScanCode, lpKeyState, lpChar, uFlags, dwhkl]) => Integer
ToUnicode([wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags]) => Integer
ToUnicodeEx([wVirtKey, wScanCode, lpKeyState, pwszBuff, cchBuff, wFlags, dwhkl]) => Integer
TrackMouseEvent([lpEventTrack]) => Integer
TrackPopupMenu([hMenu, uFlags, x, y, nReserved, hWnd, prcRect]) => Integer
TrackPopupMenuEx([hmenu, fuFlags, x, y, hwnd, lptpm]) => Integer
TranslateAccelerator([hWnd, hAccTable, lpMsg]) => Integer
TranslateAcceleratorA([hWnd, hAccTable, lpMsg]) => Integer
TranslateAcceleratorW([hWnd, hAccTable, lpMsg]) => Integer
TranslateMDISysAccel([hWndClient, lpMsg]) => Integer
TranslateMessage([lpmsg]) => Integer
UnhookWindowsHookEx([hhk]) => Integer
UnhookWinEvent([hWinEventHook]) => Integer
UnionRect([lprcDst, lprcSrc1, lprcSrc2]) => Integer
UnloadKeyboardLayout([hKL]) => Integer
UnpackDDElParam([msg, lParam, puiLo, puiHi]) => Integer
UnregisterClass([lpClassName, hInstance]) => Integer
UnregisterClassA([lpClassName, hInstance]) => Integer
UnregisterClassW([lpClassName, hInstance]) => Integer
UnregisterDeviceNotification([Handle]) => Integer
UnregisterHotKey([hWnd, id]) => Integer
UnregisterPowerSettingNotification([Handle]) => Integer
UnregisterTouchWindow([hwnd]) => Integer
UpdateLayeredWindow([hwnd, hdcDst, pptDst, psize, hdcSrc, pptSrc, crKey, pblend, dwFlags]) => Integer
UpdateLayeredWindowIndirect([hwnd, pULWInfo]) => Integer
UpdateWindow([hwnd]) => Integer
UserHandleGrantAccess([hUserHandle, hJob, bGrant]) => Integer
ValidateRect([hWnd, lpRect]) => Integer
ValidateRgn([hWnd, hRgn]) => Integer
VkKeyScan([ch]) => Integer
VkKeyScanA([ch]) => Integer
VkKeyScanEx([ch, dwhkl]) => Integer
VkKeyScanExA([ch, dwhkl]) => Integer
VkKeyScanExW([ch, dwhkl]) => Integer
VkKeyScanW([ch]) => Integer
WaitForInputIdle([hProcess, dwMilliseconds]) => Integer
WaitMessage() => Integer
WindowFromDC([hdc]) => Integer
WindowFromPhysicalPoint([Point]) => Integer
WindowFromPoint([Point]) => Integer
WinHelp([hWndMain, lpszHelp, uCommand, dwData]) => Integer
WinHelpA([hWndMain, lpszHelp, uCommand, dwData]) => Integer
WinHelpW([hWndMain, lpszHelp, uCommand, dwData]) => Integer
wsprintf([lpOut, lpFmt,  _In_ *]) => Integer
wsprintfA([lpOut, lpFmt,  _In_ *]) => Integer
wsprintfW([lpOut, lpFmt,  _In_ *]) => Integer
wvsprintf([lpOutput, lpFmt, arglist]) => Integer
wvsprintfA([lpOutput, lpFmt, arglist]) => Integer
wvsprintfW([lpOutput, lpFmt, arglist]) => Integer
CreateEnvironmentBlock([lpEnvironment, hToken, bInherit]) => Integer
CreateProfile([pszUserSid, pszUserName, pszProfilePath, cchProfilePath]) => Integer
DeleteProfile([lpSidString, lpProfilePath, lpComputerName]) => Integer
DeleteProfileA([lpSidString, lpProfilePath, lpComputerName]) => Integer
DeleteProfileW([lpSidString, lpProfilePath, lpComputerName]) => Integer
DestroyEnvironmentBlock([lpEnvironment]) => Integer
EnterCriticalPolicySection([bMachine]) => Integer
ExpandEnvironmentStringsForUser([hToken, lpSrc, lpDest, dwSize]) => Integer
ExpandEnvironmentStringsForUserA([hToken, lpSrc, lpDest, dwSize]) => Integer
ExpandEnvironmentStringsForUserW([hToken, lpSrc, lpDest, dwSize]) => Integer
FreeGPOList([pGPOList]) => Integer
FreeGPOListA([pGPOList]) => Integer
FreeGPOListW([pGPOList]) => Integer
GetAllUsersProfileDirectory([lpProfileDir, lpcchSize]) => Integer
GetAllUsersProfileDirectoryA([lpProfileDir, lpcchSize]) => Integer
GetAllUsersProfileDirectoryW([lpProfileDir, lpcchSize]) => Integer
GetAppliedGPOList([dwFlags, pMachineName, pSidUser, pGuidExtension, ppGPOList]) => Integer
GetAppliedGPOListA([dwFlags, pMachineName, pSidUser, pGuidExtension, ppGPOList]) => Integer
GetAppliedGPOListW([dwFlags, pMachineName, pSidUser, pGuidExtension, ppGPOList]) => Integer
GetDefaultUserProfileDirectory([lpProfileDir, lpcchSize]) => Integer
GetDefaultUserProfileDirectoryA([lpProfileDir, lpcchSize]) => Integer
GetDefaultUserProfileDirectoryW([lpProfileDir, lpcchSize]) => Integer
GetGPOList([hToken, lpName, lpHostName, lpComputerName, dwFlags, pGPOList]) => Integer
GetGPOListA([hToken, lpName, lpHostName, lpComputerName, dwFlags, pGPOList]) => Integer
GetGPOListW([hToken, lpName, lpHostName, lpComputerName, dwFlags, pGPOList]) => Integer
GetProfilesDirectory([lpProfilesDir, lpcchSize]) => Integer
GetProfilesDirectoryA([lpProfilesDir, lpcchSize]) => Integer
GetProfilesDirectoryW([lpProfilesDir, lpcchSize]) => Integer
GetProfileType([pdwFlags]) => Integer
GetUserProfileDirectory([hToken, lpProfileDir, lpcchSize]) => Integer
GetUserProfileDirectoryA([hToken, lpProfileDir, lpcchSize]) => Integer
GetUserProfileDirectoryW([hToken, lpProfileDir, lpcchSize]) => Integer
LeaveCriticalPolicySection([hSection]) => Integer
LoadUserProfile([hToken, lpProfileInfo]) => Integer
LoadUserProfileA([hToken, lpProfileInfo]) => Integer
LoadUserProfileW([hToken, lpProfileInfo]) => Integer
ProcessGroupPolicyCompleted([extensionId, pAsyncHandle, dwStatus]) => Integer
ProcessGroupPolicyCompletedEx([extensionId, pAsyncHandle, dwStatus, RsopStatus]) => Integer
RefreshPolicy([bMachine]) => Integer
RefreshPolicyEx([bMachine, dwOptions]) => Integer
RegisterGPNotification([hEvent, bMachine]) => Integer
RSoPAccessCheckByType([pSecurityDescriptor, pPrincipalSelfSid, pRsopToken, dwDesiredAccessMask, pObjectTypeList, ObjectTypeListLength, pGenericMapping, pPrivilegeSet, pdwPrivilegeSetLength, pdwGrantedAccessMask, pbAccessStatus]) => Integer
RSoPFileAccessCheck([pszFileName, pRsopToken, dwDesiredAccessMask, pdwGrantedAccessMask, pbAccessStatus]) => Integer
RSoPResetPolicySettingStatus([dwFlags, pServices, pSettingInstance]) => Integer
RSoPSetPolicySettingStatus([dwFlags, pServices, pSettingInstance, nInfo, pStatus]) => Integer
UnloadUserProfile([hToken, hProfile]) => Integer
UnregisterGPNotification([hEvent]) => Integer
BeginBufferedAnimation([hwnd, hdcTarget, rcTarget, dwFormat, pPaintParams, pAnimationParams, phdcFrom, phdcTo]) => Integer
BeginBufferedPaint([hdcTarget, prcTarget, dwFormat, pPaintParams, phdc]) => Integer
BeginPanningFeedback([hwnd]) => Integer
BufferedPaintClear([hBufferedPaint, prc]) => Integer
BufferedPaintInit() => Integer
BufferedPaintRenderAnimation([hwnd, hdcTarget]) => Integer
BufferedPaintSetAlpha([hBufferedPaint, prc, alpha]) => Integer
BufferedPaintStopAllAnimations([hwnd]) => Integer
BufferedPaintUnInit() => Integer
CloseThemeData([hTheme]) => Integer
DrawThemeBackground([hTheme, hdc, iPartId, iStateId, pRect, pClipRect]) => Integer
DrawThemeBackgroundEx([hTheme, hdc, iPartId, iStateId, pRect, pOptions]) => Integer
DrawThemeEdge([hTheme, hdc, iPartId, iStateId, pDestRect, uEdge, uFlags, pContentRect]) => Integer
DrawThemeIcon([hTheme, hdc, iPartId, iStateId, pRect, himl, iImageIndex]) => Integer
DrawThemeParentBackground([hwnd, hdc, prc]) => Integer
DrawThemeParentBackgroundEx([hwnd, hdc, dwFlags, prc]) => Integer
DrawThemeText([hTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwTextFlags, dwTextFlags2, pRect]) => Integer
DrawThemeTextEx([hTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwFlags, pRect, pOptions]) => Integer
EnableThemeDialogTexture([hwnd, dwFlags]) => Integer
EnableTheming([fEnable]) => Integer
EndBufferedAnimation([hbpAnimation, fUpdateTarget]) => Integer
EndBufferedPaint([hBufferedPaint, fUpdateTarget]) => Integer
EndPanningFeedback([hwnd, fAnimateBack]) => Integer
GetBufferedPaintBits([hBufferedPaint, ppbBuffer, pcxRow]) => Integer
GetBufferedPaintDC([hBufferedPaint]) => Integer
GetBufferedPaintTargetDC([hBufferedPaint]) => Integer
GetBufferedPaintTargetRect([hBufferedPaint, prc]) => Integer
GetCurrentThemeName([pszThemeFileName, dwMaxNameChars, pszColorBuff, cchMaxColorChars, pszSizeBuff, cchMaxSizeChars]) => Integer
GetThemeAppProperties() => Integer
GetThemeBackgroundContentRect([hTheme, hdc, iPartId, iStateId, pBoundingRect, pContentRect]) => Integer
GetThemeBackgroundExtent([hTheme, hdc, iPartId, iStateId, pContentRect, pExtentRect]) => Integer
GetThemeBackgroundRegion([hTheme, hdc, iPartId, iStateId, pRect, pRegion]) => Integer
GetThemeBitmap([hTheme, iPartId, iStateId, iPropId, dwFlags, phBitmap]) => Integer
GetThemeBool([hTheme, iPartId, iStateId, iPropId, pfVal]) => Integer
GetThemeColor([hTheme, iPartId, iStateId, iPropId, pColor]) => Integer
GetThemeDocumentationProperty([pszThemeName, pszPropertyName, pszValueBuff, cchMaxValChars]) => Integer
GetThemeEnumValue([hTheme, iPartId, iStateId, iPropId, piVal]) => Integer
GetThemeFilename([hTheme, iPartId, iStateId, iPropId, pszThemeFilename, cchMaxBuffChars]) => Integer
GetThemeFont([hTheme, hdc, iPartId, iStateId, iPropId, pFont]) => Integer
GetThemeInt([hTheme, iPartId, iStateId, iPropId, piVal]) => Integer
GetThemeIntList([hTheme, iPartId, iStateId, iPropId, pIntList]) => Integer
GetThemeMargins([hTheme, hdc, iPartId, iStateId, iPropId, prc, pMargins]) => Integer
GetThemeMetric([hTheme, hdc, iPartId, iStateId, iPropId, piVal]) => Integer
GetThemePartSize([hTheme, hdc, iPartId, iStateId, prc, eSize, psz]) => Integer
GetThemePosition([hTheme, iPartId, iStateId, iPropId, pPoint]) => Integer
GetThemePropertyOrigin([hTheme, iPartId, iStateId, iPropId, pOrigin]) => Integer
GetThemeRect([hTheme, iPartId, iStateId, iPropId, pRect]) => Integer
GetThemeStream([hTheme, iPartId, iStateId, iPropId, ppvStream, pcbStream, hInst]) => Integer
GetThemeString([hTheme, iPartId, iStateId, iPropId, pszBuff, cchMaxBuffChars]) => Integer
GetThemeSysBool([hTheme, iBoolID]) => Integer
GetThemeSysColor([hTheme, iColorID]) => Integer
GetThemeSysColorBrush([hTheme, iColorID]) => Integer
GetThemeSysFont([hTheme, iFontID, plf]) => Integer
GetThemeSysInt([hTheme, iIntID, piValue]) => Integer
GetThemeSysSize([hTheme, iSizeID]) => Integer
GetThemeSysString([hTheme, iStringID, pszStringBuff, cchMaxStringChars]) => Integer
GetThemeTextExtent([hTheme, hdc, iPartId, iStateId, pszText, iCharCount, dwTextFlags, pBoundingRect, pExtentRect]) => Integer
GetThemeTextMetrics([hTheme, hdc, iPartId, iStateId, ptm]) => Integer
GetThemeTransitionDuration([hTheme, iPartId, iStateIdFrom, iStateIdTo, iPropId, pdwDuration]) => Integer
GetWindowTheme([hwnd]) => Integer
HitTestThemeBackground([hTheme, hdc, iPartId, iStateId, dwOptions, pRect, hrgn, ptTest, pwHitTestCode]) => Integer
IsAppThemed() => Integer
IsCompositionActive() => Integer
IsThemeActive() => Integer
IsThemeBackgroundPartiallyTransparent([hTheme, iPartId, iStateId]) => Integer
IsThemeDialogTextureEnabled([hwnd]) => Integer
IsThemePartDefined([hTheme, iPartId, iStateId]) => Integer
OpenThemeData([hwnd, pszClassList]) => Integer
OpenThemeDataEx([hwnd, pszClassIdList, dwFlags]) => Integer
SetThemeAppProperties([dwFlags]) => void
SetWindowTheme([hwnd, pszSubAppName, pszSubIdList]) => Integer
SetWindowThemeAttribute([hwnd, eAttribute, pvAttribute, cbAttribute]) => Integer
UpdatePanningFeedback([hwnd, lTotalOverpanOffsetX, lTotalOverpanOffsetY, fInInertia]) => Integer
GetFileVersionInfo([lptstrFilename, dwHandle, dwLen, lpData]) => Integer
GetFileVersionInfoA([lptstrFilename, dwHandle, dwLen, lpData]) => Integer
GetFileVersionInfoEx([dwFlags, lptstrFilename, dwHandle, dwLen, lpData]) => Integer
GetFileVersionInfoExW([dwFlags, lptstrFilename, dwHandle, dwLen, lpData]) => Integer
GetFileVersionInfoSize([lptstrFilename, lpdwHandle]) => Integer
GetFileVersionInfoSizeA([lptstrFilename, lpdwHandle]) => Integer
GetFileVersionInfoSizeEx([dwFlags, lptstrFilename, lpdwHandle]) => Integer
GetFileVersionInfoSizeExW([dwFlags, lptstrFilename, lpdwHandle]) => Integer
GetFileVersionInfoSizeW([lptstrFilename, lpdwHandle]) => Integer
GetFileVersionInfoW([lptstrFilename, dwHandle, dwLen, lpData]) => Integer
VerFindFile([dwFlags, szFileName, szWinDir, szAppDir, szCurDir, lpuCurDirLen, szDestDir, lpuDestDirLen]) => Integer
VerFindFileA([dwFlags, szFileName, szWinDir, szAppDir, szCurDir, lpuCurDirLen, szDestDir, lpuDestDirLen]) => Integer
VerFindFileW([dwFlags, szFileName, szWinDir, szAppDir, szCurDir, lpuCurDirLen, szDestDir, lpuDestDirLen]) => Integer
VerInstallFile([uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, lpuTmpFileLen]) => Integer
VerInstallFileA([uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, lpuTmpFileLen]) => Integer
VerInstallFileW([uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, lpuTmpFileLen]) => Integer
VerQueryValue([pBlock, lpSubBlock, lplpBuffer, puLen]) => Integer
VerQueryValueA([pBlock, lpSubBlock, lplpBuffer, puLen]) => Integer
VerQueryValueW([pBlock, lpSubBlock, lplpBuffer, puLen]) => Integer
WinHttpAddRequestHeaders([hRequest, pwszHeaders, dwHeadersLength, dwModifiers]) => Integer
WinHttpCheckPlatform() => Integer
WinHttpCloseHandle([hInternet]) => Integer
WinHttpConnect([hSession, pswzServerName, nServerPort, dwReserved]) => Integer
WinHttpCrackUrl([pwszUrl, dwUrlLength, dwFlags, lpUrlComponents]) => Integer
WinHttpCreateUrl([lpUrlComponents, dwFlags, pwszUrl, lpdwUrlLength]) => Integer
WinHttpDetectAutoProxyConfigUrl([dwAutoDetectFlags, ppwszAutoConfigUrl]) => Integer
WinHttpGetDefaultProxyConfiguration([pProxyInfo]) => Integer
WinHttpGetIEProxyConfigForCurrentUser([pProxyConfig]) => Integer
WinHttpGetProxyForUrl([hSession, lpcwszUrl, pAutoProxyOptions, pProxyInfo]) => Integer
WinHttpOpen([pwszUserAgent, dwAccessType, pwszProxyName, pwszProxyBypass, dwFlags]) => Integer
WinHttpOpenRequest([hConnect, pwszVerb, pwszObjectName, pwszVersion, pwszReferrer, ppwszAcceptTypes, dwFlags]) => Integer
WinHttpQueryAuthSchemes([hRequest, lpdwSupportedSchemes, lpdwFirstScheme, pdwAuthTarget]) => Integer
WinHttpQueryDataAvailable([hRequest, lpdwNumberOfBytesAvailable]) => Integer
WinHttpQueryHeaders([hRequest, dwInfoLevel, pwszName, lpBuffer, lpdwBufferLength, lpdwIndex]) => Integer
WinHttpQueryOption([hInternet, dwOption, lpBuffer, lpdwBufferLength]) => Integer
WinHttpReadData([hRequest, lpBuffer, dwNumberOfBytesToRead, lpdwNumberOfBytesRead]) => Integer
WinHttpReceiveResponse([hRequest, lpReserved]) => Integer
WinHttpSendRequest([hRequest, pwszHeaders, dwHeadersLength, lpOptional, dwOptionalLength, dwTotalLength, dwContext]) => Integer
WinHttpSetCredentials([hRequest, AuthTargets, AuthScheme, pwszUserName, pwszPassword, pAuthParams]) => Integer
WinHttpSetDefaultProxyConfiguration([pProxyInfo]) => Integer
WinHttpSetOption([hInternet, dwOption, lpBuffer, dwBufferLength]) => Integer
WinHttpSetStatusCallback([hInternet, lpfnInternetCallback, dwNotificationFlags, dwReserved]) => Integer
WinHttpSetTimeouts([hInternet, dwResolveTimeout, dwConnectTimeout, dwSendTimeout, dwReceiveTimeout]) => Integer
WinHttpTimeFromSystemTime([pst, pwszTime]) => Integer
WinHttpTimeToSystemTime([pwszTime, pst]) => Integer
WinHttpWriteData([hRequest, lpBuffer, dwNumberOfBytesToWrite, lpdwNumberOfBytesWritten]) => Integer
CommitUrlCacheEntryA([lpszUrlName, lpszLocalFileName, ExpireTime, LastModifiedTime, CacheEntryType, lpHeaderInfo, cchHeaderInfo, lpszFileExtension, lpszOriginalUrl]) => Integer
CommitUrlCacheEntryW([lpszUrlName, lpszLocalFileName, ExpireTime, LastModifiedTime, CacheEntryType, lpHeaderInfo, cchHeaderInfo, lpszFileExtension, lpszOriginalUrl]) => Integer
CreateMD5SSOHash([pszChallengeInfo, pwszRealm, pwszTarget, pbHexHash]) => Integer
CreateUrlCacheEntry([lpszUrlName, dwExpectedFileSize, lpszFileExtension, lpszFileName, dwReserved]) => Integer
CreateUrlCacheEntryA([lpszUrlName, dwExpectedFileSize, lpszFileExtension, lpszFileName, dwReserved]) => Integer
CreateUrlCacheEntryW([lpszUrlName, dwExpectedFileSize, lpszFileExtension, lpszFileName, dwReserved]) => Integer
CreateUrlCacheGroup([dwFlags, lpReserved]) => Integer
DeleteUrlCacheEntry([lpszUrlName]) => Integer
DeleteUrlCacheEntryA([lpszUrlName]) => Integer
DeleteUrlCacheEntryW([lpszUrlName]) => Integer
DeleteUrlCacheGroup([GroupId, dwFlags, lpReserved]) => Integer
DetectAutoProxyUrl([lpszAutoProxyUrl, dwAutoProxyUrlLength, dwDetectFlags]) => Integer
FindCloseUrlCache([hEnumHandle]) => Integer
FindFirstUrlCacheEntry([lpszUrlSearchPattern, lpFirstCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
FindFirstUrlCacheEntryA([lpszUrlSearchPattern, lpFirstCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
FindFirstUrlCacheEntryEx([lpszUrlSearchPattern, dwFlags, dwFilter, GroupId, lpFirstCacheEntryInfo, lpdwEntryInfo, lpGroupAttributes, lpcbGroupAttributes, lpReserved]) => Integer
FindFirstUrlCacheEntryExA([lpszUrlSearchPattern, dwFlags, dwFilter, GroupId, lpFirstCacheEntryInfo, lpdwEntryInfo, lpGroupAttributes, lpcbGroupAttributes, lpReserved]) => Integer
FindFirstUrlCacheEntryExW([lpszUrlSearchPattern, dwFlags, dwFilter, GroupId, lpFirstCacheEntryInfo, lpdwEntryInfo, lpGroupAttributes, lpcbGroupAttributes, lpReserved]) => Integer
FindFirstUrlCacheEntryW([lpszUrlSearchPattern, lpFirstCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
FindFirstUrlCacheGroup([dwFlags, dwFilter, lpSearchCondition, dwSearchCondition, lpGroupId, lpReserved]) => Integer
FindNextUrlCacheEntry([hEnumHandle, lpNextCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
FindNextUrlCacheEntryA([hEnumHandle, lpNextCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
FindNextUrlCacheEntryEx([hEnumHandle, lpNextCacheEntryInfo, lpcbEntryInfo, lpGroupAttributes, lpcbGroupAttributes, lpReserved]) => Integer
FindNextUrlCacheEntryExA([hEnumHandle, lpNextCacheEntryInfo, lpcbEntryInfo, lpGroupAttributes, lpcbGroupAttributes, lpReserved]) => Integer
FindNextUrlCacheEntryExW([hEnumHandle, lpNextCacheEntryInfo, lpcbEntryInfo, lpGroupAttributes, lpcbGroupAttributes, lpReserved]) => Integer
FindNextUrlCacheEntryW([hEnumHandle, lpNextCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
FindNextUrlCacheGroup([hFind, lpGroupId, lpReserved]) => Integer
FtpCommand([hConnect, fExpectResponse, dwFlags, lpszCommand, dwContext, phFtpCommand]) => Integer
FtpCommandA([hConnect, fExpectResponse, dwFlags, lpszCommand, dwContext, phFtpCommand]) => Integer
FtpCommandW([hConnect, fExpectResponse, dwFlags, lpszCommand, dwContext, phFtpCommand]) => Integer
FtpCreateDirectory([hConnect, lpszDirectory]) => Integer
FtpCreateDirectoryA([hConnect, lpszDirectory]) => Integer
FtpCreateDirectoryW([hConnect, lpszDirectory]) => Integer
FtpDeleteFile([hConnect, lpszFileName]) => Integer
FtpDeleteFileA([hConnect, lpszFileName]) => Integer
FtpDeleteFileW([hConnect, lpszFileName]) => Integer
FtpFindFirstFile([hConnect, lpszSearchFile, lpFindFileData, dwFlags, dwContext]) => Integer
FtpFindFirstFileA([hConnect, lpszSearchFile, lpFindFileData, dwFlags, dwContext]) => Integer
FtpFindFirstFileW([hConnect, lpszSearchFile, lpFindFileData, dwFlags, dwContext]) => Integer
FtpGetCurrentDirectory([hConnect, lpszCurrentDirectory, lpdwCurrentDirectory]) => Integer
FtpGetCurrentDirectoryA([hConnect, lpszCurrentDirectory, lpdwCurrentDirectory]) => Integer
FtpGetCurrentDirectoryW([hConnect, lpszCurrentDirectory, lpdwCurrentDirectory]) => Integer
FtpGetFile([hConnect, lpszRemoteFile, lpszNewFile, fFailIfExists, dwFlagsAndAttributes, dwFlags, dwContext]) => Integer
FtpGetFileA([hConnect, lpszRemoteFile, lpszNewFile, fFailIfExists, dwFlagsAndAttributes, dwFlags, dwContext]) => Integer
FtpGetFileSize([hFile, lpdwFileSizeHigh]) => Integer
FtpGetFileW([hConnect, lpszRemoteFile, lpszNewFile, fFailIfExists, dwFlagsAndAttributes, dwFlags, dwContext]) => Integer
FtpOpenFile([hConnect, lpszFileName, dwAccess, dwFlags, dwContext]) => Integer
FtpOpenFileA([hConnect, lpszFileName, dwAccess, dwFlags, dwContext]) => Integer
FtpOpenFileW([hConnect, lpszFileName, dwAccess, dwFlags, dwContext]) => Integer
FtpPutFile([hConnect, lpszLocalFile, lpszNewRemoteFile, dwFlags, dwContext]) => Integer
FtpPutFileA([hConnect, lpszLocalFile, lpszNewRemoteFile, dwFlags, dwContext]) => Integer
FtpPutFileW([hConnect, lpszLocalFile, lpszNewRemoteFile, dwFlags, dwContext]) => Integer
FtpRemoveDirectory([hConnect, lpszDirectory]) => Integer
FtpRemoveDirectoryA([hConnect, lpszDirectory]) => Integer
FtpRemoveDirectoryW([hConnect, lpszDirectory]) => Integer
FtpRenameFile([hConnect, lpszExisting, lpszNew]) => Integer
FtpRenameFileA([hConnect, lpszExisting, lpszNew]) => Integer
FtpRenameFileW([hConnect, lpszExisting, lpszNew]) => Integer
FtpSetCurrentDirectory([hConnect, lpszDirectory]) => Integer
FtpSetCurrentDirectoryA([hConnect, lpszDirectory]) => Integer
FtpSetCurrentDirectoryW([hConnect, lpszDirectory]) => Integer
GetUrlCacheConfigInfo([lpCacheConfigInfo, lpcbCacheConfigInfo, dwFieldControl]) => Integer
GetUrlCacheConfigInfoA([lpCacheConfigInfo, lpcbCacheConfigInfo, dwFieldControl]) => Integer
GetUrlCacheConfigInfoW([lpCacheConfigInfo, lpcbCacheConfigInfo, dwFieldControl]) => Integer
GetUrlCacheEntryInfo([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
GetUrlCacheEntryInfoA([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
GetUrlCacheEntryInfoEx([lpszUrl, lpCacheEntryInfo, lpcbCacheEntryInfo, lpszRedirectUrl, lpcbRedirectUrl, lpReserved, dwFlags]) => Integer
GetUrlCacheEntryInfoExA([lpszUrl, lpCacheEntryInfo, lpcbCacheEntryInfo, lpszRedirectUrl, lpcbRedirectUrl, lpReserved, dwFlags]) => Integer
GetUrlCacheEntryInfoExW([lpszUrl, lpCacheEntryInfo, lpcbCacheEntryInfo, lpszRedirectUrl, lpcbRedirectUrl, lpReserved, dwFlags]) => Integer
GetUrlCacheEntryInfoW([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo]) => Integer
GetUrlCacheGroupAttribute([gid, dwFlags, dwAttributes, lpGroupInfo, lpdwGroupInfo, lpReserved]) => Integer
GetUrlCacheGroupAttributeA([gid, dwFlags, dwAttributes, lpGroupInfo, lpdwGroupInfo, lpReserved]) => Integer
GetUrlCacheGroupAttributeW([gid, dwFlags, dwAttributes, lpGroupInfo, lpdwGroupInfo, lpReserved]) => Integer
GopherCreateLocator([lpszHost, nServerPort, lpszDisplayString, lpszSelectorString, dwGopherType, lpszLocator, lpdwBufferLength]) => Integer
GopherCreateLocatorA([lpszHost, nServerPort, lpszDisplayString, lpszSelectorString, dwGopherType, lpszLocator, lpdwBufferLength]) => Integer
GopherCreateLocatorW([lpszHost, nServerPort, lpszDisplayString, lpszSelectorString, dwGopherType, lpszLocator, lpdwBufferLength]) => Integer
GopherFindFirstFile([hConnect, lpszLocator, lpszSearchString, lpFindData, dwFlags, dwContext]) => Integer
GopherFindFirstFileA([hConnect, lpszLocator, lpszSearchString, lpFindData, dwFlags, dwContext]) => Integer
GopherFindFirstFileW([hConnect, lpszLocator, lpszSearchString, lpFindData, dwFlags, dwContext]) => Integer
GopherGetAttribute([hConnect, lpszLocator, lpszAttributeName, lpBuffer, dwBufferLength, lpdwCharactersReturned, lpfnEnumerator, dwContext]) => Integer
GopherGetAttributeA([hConnect, lpszLocator, lpszAttributeName, lpBuffer, dwBufferLength, lpdwCharactersReturned, lpfnEnumerator, dwContext]) => Integer
GopherGetAttributeW([hConnect, lpszLocator, lpszAttributeName, lpBuffer, dwBufferLength, lpdwCharactersReturned, lpfnEnumerator, dwContext]) => Integer
GopherGetLocatorType([lpszLocator, lpdwGopherType]) => Integer
GopherGetLocatorTypeA([lpszLocator, lpdwGopherType]) => Integer
GopherGetLocatorTypeW([lpszLocator, lpdwGopherType]) => Integer
GopherOpenFile([hConnect, lpszLocator, lpszView, dwFlags, dwContext]) => Integer
GopherOpenFileA([hConnect, lpszLocator, lpszView, dwFlags, dwContext]) => Integer
GopherOpenFileW([hConnect, lpszLocator, lpszView, dwFlags, dwContext]) => Integer
HttpAddRequestHeaders([hRequest, lpszHeaders, dwHeadersLength, dwModifiers]) => Integer
HttpAddRequestHeadersA([hRequest, lpszHeaders, dwHeadersLength, dwModifiers]) => Integer
HttpAddRequestHeadersW([hRequest, lpszHeaders, dwHeadersLength, dwModifiers]) => Integer
HttpEndRequest([hRequest, lpBuffersOut, dwFlags, dwContext]) => Integer
HttpEndRequestA([hRequest, lpBuffersOut, dwFlags, dwContext]) => Integer
HttpEndRequestW([hRequest, lpBuffersOut, dwFlags, dwContext]) => Integer
HttpOpenRequest([hConnect, lpszVerb, lpszObjectName, lpszVersion, lpszReferer, lplpszAcceptTypes, dwFlags, dwContext]) => Integer
HttpOpenRequestA([hConnect, lpszVerb, lpszObjectName, lpszVersion, lpszReferer, lplpszAcceptTypes, dwFlags, dwContext]) => Integer
HttpOpenRequestW([hConnect, lpszVerb, lpszObjectName, lpszVersion, lpszReferer, lplpszAcceptTypes, dwFlags, dwContext]) => Integer
HttpQueryInfo([hRequest, dwInfoLevel, lpvBuffer, lpdwBufferLength, lpdwIndex]) => Integer
HttpQueryInfoA([hRequest, dwInfoLevel, lpvBuffer, lpdwBufferLength, lpdwIndex]) => Integer
HttpQueryInfoW([hRequest, dwInfoLevel, lpvBuffer, lpdwBufferLength, lpdwIndex]) => Integer
HttpSendRequest([hRequest, lpszHeaders, dwHeadersLength, lpOptional, dwOptionalLength]) => Integer
HttpSendRequestA([hRequest, lpszHeaders, dwHeadersLength, lpOptional, dwOptionalLength]) => Integer
HttpSendRequestEx([hRequest, lpBuffersIn, lpBuffersOut, dwFlags, dwContext]) => Integer
HttpSendRequestExA([hRequest, lpBuffersIn, lpBuffersOut, dwFlags, dwContext]) => Integer
HttpSendRequestExW([hRequest, lpBuffersIn, lpBuffersOut, dwFlags, dwContext]) => Integer
HttpSendRequestW([hRequest, lpszHeaders, dwHeadersLength, lpOptional, dwOptionalLength]) => Integer
InternetAttemptConnect([dwReserved]) => Integer
InternetAutodial([dwFlags, hwndParent]) => Integer
InternetAutodialHangup([dwReserved]) => Integer
InternetCanonicalizeUrl([lpszUrl, lpszBuffer, lpdwBufferLength, dwFlags]) => Integer
InternetCanonicalizeUrlA([lpszUrl, lpszBuffer, lpdwBufferLength, dwFlags]) => Integer
InternetCanonicalizeUrlW([lpszUrl, lpszBuffer, lpdwBufferLength, dwFlags]) => Integer
InternetCheckConnection([lpszUrl, dwFlags, dwReserved]) => Integer
InternetCheckConnectionA([lpszUrl, dwFlags, dwReserved]) => Integer
InternetCheckConnectionW([lpszUrl, dwFlags, dwReserved]) => Integer
InternetClearAllPerSiteCookieDecisions() => Integer
InternetCloseHandle([hInternet]) => Integer
InternetCombineUrl([lpszBaseUrl, lpszRelativeUrl, lpszBuffer, lpdwBufferLength, dwFlags]) => Integer
InternetCombineUrlA([lpszBaseUrl, lpszRelativeUrl, lpszBuffer, lpdwBufferLength, dwFlags]) => Integer
InternetCombineUrlW([lpszBaseUrl, lpszRelativeUrl, lpszBuffer, lpdwBufferLength, dwFlags]) => Integer
InternetConfirmZoneCrossing([hWnd, szUrlPrev, szUrlNew, bPost]) => Integer
InternetConfirmZoneCrossingA([hWnd, szUrlPrev, szUrlNew, bPost]) => Integer
InternetConfirmZoneCrossingW([hWnd, szUrlPrev, szUrlNew, bPost]) => Integer
InternetConnect([hInternet, lpszServerName, nServerPort, lpszUsername, lpszPassword, dwService, dwFlags, dwContext]) => Integer
InternetConnectA([hInternet, lpszServerName, nServerPort, lpszUsername, lpszPassword, dwService, dwFlags, dwContext]) => Integer
InternetConnectW([hInternet, lpszServerName, nServerPort, lpszUsername, lpszPassword, dwService, dwFlags, dwContext]) => Integer
InternetCrackUrl([lpszUrl, dwUrlLength, dwFlags, lpUrlComponents]) => Integer
InternetCrackUrlA([lpszUrl, dwUrlLength, dwFlags, lpUrlComponents]) => Integer
InternetCrackUrlW([lpszUrl, dwUrlLength, dwFlags, lpUrlComponents]) => Integer
InternetCreateUrl([lpUrlComponents, dwFlags, lpszUrl, lpdwUrlLength]) => Integer
InternetCreateUrlA([lpUrlComponents, dwFlags, lpszUrl, lpdwUrlLength]) => Integer
InternetCreateUrlW([lpUrlComponents, dwFlags, lpszUrl, lpdwUrlLength]) => Integer
InternetDial([hwndParent, pszEntryName, dwFlags, lpdwConnection, dwReserved]) => Integer
InternetDialA([hwndParent, pszEntryName, dwFlags, lpdwConnection, dwReserved]) => Integer
InternetDialW([hwndParent, pszEntryName, dwFlags, lpdwConnection, dwReserved]) => Integer
InternetEnumPerSiteCookieDecision([pszSiteName, pcSiteNameSize, pdwDecision, dwIndex]) => Integer
InternetEnumPerSiteCookieDecisionA([pszSiteName, pcSiteNameSize, pdwDecision, dwIndex]) => Integer
InternetEnumPerSiteCookieDecisionW([pszSiteName, pcSiteNameSize, pdwDecision, dwIndex]) => Integer
InternetErrorDlg([hWnd, hRequest, dwError, dwFlags, lppvData]) => Integer
InternetFindNextFile([hFind, lpvFindData]) => Integer
InternetFindNextFileA([hFind, lpvFindData]) => Integer
InternetFindNextFileW([hFind, lpvFindData]) => Integer
InternetGetConnectedState([lpdwFlags, dwReserved]) => Integer
InternetGetConnectedStateEx([lpdwFlags, lpszConnectionName, dwNameLen, dwReserved]) => Integer
InternetGetConnectedStateExA([lpdwFlags, lpszConnectionName, dwNameLen, dwReserved]) => Integer
InternetGetConnectedStateExW([lpdwFlags, lpszConnectionName, dwNameLen, dwReserved]) => Integer
InternetGetCookie([lpszUrl, lpszCookieName, lpszCookieData, lpdwSize]) => Integer
InternetGetCookieA([lpszUrl, lpszCookieName, lpszCookieData, lpdwSize]) => Integer
InternetGetCookieEx([lpszURL, lpszCookieName, lpszCookieData, lpdwSize, dwFlags, lpReserved]) => Integer
InternetGetCookieExA([lpszURL, lpszCookieName, lpszCookieData, lpdwSize, dwFlags, lpReserved]) => Integer
InternetGetCookieExW([lpszURL, lpszCookieName, lpszCookieData, lpdwSize, dwFlags, lpReserved]) => Integer
InternetGetCookieW([lpszUrl, lpszCookieName, lpszCookieData, lpdwSize]) => Integer
InternetGetLastResponseInfo([lpdwError, lpszBuffer, lpdwBufferLength]) => Integer
InternetGetLastResponseInfoA([lpdwError, lpszBuffer, lpdwBufferLength]) => Integer
InternetGetLastResponseInfoW([lpdwError, lpszBuffer, lpdwBufferLength]) => Integer
InternetGetPerSiteCookieDecision([pchHostName, pResult]) => Integer
InternetGetPerSiteCookieDecisionA([pchHostName, pResult]) => Integer
InternetGetPerSiteCookieDecisionW([pchHostName, pResult]) => Integer
InternetGoOnline([lpszURL, hwndParent, dwFlags]) => Integer
InternetGoOnlineA([lpszURL, hwndParent, dwFlags]) => Integer
InternetGoOnlineW([lpszURL, hwndParent, dwFlags]) => Integer
InternetHangUp([dwConnection, dwReserved]) => Integer
InternetLockRequestFile([hInternet, lphLockReqHandle]) => Integer
InternetOpen([lpszAgent, dwAccessType, lpszProxyName, lpszProxyBypass, dwFlags]) => Integer
InternetOpenA([lpszAgent, dwAccessType, lpszProxyName, lpszProxyBypass, dwFlags]) => Integer
InternetOpenUrl([hInternet, lpszUrl, lpszHeaders, dwHeadersLength, dwFlags, dwContext]) => Integer
InternetOpenUrlA([hInternet, lpszUrl, lpszHeaders, dwHeadersLength, dwFlags, dwContext]) => Integer
InternetOpenUrlW([hInternet, lpszUrl, lpszHeaders, dwHeadersLength, dwFlags, dwContext]) => Integer
InternetOpenW([lpszAgent, dwAccessType, lpszProxyName, lpszProxyBypass, dwFlags]) => Integer
InternetQueryDataAvailable([hFile, lpdwNumberOfBytesAvailable, dwFlags, dwContext]) => Integer
InternetQueryOption([hInternet, dwOption, lpBuffer, lpdwBufferLength]) => Integer
InternetQueryOptionA([hInternet, dwOption, lpBuffer, lpdwBufferLength]) => Integer
InternetQueryOptionW([hInternet, dwOption, lpBuffer, lpdwBufferLength]) => Integer
InternetReadFile([hFile, lpBuffer, dwNumberOfBytesToRead, lpdwNumberOfBytesRead]) => Integer
InternetReadFileEx([hFile, lpBuffersOut, dwFlags, dwContext]) => Integer
InternetReadFileExA([hFile, lpBuffersOut, dwFlags, dwContext]) => Integer
InternetReadFileExW([hFile, lpBuffersOut, dwFlags, dwContext]) => Integer
InternetSetCookie([lpszUrl, lpszCookieName, lpszCookieData]) => Integer
InternetSetCookieA([lpszUrl, lpszCookieName, lpszCookieData]) => Integer
InternetSetCookieEx([lpszURL, lpszCookieName, lpszCookieData, dwFlags, dwReserved]) => Integer
InternetSetCookieExA([lpszURL, lpszCookieName, lpszCookieData, dwFlags, dwReserved]) => Integer
InternetSetCookieExW([lpszURL, lpszCookieName, lpszCookieData, dwFlags, dwReserved]) => Integer
InternetSetCookieW([lpszUrl, lpszCookieName, lpszCookieData]) => Integer
InternetSetFilePointer([hFile, lDistanceToMove, lpDistanceToMoveHigh, dwMoveMethod, dwContext]) => Integer
InternetSetOption([hInternet, dwOption, lpBuffer, dwBufferLength]) => Integer
InternetSetOptionA([hInternet, dwOption, lpBuffer, dwBufferLength]) => Integer
InternetSetOptionW([hInternet, dwOption, lpBuffer, dwBufferLength]) => Integer
InternetSetPerSiteCookieDecision([pchHostName, dwDecision]) => Integer
InternetSetPerSiteCookieDecisionA([pchHostName, dwDecision]) => Integer
InternetSetPerSiteCookieDecisionW([pchHostName, dwDecision]) => Integer
InternetSetStatusCallback([hInternet, lpfnInternetCallback]) => Integer
InternetSetStatusCallbackA([hInternet, lpfnInternetCallback]) => Integer
InternetSetStatusCallbackW([hInternet, lpfnInternetCallback]) => Integer
InternetTimeFromSystemTime([pst, dwRFC, lpszTime, cbTime]) => Integer
InternetTimeFromSystemTimeA([pst, dwRFC, lpszTime, cbTime]) => Integer
InternetTimeFromSystemTimeW([pst, dwRFC, lpszTime, cbTime]) => Integer
InternetTimeToSystemTime([lpszTime, pst, dwReserved]) => Integer
InternetTimeToSystemTimeA([lpszTime, pst, dwReserved]) => Integer
InternetTimeToSystemTimeW([lpszTime, pst, dwReserved]) => Integer
InternetUnlockRequestFile([hLockRequestInfo]) => Integer
InternetWriteFile([hFile, lpBuffer, dwNumberOfBytesToWrite, lpdwNumberOfBytesWritten]) => Integer
PrivacyGetZonePreferenceW([dwZone, dwType, pdwTemplate, pszBuffer, pdwBufferLength]) => Integer
PrivacySetZonePreferenceW([dwZone, dwType, dwTemplate, pszPreference]) => Integer
ReadUrlCacheEntryStream([hUrlCacheStream, dwLocation, lpBuffer, lpdwLen, dwReserved]) => Integer
ResumeSuspendedDownload([hRequest, dwResultCode]) => Integer
RetrieveUrlCacheEntryFile([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo, dwReserved]) => Integer
RetrieveUrlCacheEntryFileA([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo, dwReserved]) => Integer
RetrieveUrlCacheEntryFileW([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo, dwReserved]) => Integer
RetrieveUrlCacheEntryStream([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo, fRandomRead, dwReserved]) => Integer
RetrieveUrlCacheEntryStreamA([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo, fRandomRead, dwReserved]) => Integer
RetrieveUrlCacheEntryStreamW([lpszUrlName, lpCacheEntryInfo, lpcbCacheEntryInfo, fRandomRead, dwReserved]) => Integer
SetUrlCacheEntryGroup([lpszUrlName, dwFlags, GroupId, pbGroupAttributes, cbGroupAttributes, lpReserved]) => Integer
SetUrlCacheEntryGroupA([lpszUrlName, dwFlags, GroupId, pbGroupAttributes, cbGroupAttributes, lpReserved]) => Integer
SetUrlCacheEntryGroupW([lpszUrlName, dwFlags, GroupId, pbGroupAttributes, cbGroupAttributes, lpReserved]) => Integer
SetUrlCacheEntryInfo([lpszUrlName, lpCacheEntryInfo, dwFieldControl]) => Integer
SetUrlCacheEntryInfoA([lpszUrlName, lpCacheEntryInfo, dwFieldControl]) => Integer
SetUrlCacheEntryInfoW([lpszUrlName, lpCacheEntryInfo, dwFieldControl]) => Integer
SetUrlCacheGroupAttribute([gid, dwFlags, dwAttributes, lpGroupInfo, lpReserved]) => Integer
SetUrlCacheGroupAttributeA([gid, dwFlags, dwAttributes, lpGroupInfo, lpReserved]) => Integer
SetUrlCacheGroupAttributeW([gid, dwFlags, dwAttributes, lpGroupInfo, lpReserved]) => Integer
UnlockUrlCacheEntryFile([lpszUrlName, dwReserved]) => Integer
UnlockUrlCacheEntryFileA([lpszUrlName, dwReserved]) => Integer
UnlockUrlCacheEntryFileW([lpszUrlName, dwReserved]) => Integer
UnlockUrlCacheEntryStream([hUrlCacheStream, dwReserved]) => Integer
auxGetDevCaps([uDeviceID, lpCaps, cbCaps]) => Integer
auxGetDevCapsA([uDeviceID, lpCaps, cbCaps]) => Integer
auxGetDevCapsW([uDeviceID, lpCaps, cbCaps]) => Integer
auxGetNumDevs() => Integer
auxGetVolume([uDeviceID, lpdwVolume]) => Integer
auxOutMessage([uDeviceID, uMsg, dwParam1, dwParam2]) => Integer
auxSetVolume([uDeviceID, dwVolume]) => Integer
CloseDriver([hdrvr, lParam1, lParam2]) => Integer
DefDriverProc([dwDriverId, hdrvr, msg, lParam1, lParam2]) => Integer
DriverCallback([dwCallBack, dwFlags, hdrvr, msg, dwUser, dwParam1, dwParam2]) => Integer
DrvGetModuleHandle([hDriver]) => Integer
GetDriverModuleHandle([hdrvr]) => Integer
joyConfigChanged([dwFlags]) => Integer
joyGetDevCaps([uJoyID, pjc, cbjc]) => Integer
joyGetDevCapsA([uJoyID, pjc, cbjc]) => Integer
joyGetDevCapsW([uJoyID, pjc, cbjc]) => Integer
joyGetNumDevs() => Integer
joyGetPos([uJoyID, pji]) => Integer
joyGetPosEx([uJoyID, pji]) => Integer
joyGetThreshold([uJoyID, puThreshold]) => Integer
joyReleaseCapture([uJoyID]) => Integer
joySetCapture([hwnd, uJoyID, uPeriod, fChanged]) => Integer
joySetThreshold([uJoyID, uThreshold]) => Integer
mciExecute([pszCommand]) => Integer
mciGetCreatorTask([IDDevice]) => Integer
mciGetDeviceID([lpszDevice]) => Integer
mciGetDeviceIDA([lpszDevice]) => Integer
mciGetDeviceIDFromElementID([dwElementID, lpstrType]) => Integer
mciGetDeviceIDFromElementIDA([dwElementID, lpstrType]) => Integer
mciGetDeviceIDFromElementIDW([dwElementID, lpstrType]) => Integer
mciGetDeviceIDW([lpszDevice]) => Integer
mciGetErrorString([fdwError, lpszErrorText, cchErrorText]) => Integer
mciGetErrorStringA([fdwError, lpszErrorText, cchErrorText]) => Integer
mciGetErrorStringW([fdwError, lpszErrorText, cchErrorText]) => Integer
mciGetYieldProc([IDDevice, lpdwYieldData]) => Integer
mciSendCommand([IDDevice, uMsg, fdwCommand, dwParam]) => Integer
mciSendCommandA([IDDevice, uMsg, fdwCommand, dwParam]) => Integer
mciSendCommandW([IDDevice, uMsg, fdwCommand, dwParam]) => Integer
mciSendString([lpszCommand, lpszReturnString, cchReturn, hwndCallback]) => Integer
mciSendStringA([lpszCommand, lpszReturnString, cchReturn, hwndCallback]) => Integer
mciSendStringW([lpszCommand, lpszReturnString, cchReturn, hwndCallback]) => Integer
mciSetYieldProc([IDDevice, yp, dwYieldData]) => Integer
midiConnect([hMidi, hmo, pReserved]) => Integer
midiDisconnect([hMidi, hmo, pReserved]) => Integer
midiInAddBuffer([hMidiIn, lpMidiInHdr, cbMidiInHdr]) => Integer
midiInClose([hMidiIn]) => Integer
midiInGetDevCaps([uDeviceID, lpMidiInCaps, cbMidiInCaps]) => Integer
midiInGetDevCapsA([uDeviceID, lpMidiInCaps, cbMidiInCaps]) => Integer
midiInGetDevCapsW([uDeviceID, lpMidiInCaps, cbMidiInCaps]) => Integer
midiInGetErrorText([wError, lpText, cchText]) => Integer
midiInGetErrorTextA([wError, lpText, cchText]) => Integer
midiInGetErrorTextW([wError, lpText, cchText]) => Integer
midiInGetID([hmi, puDeviceID]) => Integer
midiInGetNumDevs() => Integer
midiInMessage([deviceID, msg, dw1, dw2]) => Integer
midiInOpen([lphMidiIn, uDeviceID, dwCallback, dwCallbackInstance, dwFlags]) => Integer
midiInPrepareHeader([hMidiIn, lpMidiInHdr, cbMidiInHdr]) => Integer
midiInReset([hMidiIn]) => Integer
midiInStart([hMidiIn]) => Integer
midiInStop([hMidiIn]) => Integer
midiInUnprepareHeader([hMidiIn, lpMidiInHdr, cbMidiInHdr]) => Integer
midiOutCacheDrumPatches([hmo, wPatch, lpKeyArray, wFlags]) => Integer
midiOutCachePatches([hmo, wBank, lpPatchArray, wFlags]) => Integer
midiOutClose([hmo]) => Integer
midiOutGetDevCaps([uDeviceID, lpMidiOutCaps, cbMidiOutCaps]) => Integer
midiOutGetDevCapsA([uDeviceID, lpMidiOutCaps, cbMidiOutCaps]) => Integer
midiOutGetDevCapsW([uDeviceID, lpMidiOutCaps, cbMidiOutCaps]) => Integer
midiOutGetErrorText([mmrError, lpText, cchText]) => Integer
midiOutGetErrorTextA([mmrError, lpText, cchText]) => Integer
midiOutGetErrorTextW([mmrError, lpText, cchText]) => Integer
midiOutGetID([hmo, puDeviceID]) => Integer
midiOutGetNumDevs() => Integer
midiOutGetVolume([hmo, lpdwVolume]) => Integer
midiOutLongMsg([hmo, lpMidiOutHdr, cbMidiOutHdr]) => Integer
midiOutMessage([deviceID, msg, dw1, dw2]) => Integer
midiOutOpen([lphmo, uDeviceID, dwCallback, dwCallbackInstance, dwFlags]) => Integer
midiOutPrepareHeader([hmo, lpMidiOutHdr, cbMidiOutHdr]) => Integer
midiOutReset([hmo]) => Integer
midiOutSetVolume([hmo, dwVolume]) => Integer
midiOutShortMsg([hmo, dwMsg]) => Integer
midiOutUnprepareHeader([hmo, lpMidiOutHdr, cbMidiOutHdr]) => Integer
midiStreamClose([hStream]) => Integer
midiStreamOpen([lphStream, puDeviceID, cMidi, dwCallback, dwInstance, fdwOpen]) => Integer
midiStreamOut([hMidiStream, lpMidiHdr, cbMidiHdr]) => Integer
midiStreamPause([hms]) => Integer
midiStreamPosition([hms, pmmt, cbmmt]) => Integer
midiStreamProperty([hm, lppropdata, dwProperty]) => Integer
midiStreamRestart([hms]) => Integer
midiStreamStop([hms]) => Integer
mixerClose([hmx]) => Integer
mixerGetControlDetails([hmxobj, pmxcd, fdwDetails]) => Integer
mixerGetControlDetailsA([hmxobj, pmxcd, fdwDetails]) => Integer
mixerGetControlDetailsW([hmxobj, pmxcd, fdwDetails]) => Integer
mixerGetDevCaps([uMxId, pmxcaps, cbmxcaps]) => Integer
mixerGetDevCapsA([uMxId, pmxcaps, cbmxcaps]) => Integer
mixerGetDevCapsW([uMxId, pmxcaps, cbmxcaps]) => Integer
mixerGetID([hmxobj, puMxId, fdwId]) => Integer
mixerGetLineControls([hmxobj, pmxlc, fdwControls]) => Integer
mixerGetLineControlsA([hmxobj, pmxlc, fdwControls]) => Integer
mixerGetLineControlsW([hmxobj, pmxlc, fdwControls]) => Integer
mixerGetLineInfo([hmxobj, pmxl, fdwInfo]) => Integer
mixerGetLineInfoA([hmxobj, pmxl, fdwInfo]) => Integer
mixerGetLineInfoW([hmxobj, pmxl, fdwInfo]) => Integer
mixerGetNumDevs() => Integer
mixerMessage([driverID, uMsg, dwParam1, dwParam2]) => Integer
mixerOpen([phmx, uMxId, dwCallback, dwInstance, fdwOpen]) => Integer
mixerSetControlDetails([hmxobj, pmxcd, fdwDetails]) => Integer
mmGetCurrentTask() => Integer
mmioAdvance([hmmio, lpmmioinfo, wFlags]) => Integer
mmioAscend([hmmio, lpck, wFlags]) => Integer
mmioClose([hmmio, wFlags]) => Integer
mmioCreateChunk([hmmio, lpck, wFlags]) => Integer
mmioDescend([hmmio, lpck, lpckParent, wFlags]) => Integer
mmioFlush([hmmio, fuFlush]) => Integer
mmioGetInfo([hmmio, lpmmioinfo, wFlags]) => Integer
mmioInstallIOProc([fccIOProc, pIOProc, dwFlags]) => Integer
mmioInstallIOProcA([fccIOProc, pIOProc, dwFlags]) => Integer
mmioInstallIOProcW([fccIOProc, pIOProc, dwFlags]) => Integer
mmioOpen([szFilename, lpmmioinfo, dwOpenFlags]) => Integer
mmioOpenA([szFilename, lpmmioinfo, dwOpenFlags]) => Integer
mmioOpenW([szFilename, lpmmioinfo, dwOpenFlags]) => Integer
mmioRead([hmmio, pch, cch]) => Integer
mmioRename([szFilename, szNewFilename, lpmmioinfo, dwRenameFlags]) => Integer
mmioRenameA([szFilename, szNewFilename, lpmmioinfo, dwRenameFlags]) => Integer
mmioRenameW([szFilename, szNewFilename, lpmmioinfo, dwRenameFlags]) => Integer
mmioSeek([hmmio, lOffset, iOrigin]) => Integer
mmioSendMessage([hmmio, wMsg, lParam1, lParam2]) => Integer
mmioSetBuffer([hmmio, pchBuffer, cchBuffer, wFlags]) => Integer
mmioSetInfo([hmmio, lpmmioinfo, wFlags]) => Integer
mmioStringToFOURCC([sz, wFlags]) => Integer
mmioStringToFOURCCA([sz, wFlags]) => Integer
mmioStringToFOURCCW([sz, wFlags]) => Integer
mmioWrite([hmmio, pch, cch]) => Integer
mmsystemGetVersion() => Integer
mmTaskBlock([h]) => void
mmTaskCreate([lpfn, lph, dwInst]) => Integer
mmTaskYield() => Integer
OpenDriver([lpDriverName, lpSectionName, lParam]) => Integer
PlaySound([pszSound, hmod, fdwSound]) => Integer
PlaySoundA([pszSound, hmod, fdwSound]) => Integer
PlaySoundW([pszSound, hmod, fdwSound]) => Integer
SendDriverMessage([hdrvr, msg, lParam1, lParam2]) => Integer
sndPlaySound([lpszSound, fuSound]) => Integer
sndPlaySoundA([lpszSound, fuSound]) => Integer
sndPlaySoundW([lpszSound, fuSound]) => Integer
timeBeginPeriod([uPeriod]) => Integer
timeEndPeriod([uPeriod]) => Integer
timeGetDevCaps([ptc, cbtc]) => Integer
timeGetSystemTime([pmmt, cbmmt]) => Integer
timeGetTime() => Integer
timeKillEvent([uTimerID]) => Integer
timeSetEvent([uDelay, uResolution, lpTimeProc, dwUser, fuEvent]) => Integer
waveInAddBuffer([hwi, pwh, cbwh]) => Integer
waveInClose([hwi]) => Integer
waveInGetDevCaps([uDeviceID, pwic, cbwic]) => Integer
waveInGetDevCapsA([uDeviceID, pwic, cbwic]) => Integer
waveInGetDevCapsW([uDeviceID, pwic, cbwic]) => Integer
waveInGetErrorText([mmrError, pszText, cchText]) => Integer
waveInGetErrorTextA([mmrError, pszText, cchText]) => Integer
waveInGetErrorTextW([mmrError, pszText, cchText]) => Integer
waveInGetID([hwi, puDeviceID]) => Integer
waveInGetNumDevs() => Integer
waveInGetPosition([hwi, pmmt, cbmmt]) => Integer
waveInMessage([deviceID, uMsg, dwParam1, dwParam2]) => Integer
waveInOpen([phwi, uDeviceID, pwfx, dwCallback, dwCallbackInstance, fdwOpen]) => Integer
waveInPrepareHeader([hwi, pwh, cbwh]) => Integer
waveInReset([hwi]) => Integer
waveInStart([hwi]) => Integer
waveInStop([hwi]) => Integer
waveInUnprepareHeader([hwi, pwh, cbwh]) => Integer
waveOutBreakLoop([hwo]) => Integer
waveOutClose([hwo]) => Integer
waveOutGetDevCaps([uDeviceID, pwoc, cbwoc]) => Integer
waveOutGetDevCapsA([uDeviceID, pwoc, cbwoc]) => Integer
waveOutGetDevCapsW([uDeviceID, pwoc, cbwoc]) => Integer
waveOutGetErrorText([mmrError, pszText, cchText]) => Integer
waveOutGetErrorTextA([mmrError, pszText, cchText]) => Integer
waveOutGetErrorTextW([mmrError, pszText, cchText]) => Integer
waveOutGetID([hwo, puDeviceID]) => Integer
waveOutGetNumDevs() => Integer
waveOutGetPitch([hwo, pdwPitch]) => Integer
waveOutGetPlaybackRate([hwo, pdwRate]) => Integer
waveOutGetPosition([hwo, pmmt, cbmmt]) => Integer
waveOutGetVolume([hwo, pdwVolume]) => Integer
waveOutMessage([deviceID, uMsg, dwParam1, dwParam2]) => Integer
waveOutOpen([phwo, uDeviceID, pwfx, dwCallback, dwCallbackInstance, fdwOpen]) => Integer
waveOutPause([hwo]) => Integer
waveOutPrepareHeader([hwo, pwh, cbwh]) => Integer
waveOutReset([hwo]) => Integer
waveOutRestart([hwo]) => Integer
waveOutSetPitch([hwo, dwPitch]) => Integer
waveOutSetPlaybackRate([hwo, dwRate]) => Integer
waveOutSetVolume([hwo, dwVolume]) => Integer
waveOutUnprepareHeader([hwo, pwh, cbwh]) => Integer
waveOutWrite([hwo, pwh, cbwh]) => Integer
__WSAFDIsSet([fd, set]) => Integer
accept([s, addr, addrlen]) => Integer
bind([s, name, namelen]) => Integer
closesocket([s]) => Integer
connect([s, name, namelen]) => Integer
freeaddrinfo([ai]) => void
FreeAddrInfoEx([pAddrInfo]) => void
FreeAddrInfoExW([pAddrInfo]) => void
FreeAddrInfoW([pAddrInfo]) => void
getaddrinfo([pNodeName, pServiceName, pHints, ppResult]) => Integer
GetAddrInfoEx([pName, pServiceName, dwNameSpace, lpNspId, pHints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle]) => Integer
GetAddrInfoExA([pName, pServiceName, dwNameSpace, lpNspId, pHints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle]) => Integer
GetAddrInfoExW([pName, pServiceName, dwNameSpace, lpNspId, pHints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle]) => Integer
GetAddrInfoW([pNodeName, pServiceName, pHints, ppResult]) => Integer
gethostbyaddr([addr, len, type]) => Integer
gethostbyname([name]) => Integer
gethostname([name, namelen]) => Integer
getnameinfo([sa, salen, host, hostlen, serv, servlen, flags]) => Integer
GetNameInfoW([pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize, pServiceBuffer, ServiceBufferSize, Flags]) => Integer
getpeername([s, name, namelen]) => Integer
getprotobyname([name]) => Integer
getprotobynumber([number]) => Integer
getservbyname([name, proto]) => Integer
getservbyport([port, proto]) => Integer
getsockname([s, name, namelen]) => Integer
getsockopt([s, level, optname, optval, optlen]) => Integer
htonl([hostlong]) => Integer
htons([hostshort]) => Integer
inet_addr([cp]) => Integer
inet_ntoa([in_addr]) => Integer
InetNtop([Family, pAddr, pStringBuf, StringBufSize]) => String
InetNtopW([Family, pAddr, pStringBuf, StringBufSize]) => String
InetPton([Family, pszAddrString, pAddrBuf]) => Integer
InetPtonW([Family, pszAddrString, pAddrBuf]) => Integer
ioctlsocket([s, cmd, argp]) => Integer
listen([s, backlog]) => Integer
ntohl([netlong]) => Integer
ntohs([netshort]) => Integer
recv([s, buf, len, flags]) => Integer
recvfrom([s, buf, len, flags, from, fromlen]) => Integer
select([nfds, readfds, writefds, exceptfds, timeout]) => Integer
send_([s, buf, len, flags]) => Integer
sendto([s, buf, len, flags, to, tolen]) => Integer
SetAddrInfoEx([pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle]) => Integer
SetAddrInfoExA([pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle]) => Integer
SetAddrInfoExW([pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle]) => Integer
setsockopt([s, level, optname, optval, optlen]) => Integer
shutdown_([s, how]) => Integer
socket([af, type, protocol]) => Integer
WSAAccept([s, addr, addrlen, lpfnCondition, dwCallbackData]) => Integer
WSAAddressToString([lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength]) => Integer
WSAAddressToStringA([lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength]) => Integer
WSAAddressToStringW([lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength]) => Integer
WSAAdvertiseProvider([puuidProviderId, pNSPv2Routine]) => Integer
WSAAsyncGetHostByAddr([hWnd, wMsg, addr, len, type, buf, buflen]) => Integer
WSAAsyncGetHostByName([hWnd, wMsg, name, buf, buflen]) => Integer
WSAAsyncGetProtoByName([hWnd, wMsg, name, buf, buflen]) => Integer
WSAAsyncGetProtoByNumber([hWnd, wMsg, number, buf, buflen]) => Integer
WSAAsyncGetServByName([hWnd, wMsg, name, proto, buf, buflen]) => Integer
WSAAsyncGetServByPort([hWnd, wMsg, port, proto, buf, buflen]) => Integer
WSAAsyncSelect([s, hWnd, wMsg, lEvent]) => Integer
WSACancelAsyncRequest([hAsyncTaskHandle]) => Integer
WSACleanup() => Integer
WSACloseEvent([hEvent]) => Integer
WSAConnect([s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS]) => Integer
WSAConnectByList([s, SocketAddressList, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved]) => Integer
WSAConnectByName([s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved]) => Integer
WSAConnectByNameA([s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved]) => Integer
WSAConnectByNameW([s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved]) => Integer
WSACreateEvent() => Integer
WSADuplicateSocket([s, dwProcessId, lpProtocolInfo]) => Integer
WSADuplicateSocketA([s, dwProcessId, lpProtocolInfo]) => Integer
WSADuplicateSocketW([s, dwProcessId, lpProtocolInfo]) => Integer
WSAEnumNameSpaceProviders([lpdwBufferLength, lpnspBuffer]) => Integer
WSAEnumNameSpaceProvidersA([lpdwBufferLength, lpnspBuffer]) => Integer
WSAEnumNameSpaceProvidersEx([lpdwBufferLength, lpnspBuffer]) => Integer
WSAEnumNameSpaceProvidersExA([lpdwBufferLength, lpnspBuffer]) => Integer
WSAEnumNameSpaceProvidersExW([lpdwBufferLength, lpnspBuffer]) => Integer
WSAEnumNameSpaceProvidersW([lpdwBufferLength, lpnspBuffer]) => Integer
WSAEnumNetworkEvents([s, hEventObject, lpNetworkEvents]) => Integer
WSAEnumProtocols([lpiProtocols, lpProtocolBuffer, lpdwBufferLength]) => Integer
WSAEnumProtocolsA([lpiProtocols, lpProtocolBuffer, lpdwBufferLength]) => Integer
WSAEnumProtocolsW([lpiProtocols, lpProtocolBuffer, lpdwBufferLength]) => Integer
WSAEventSelect([s, hEventObject, lNetworkEvents]) => Integer
WSAGetLastError() => Integer
WSAGetOverlappedResult([s, lpOverlapped, lpcbTransfer, fWait, lpdwFlags]) => Integer
WSAGetQOSByName([s, lpQOSName, lpQOS]) => Integer
WSAGetServiceClassInfo([lpProviderId, lpServiceClassId, lpdwBufferLength, lpServiceClassInfo]) => Integer
WSAGetServiceClassInfoA([lpProviderId, lpServiceClassId, lpdwBufferLength, lpServiceClassInfo]) => Integer
WSAGetServiceClassInfoW([lpProviderId, lpServiceClassId, lpdwBufferLength, lpServiceClassInfo]) => Integer
WSAGetServiceClassNameByClassId([lpServiceClassId, lpszServiceClassName, lpdwBufferLength]) => Integer
WSAGetServiceClassNameByClassIdA([lpServiceClassId, lpszServiceClassName, lpdwBufferLength]) => Integer
WSAGetServiceClassNameByClassIdW([lpServiceClassId, lpszServiceClassName, lpdwBufferLength]) => Integer
WSAHtonl([s, hostlong, lpnetlong]) => Integer
WSAHtons([s, hostshort, lpnetshort]) => Integer
WSAInstallServiceClass([lpServiceClassInfo]) => Integer
WSAInstallServiceClassA([lpServiceClassInfo]) => Integer
WSAInstallServiceClassW([lpServiceClassInfo]) => Integer
WSAIoctl([s, dwIoControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped, lpCompletionRoutine]) => Integer
WSAJoinLeaf([s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS, dwFlags]) => Integer
WSALookupServiceBegin([lpqsRestrictions, dwControlFlags, lphLookup]) => Integer
WSALookupServiceBeginA([lpqsRestrictions, dwControlFlags, lphLookup]) => Integer
WSALookupServiceBeginW([lpqsRestrictions, dwControlFlags, lphLookup]) => Integer
WSALookupServiceEnd([hLookup]) => Integer
WSALookupServiceNext([hLookup, dwControlFlags, lpdwBufferLength, lpqsResults]) => Integer
WSALookupServiceNextA([hLookup, dwControlFlags, lpdwBufferLength, lpqsResults]) => Integer
WSALookupServiceNextW([hLookup, dwControlFlags, lpdwBufferLength, lpqsResults]) => Integer
WSANtohl([s, netlong, lphostlong]) => Integer
WSANtohs([s, netshort, lphostshort]) => Integer
WSAPoll([fdarray, nfds, timeout]) => Integer
WSAProviderCompleteAsyncCall([hAsyncCall, iRetCode]) => Integer
WSAProviderConfigChange([lpNotificationHandle, lpOverlapped, lpCompletionRoutine]) => Integer
WSARecv([s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped, lpCompletionRoutine]) => Integer
WSARecvDisconnect([s, lpInboundDisconnectData]) => Integer
WSARecvFrom([s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpFrom, lpFromlen, lpOverlapped, lpCompletionRoutine]) => Integer
WSARemoveServiceClass([lpServiceClassId]) => Integer
WSAResetEvent([hEvent]) => Integer
WSASend([s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpOverlapped, lpCompletionRoutine]) => Integer
WSASendDisconnect([s, lpOutboundDisconnectData]) => Integer
WSASendMsg([s, lpMsg, dwFlags, lpNumberOfBytesSent, lpOverlapped, lpCompletionRoutine]) => Integer
WSASendTo([s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo, iToLen, lpOverlapped, lpCompletionRoutine]) => Integer
WSASetEvent([hEvent]) => Integer
WSASetLastError([iError]) => void
WSASetService([lpqsRegInfo, essOperation, dwControlFlags]) => Integer
WSASetServiceA([lpqsRegInfo, essOperation, dwControlFlags]) => Integer
WSASetServiceW([lpqsRegInfo, essOperation, dwControlFlags]) => Integer
WSASocket([af, type, protocol, lpProtocolInfo, g, dwFlags]) => Integer
WSASocketA([af, type, protocol, lpProtocolInfo, g, dwFlags]) => Integer
WSASocketW([af, type, protocol, lpProtocolInfo, g, dwFlags]) => Integer
WSAStartup([wVersionRequested, lpWSAData]) => Integer
WSAStringToAddress([AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength]) => Integer
WSAStringToAddressA([AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength]) => Integer
WSAStringToAddressW([AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength]) => Integer
WSAUnadvertiseProvider([puuidProviderId]) => Integer
WSAWaitForMultipleEvents([cEvents, lphEvents, fWaitAll, dwTimeout, fAlertable]) => Integer
WSCDeinstallProvider([lpProviderId, lpErrno]) => Integer
WSCEnableNSProvider([lpProviderId, fEnable]) => Integer
WSCEnumProtocols([lpiProtocols, lpProtocolBuffer, lpdwBufferLength, lpErrno]) => Integer
WSCGetApplicationCategory([Path, PathLength, Extra, ExtraLength, pPermittedLspCategories, lpErrno]) => Integer
WSCGetProviderInfo([lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno]) => Integer
WSCGetProviderPath([lpProviderId, lpszProviderDllPath, lpProviderDllPathLen, lpErrno]) => Integer
WSCInstallNameSpace([lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId]) => Integer
WSCInstallNameSpaceEx([lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId, lpProviderInfo]) => Integer
WSCInstallProvider([lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno]) => Integer
WSCInstallProviderAndChains([lpProviderId, lpszProviderDllPath, lpszLspName, dwServiceFlags, lpProtocolInfoList, dwNumberOfEntries, lpdwCatalogEntryId, lpErrno]) => Integer
WSCSetApplicationCategory([Path, PathLength, Extra, ExtraLength, PermittedLspCategories, pPrevPermLspCat, lpErrno]) => Integer
WSCSetProviderInfo([lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno]) => Integer
WSCUnInstallNameSpace([lpProviderId]) => Integer
WSCUpdateProvider([lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno]) => Integer